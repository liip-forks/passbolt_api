/*[system-bundles-config]*/
System.bundles = {};
/*stealconfig.js*/
define('stealconfig.js', function (require, exports, module) {
    (function (global, require, exports, module) {
        steal.config({
            main: 'passbolt',
            map: {
                'jquery/jquery': 'jquery',
                'urijs': 'node_modules/urijs/src'
            },
            paths: {
                'can': 'node_modules/can/can.js',
                'can/*': 'node_modules/can/*.js',
                'jquery': 'node_modules/jquery/dist/jquery.js',
                'moment': 'node_modules/moment/moment.js',
                'moment-timezone-with-data': 'node_modules/moment-timezone/builds/moment-timezone-with-data.js',
                'sha1': 'node_modules/jssha/src/sha.js',
                'underscore': 'node_modules/underscore/underscore.js',
                'xregexp': 'node_modules/xregexp/xregexp-all.js',
                'passbolt-mad': 'node_modules/passbolt-mad/passbolt-mad.js',
                'passbolt-mad/*': 'node_modules/passbolt-mad/*.js'
            },
            'meta': {
                'mocha': {
                    'format': 'global',
                    'exports': 'mocha',
                    'deps': ['steal-mocha/add-dom']
                }
            },
            ext: { 'ejs': 'passbolt-mad/lib/can/viewEjsSystem' }
        });
        System.config({ buildConfig: { map: { 'can/util/util': 'can/util/domless/domless' } } });
    }(function () {
        return this;
    }(), require, exports, module));
});
/*moment*/
;
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define('moment', factory) : global.moment = factory();
}(this, function () {
    'use strict';
    var hookCallback;
    function hooks() {
        return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
    function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }
    function isUndefined(input) {
        return input === void 0;
    }
    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }
        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }
        return a;
    }
    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }
    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;
            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }
            return false;
        };
    }
    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }
    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }
        return m;
    }
    var momentProperties = hooks.momentProperties = [];
    function copyConfig(to, from) {
        var i, prop, val;
        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }
        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }
        return to;
    }
    var updateInProgress = false;
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }
        return value;
    }
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }
    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2);
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }
    function set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }
    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }
    var keys;
    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }
    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };
    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
            return format;
        }
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }
    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }
        return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({
                unit: u,
                priority: priorities[u]
            });
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }
        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match3to4 = /\d\d\d\d?/;
    var match5to6 = /\d\d\d\d\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;
    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
    var regexes = {};
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }
        return regexes[token](config._strict, config._locale);
    }
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    var tokens = {};
    function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }
    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;
    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });
    addFormatToken(0, [
        'YY',
        2
    ], 0, function () {
        return this.year() % 100;
    });
    addFormatToken(0, [
        'YYYY',
        4
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYY',
        5
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYYY',
        6,
        true
    ], 0, 'year');
    addUnitAlias('year', 'y');
    addUnitPriority('year', 1);
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
        'YYYYY',
        'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    var getSetYear = makeGetSet('FullYear', true);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }
    function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }
    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }
    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }
    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }
    function mod(n, x) {
        return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }
    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken('M', [
        'MM',
        2
    ], 'Mo', function () {
        return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });
    addUnitAlias('month', 'M');
    addUnitPriority('month', 8);
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    addParseToken([
        'M',
        'MM'
    ], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        'MMM',
        'MMMM'
    ], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });
    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([
                    2000,
                    i
                ]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
            mom = createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }
    function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
            return mom;
        }
        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }
    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
            mom = createUTC([
                2000,
                i
            ]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }
    function createDate(y, m, d, h, M, s, ms) {
        var date = new Date(y, m, d, h, M, s, ms);
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }
    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }
    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
        return {
            week: resWeek,
            year: resYear
        };
    }
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken('w', [
        'ww',
        2
    ], 'wo', 'week');
    addFormatToken('W', [
        'WW',
        2
    ], 'Wo', 'isoWeek');
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
    ], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
    ], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });
    addWeekParseToken([
        'd',
        'e',
        'E'
    ], function (input, week, config, token) {
        week[token] = toInt(input);
    });
    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }
        if (!isNaN(input)) {
            return parseInt(input, 10);
        }
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }
        return null;
    }
    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
        if (!m) {
            return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for (i = 0; i < 7; ++i) {
                mom = createUTC([
                    2000,
                    1
                ]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
            mom = createUTC([
                2000,
                1
            ]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }
    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }
    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }
    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            mom = createUTC([
                2000,
                1
            ]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    function kFormat() {
        return this.hours() || 24;
    }
    addFormatToken('H', [
        'HH',
        2
    ], 0, 'hour');
    addFormatToken('h', [
        'hh',
        2
    ], 0, hFormat);
    addFormatToken('k', [
        'kk',
        2
    ], 0, kFormat);
    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem('a', true);
    meridiem('A', false);
    addUnitAlias('hour', 'h');
    addUnitPriority('hour', 13);
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken([
        'H',
        'HH'
    ], HOUR);
    addParseToken([
        'k',
        'kk'
    ], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken([
        'a',
        'A'
    ], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        'h',
        'hh'
    ], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
        return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }
    var getSetHour = makeGetSet('Hours', true);
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {};
    var localeFamilies = {};
    var globalLocale;
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }
    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
            }
        }
        return locales[name];
    }
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }
            if (data) {
                globalLocale = data;
            }
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, config) {
        if (config !== null) {
            var parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    if (!localeFamilies[config.parentLocale]) {
                        localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                        name: name,
                        config: config
                    });
                    return null;
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }
            getSetGlobalLocale(name);
            return locales[name];
        } else {
            delete locales[name];
            return null;
        }
    }
    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;
            getSetGlobalLocale(name);
        } else {
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }
    function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }
        if (!key) {
            return globalLocale;
        }
        if (!isArray(key)) {
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }
        return chooseLocale(key);
    }
    function listLocales() {
        return keys(locales);
    }
    function checkOverflow(m) {
        var overflow;
        var a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }
    function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate()
            ];
        }
        return [
            nowValue.getFullYear(),
            nowValue.getMonth(),
            nowValue.getDate()
        ];
    }
    function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
            return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            var curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
            week = defaults(w.w, curWeek.week);
            if (w.d != null) {
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    var isoDates = [
        [
            'YYYYYY-MM-DD',
            /[+-]\d{6}-\d\d-\d\d/
        ],
        [
            'YYYY-MM-DD',
            /\d{4}-\d\d-\d\d/
        ],
        [
            'GGGG-[W]WW-E',
            /\d{4}-W\d\d-\d/
        ],
        [
            'GGGG-[W]WW',
            /\d{4}-W\d\d/,
            false
        ],
        [
            'YYYY-DDD',
            /\d{4}-\d{3}/
        ],
        [
            'YYYY-MM',
            /\d{4}-\d\d/,
            false
        ],
        [
            'YYYYYYMMDD',
            /[+-]\d{10}/
        ],
        [
            'YYYYMMDD',
            /\d{8}/
        ],
        [
            'GGGG[W]WWE',
            /\d{4}W\d{3}/
        ],
        [
            'GGGG[W]WW',
            /\d{4}W\d{2}/,
            false
        ],
        [
            'YYYYDDD',
            /\d{7}/
        ]
    ];
    var isoTimes = [
        [
            'HH:mm:ss.SSSS',
            /\d\d:\d\d:\d\d\.\d+/
        ],
        [
            'HH:mm:ss,SSSS',
            /\d\d:\d\d:\d\d,\d+/
        ],
        [
            'HH:mm:ss',
            /\d\d:\d\d:\d\d/
        ],
        [
            'HH:mm',
            /\d\d:\d\d/
        ],
        [
            'HHmmss.SSSS',
            /\d\d\d\d\d\d\.\d+/
        ],
        [
            'HHmmss,SSSS',
            /\d\d\d\d\d\d,\d+/
        ],
        [
            'HHmmss',
            /\d\d\d\d\d\d/
        ],
        [
            'HHmm',
            /\d\d\d\d/
        ],
        [
            'HH',
            /\d\d/
        ]
    ];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];
        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }
        return result;
    }
    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }
    function preprocessRFC2822(s) {
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }
    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }
            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }
        hooks.createFromInputFallback(config);
    }
    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    hooks.ISO_8601 = function () {
    };
    hooks.RFC_2822 = function () {
    };
    function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            return hour;
        }
    }
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (!isValid(tempConfig)) {
                continue;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) {
            return;
        }
        var i = normalizeObjectUnits(config._i);
        config._a = map([
            i.year,
            i.month,
            i.day || i.date,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ], function (obj) {
            return obj && parseInt(obj, 10);
        });
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            res.add(1, 'd');
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === '') {
            return createInvalid({ nullInput: true });
        }
        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }
        if (!isValid(config)) {
            config._d = null;
        }
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = undefined;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    });
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
    }
    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond'
    ];
    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }
        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false;
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }
        return true;
    }
    function isValid$1() {
        return this._isValid;
    }
    function createInvalid$1() {
        return createDuration(NaN);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 1000 * 60 * 60;
        this._days = +days + weeks * 7;
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }
    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset('Z', ':');
    offset('ZZ', '');
    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken([
        'Z',
        'ZZ'
    ], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);
        if (matches === null) {
            return null;
        }
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || [
            '-',
            0,
            0
        ];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }
    function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    hooks.updateOffset = function () {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
        } else {
            return -this.utcOffset();
        }
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }
        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }
        return this._isDSTShifted;
    }
    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
        var duration = input, match = null, sign, ret, diffRes;
        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }
        return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
        var res = inp && parseFloat(inp.replace(',', '.'));
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {
            milliseconds: 0,
            months: 0
        };
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {
                milliseconds: 0,
                months: 0
            };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;
                val = period;
                period = tmp;
            }
            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) {
            return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }
    var add = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }
    function calendar$1(time, formats) {
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf('day'), format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }
    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }
    function isBetween(from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }
    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
        var that, zoneDelta, delta, output;
        if (!this.isValid()) {
            return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
            return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000;
        units = normalizeUnits(units);
        switch (units) {
        case 'year':
            output = monthDiff(this, that) / 12;
            break;
        case 'month':
            output = monthDiff(this, that);
            break;
        case 'quarter':
            output = monthDiff(this, that) / 3;
            break;
        case 'second':
            output = (this - that) / 1000;
            break;
        case 'minute':
            output = (this - that) / 60000;
            break;
        case 'hour':
            output = (this - that) / 3600000;
            break;
        case 'day':
            output = (this - that - zoneDelta) / 86400000;
            break;
        case 'week':
            output = (this - that - zoneDelta) / 604800000;
            break;
        default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this._d.valueOf()).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({
                to: this,
                from: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({
                from: this,
                to: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }
    function locale(key) {
        var newLocaleData;
        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });
    function localeData() {
        return this._locale;
    }
    function startOf(units) {
        units = normalizeUnits(units);
        switch (units) {
        case 'year':
            this.month(0);
        case 'quarter':
        case 'month':
            this.date(1);
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
        case 'hour':
            this.minutes(0);
        case 'minute':
            this.seconds(0);
        case 'second':
            this.milliseconds(0);
        }
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }
        return this;
    }
    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        if (units === 'date') {
            units = 'day';
        }
        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    }
    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
        return new Date(this.valueOf());
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function toJSON() {
        return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
        return isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    addFormatToken(0, [
        'gg',
        2
    ], 0, function () {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        'GG',
        2
    ], 0, function () {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
    ], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        'gg',
        'GG'
    ], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    addFormatToken('Q', 0, 'Qo', 'quarter');
    addUnitAlias('quarter', 'Q');
    addUnitPriority('quarter', 7);
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken('D', [
        'DD',
        2
    ], 'Do', 'date');
    addUnitAlias('date', 'D');
    addUnitPriority('date', 9);
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken([
        'D',
        'DD'
    ], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet('Date', true);
    addFormatToken('DDD', [
        'DDDD',
        3
    ], 'DDDo', 'dayOfYear');
    addUnitAlias('dayOfYear', 'DDD');
    addUnitPriority('dayOfYear', 4);
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
        'DDD',
        'DDDD'
    ], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }
    addFormatToken('m', [
        'mm',
        2
    ], 0, 'minute');
    addUnitAlias('minute', 'm');
    addUnitPriority('minute', 14);
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
        'm',
        'mm'
    ], MINUTE);
    var getSetMinute = makeGetSet('Minutes', false);
    addFormatToken('s', [
        'ss',
        2
    ], 0, 'second');
    addUnitAlias('second', 's');
    addUnitPriority('second', 15);
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
        's',
        'ss'
    ], SECOND);
    var getSetSecond = makeGetSet('Seconds', false);
    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        'SS',
        2
    ], 0, function () {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        'SSS',
        3
    ], 0, 'millisecond');
    addFormatToken(0, [
        'SSSS',
        4
    ], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        'SSSSS',
        5
    ], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        'SSSSSS',
        6
    ], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        'SSSSSSS',
        7
    ], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        'SSSSSSSS',
        8
    ], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        'SSSSSSSSS',
        9
    ], 0, function () {
        return this.millisecond() * 1000000;
    });
    addUnitAlias('millisecond', 'ms');
    addUnitPriority('millisecond', 16);
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    function createUnix(input) {
        return createLocal(input * 1000);
    }
    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
        return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }
        format = format || '';
        if (index != null) {
            return get$1(format, index, field, 'month');
        }
        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0;
        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }
        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }
    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }
    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }
    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }
    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }
    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }
    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    var mathAbs = Math.abs;
    function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }
    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
            days = 0;
            months = 0;
        }
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        return months * 146097 / 4800;
    }
    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 86400000;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
            case 'week':
                return days / 7 + milliseconds / 604800000;
            case 'day':
                return days + milliseconds / 86400000;
            case 'hour':
                return days * 24 + milliseconds / 3600000;
            case 'minute':
                return days * 1440 + milliseconds / 60000;
            case 'second':
                return days * 86400 + milliseconds / 1000;
            case 'millisecond':
                return Math.floor(days * 86400000) + milliseconds;
            default:
                throw new Error('Unknown unit ' + units);
            }
        }
    }
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
    }
    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');
    function clone$1() {
        return createDuration(this);
    }
    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }
    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }
    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round;
    var thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds <= thresholds.ss && [
            's',
            seconds
        ] || seconds < thresholds.s && [
            'ss',
            seconds
        ] || minutes <= 1 && ['m'] || minutes < thresholds.m && [
            'mm',
            minutes
        ] || hours <= 1 && ['h'] || hours < thresholds.h && [
            'hh',
            hours
        ] || days <= 1 && ['d'] || days < thresholds.d && [
            'dd',
            days
        ] || months <= 1 && ['M'] || months < thresholds.M && [
            'MM',
            months
        ] || years <= 1 && ['y'] || [
            'yy',
            years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }
    function humanize(withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);
        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }
        return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years;
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        years = absFloor(months / 12);
        months %= 12;
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();
        if (!total) {
            return 'P0D';
        }
        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });
    hooks.version = '2.20.1';
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        DATE: 'YYYY-MM-DD',
        TIME: 'HH:mm',
        TIME_SECONDS: 'HH:mm:ss',
        TIME_MS: 'HH:mm:ss.SSS',
        WEEK: 'YYYY-[W]WW',
        MONTH: 'YYYY-MM'
    };
    return hooks;
}));
/*moment-timezone-with-data*/
(function (root, factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define('moment-timezone-with-data', ['moment'], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory(require('moment'));
    } else {
        factory(root.moment);
    }
}(this, function (moment) {
    'use strict';
    var VERSION = '0.5.14', zones = {}, links = {}, names = {}, guesses = {}, cachedGuess, momentVersion = moment.version.split('.'), major = +momentVersion[0], minor = +momentVersion[1];
    if (major < 2 || major === 2 && minor < 6) {
        logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
    }
    function charCodeToInt(charCode) {
        if (charCode > 96) {
            return charCode - 87;
        } else if (charCode > 64) {
            return charCode - 29;
        }
        return charCode - 48;
    }
    function unpackBase60(string) {
        var i = 0, parts = string.split('.'), whole = parts[0], fractional = parts[1] || '', multiplier = 1, num, out = 0, sign = 1;
        if (string.charCodeAt(0) === 45) {
            i = 1;
            sign = -1;
        }
        for (i; i < whole.length; i++) {
            num = charCodeToInt(whole.charCodeAt(i));
            out = 60 * out + num;
        }
        for (i = 0; i < fractional.length; i++) {
            multiplier = multiplier / 60;
            num = charCodeToInt(fractional.charCodeAt(i));
            out += num * multiplier;
        }
        return out * sign;
    }
    function arrayToInt(array) {
        for (var i = 0; i < array.length; i++) {
            array[i] = unpackBase60(array[i]);
        }
    }
    function intToUntil(array, length) {
        for (var i = 0; i < length; i++) {
            array[i] = Math.round((array[i - 1] || 0) + array[i] * 60000);
        }
        array[length - 1] = Infinity;
    }
    function mapIndices(source, indices) {
        var out = [], i;
        for (i = 0; i < indices.length; i++) {
            out[i] = source[indices[i]];
        }
        return out;
    }
    function unpack(string) {
        var data = string.split('|'), offsets = data[2].split(' '), indices = data[3].split(''), untils = data[4].split(' ');
        arrayToInt(offsets);
        arrayToInt(indices);
        arrayToInt(untils);
        intToUntil(untils, indices.length);
        return {
            name: data[0],
            abbrs: mapIndices(data[1].split(' '), indices),
            offsets: mapIndices(offsets, indices),
            untils: untils,
            population: data[5] | 0
        };
    }
    function Zone(packedString) {
        if (packedString) {
            this._set(unpack(packedString));
        }
    }
    Zone.prototype = {
        _set: function (unpacked) {
            this.name = unpacked.name;
            this.abbrs = unpacked.abbrs;
            this.untils = unpacked.untils;
            this.offsets = unpacked.offsets;
            this.population = unpacked.population;
        },
        _index: function (timestamp) {
            var target = +timestamp, untils = this.untils, i;
            for (i = 0; i < untils.length; i++) {
                if (target < untils[i]) {
                    return i;
                }
            }
        },
        parse: function (timestamp) {
            var target = +timestamp, offsets = this.offsets, untils = this.untils, max = untils.length - 1, offset, offsetNext, offsetPrev, i;
            for (i = 0; i < max; i++) {
                offset = offsets[i];
                offsetNext = offsets[i + 1];
                offsetPrev = offsets[i ? i - 1 : i];
                if (offset < offsetNext && tz.moveAmbiguousForward) {
                    offset = offsetNext;
                } else if (offset > offsetPrev && tz.moveInvalidForward) {
                    offset = offsetPrev;
                }
                if (target < untils[i] - offset * 60000) {
                    return offsets[i];
                }
            }
            return offsets[max];
        },
        abbr: function (mom) {
            return this.abbrs[this._index(mom)];
        },
        offset: function (mom) {
            logError('zone.offset has been deprecated in favor of zone.utcOffset');
            return this.offsets[this._index(mom)];
        },
        utcOffset: function (mom) {
            return this.offsets[this._index(mom)];
        }
    };
    function OffsetAt(at) {
        var timeString = at.toTimeString();
        var abbr = timeString.match(/\([a-z ]+\)/i);
        if (abbr && abbr[0]) {
            abbr = abbr[0].match(/[A-Z]/g);
            abbr = abbr ? abbr.join('') : undefined;
        } else {
            abbr = timeString.match(/[A-Z]{3,5}/g);
            abbr = abbr ? abbr[0] : undefined;
        }
        if (abbr === 'GMT') {
            abbr = undefined;
        }
        this.at = +at;
        this.abbr = abbr;
        this.offset = at.getTimezoneOffset();
    }
    function ZoneScore(zone) {
        this.zone = zone;
        this.offsetScore = 0;
        this.abbrScore = 0;
    }
    ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
        this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
        if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
            this.abbrScore++;
        }
    };
    function findChange(low, high) {
        var mid, diff;
        while (diff = ((high.at - low.at) / 120000 | 0) * 60000) {
            mid = new OffsetAt(new Date(low.at + diff));
            if (mid.offset === low.offset) {
                low = mid;
            } else {
                high = mid;
            }
        }
        return low;
    }
    function userOffsets() {
        var startYear = new Date().getFullYear() - 2, last = new OffsetAt(new Date(startYear, 0, 1)), offsets = [last], change, next, i;
        for (i = 1; i < 48; i++) {
            next = new OffsetAt(new Date(startYear, i, 1));
            if (next.offset !== last.offset) {
                change = findChange(last, next);
                offsets.push(change);
                offsets.push(new OffsetAt(new Date(change.at + 60000)));
            }
            last = next;
        }
        for (i = 0; i < 4; i++) {
            offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
            offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
        }
        return offsets;
    }
    function sortZoneScores(a, b) {
        if (a.offsetScore !== b.offsetScore) {
            return a.offsetScore - b.offsetScore;
        }
        if (a.abbrScore !== b.abbrScore) {
            return a.abbrScore - b.abbrScore;
        }
        return b.zone.population - a.zone.population;
    }
    function addToGuesses(name, offsets) {
        var i, offset;
        arrayToInt(offsets);
        for (i = 0; i < offsets.length; i++) {
            offset = offsets[i];
            guesses[offset] = guesses[offset] || {};
            guesses[offset][name] = true;
        }
    }
    function guessesForUserOffsets(offsets) {
        var offsetsLength = offsets.length, filteredGuesses = {}, out = [], i, j, guessesOffset;
        for (i = 0; i < offsetsLength; i++) {
            guessesOffset = guesses[offsets[i].offset] || {};
            for (j in guessesOffset) {
                if (guessesOffset.hasOwnProperty(j)) {
                    filteredGuesses[j] = true;
                }
            }
        }
        for (i in filteredGuesses) {
            if (filteredGuesses.hasOwnProperty(i)) {
                out.push(names[i]);
            }
        }
        return out;
    }
    function rebuildGuess() {
        try {
            var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
            if (intlName && intlName.length > 3) {
                var name = names[normalizeName(intlName)];
                if (name) {
                    return name;
                }
                logError('Moment Timezone found ' + intlName + ' from the Intl api, but did not have that data loaded.');
            }
        } catch (e) {
        }
        var offsets = userOffsets(), offsetsLength = offsets.length, guesses = guessesForUserOffsets(offsets), zoneScores = [], zoneScore, i, j;
        for (i = 0; i < guesses.length; i++) {
            zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
            for (j = 0; j < offsetsLength; j++) {
                zoneScore.scoreOffsetAt(offsets[j]);
            }
            zoneScores.push(zoneScore);
        }
        zoneScores.sort(sortZoneScores);
        return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
    }
    function guess(ignoreCache) {
        if (!cachedGuess || ignoreCache) {
            cachedGuess = rebuildGuess();
        }
        return cachedGuess;
    }
    function normalizeName(name) {
        return (name || '').toLowerCase().replace(/\//g, '_');
    }
    function addZone(packed) {
        var i, name, split, normalized;
        if (typeof packed === 'string') {
            packed = [packed];
        }
        for (i = 0; i < packed.length; i++) {
            split = packed[i].split('|');
            name = split[0];
            normalized = normalizeName(name);
            zones[normalized] = packed[i];
            names[normalized] = name;
            addToGuesses(normalized, split[2].split(' '));
        }
    }
    function getZone(name, caller) {
        name = normalizeName(name);
        var zone = zones[name];
        var link;
        if (zone instanceof Zone) {
            return zone;
        }
        if (typeof zone === 'string') {
            zone = new Zone(zone);
            zones[name] = zone;
            return zone;
        }
        if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
            zone = zones[name] = new Zone();
            zone._set(link);
            zone.name = names[name];
            return zone;
        }
        return null;
    }
    function getNames() {
        var i, out = [];
        for (i in names) {
            if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
                out.push(names[i]);
            }
        }
        return out.sort();
    }
    function addLink(aliases) {
        var i, alias, normal0, normal1;
        if (typeof aliases === 'string') {
            aliases = [aliases];
        }
        for (i = 0; i < aliases.length; i++) {
            alias = aliases[i].split('|');
            normal0 = normalizeName(alias[0]);
            normal1 = normalizeName(alias[1]);
            links[normal0] = normal1;
            names[normal0] = alias[0];
            links[normal1] = normal0;
            names[normal1] = alias[1];
        }
    }
    function loadData(data) {
        addZone(data.zones);
        addLink(data.links);
        tz.dataVersion = data.version;
    }
    function zoneExists(name) {
        if (!zoneExists.didShowError) {
            zoneExists.didShowError = true;
            logError('moment.tz.zoneExists(\'' + name + '\') has been deprecated in favor of !moment.tz.zone(\'' + name + '\')');
        }
        return !!getZone(name);
    }
    function needsOffset(m) {
        var isUnixTimestamp = m._f === 'X' || m._f === 'x';
        return !!(m._a && m._tzm === undefined && !isUnixTimestamp);
    }
    function logError(message) {
        if (typeof console !== 'undefined' && typeof console.error === 'function') {
            console.error(message);
        }
    }
    function tz(input) {
        var args = Array.prototype.slice.call(arguments, 0, -1), name = arguments[arguments.length - 1], zone = getZone(name), out = moment.utc.apply(null, args);
        if (zone && !moment.isMoment(input) && needsOffset(out)) {
            out.add(zone.parse(out), 'minutes');
        }
        out.tz(name);
        return out;
    }
    tz.version = VERSION;
    tz.dataVersion = '';
    tz._zones = zones;
    tz._links = links;
    tz._names = names;
    tz.add = addZone;
    tz.link = addLink;
    tz.load = loadData;
    tz.zone = getZone;
    tz.zoneExists = zoneExists;
    tz.guess = guess;
    tz.names = getNames;
    tz.Zone = Zone;
    tz.unpack = unpack;
    tz.unpackBase60 = unpackBase60;
    tz.needsOffset = needsOffset;
    tz.moveInvalidForward = true;
    tz.moveAmbiguousForward = false;
    var fn = moment.fn;
    moment.tz = tz;
    moment.defaultZone = null;
    moment.updateOffset = function (mom, keepTime) {
        var zone = moment.defaultZone, offset;
        if (mom._z === undefined) {
            if (zone && needsOffset(mom) && !mom._isUTC) {
                mom._d = moment.utc(mom._a)._d;
                mom.utc().add(zone.parse(mom), 'minutes');
            }
            mom._z = zone;
        }
        if (mom._z) {
            offset = mom._z.utcOffset(mom);
            if (Math.abs(offset) < 16) {
                offset = offset / 60;
            }
            if (mom.utcOffset !== undefined) {
                mom.utcOffset(-offset, keepTime);
            } else {
                mom.zone(offset, keepTime);
            }
        }
    };
    fn.tz = function (name, keepTime) {
        if (name) {
            this._z = getZone(name);
            if (this._z) {
                moment.updateOffset(this, keepTime);
            } else {
                logError('Moment Timezone has no data for ' + name + '. See http://momentjs.com/timezone/docs/#/data-loading/.');
            }
            return this;
        }
        if (this._z) {
            return this._z.name;
        }
    };
    function abbrWrap(old) {
        return function () {
            if (this._z) {
                return this._z.abbr(this);
            }
            return old.call(this);
        };
    }
    function resetZoneWrap(old) {
        return function () {
            this._z = null;
            return old.apply(this, arguments);
        };
    }
    fn.zoneName = abbrWrap(fn.zoneName);
    fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
    fn.utc = resetZoneWrap(fn.utc);
    moment.tz.setDefault = function (name) {
        if (major < 2 || major === 2 && minor < 9) {
            logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
        }
        moment.defaultZone = name ? getZone(name) : null;
        return moment;
    };
    var momentProperties = moment.momentProperties;
    if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
        momentProperties.push('_z');
        momentProperties.push('_a');
    } else if (momentProperties) {
        momentProperties._z = null;
    }
    loadData({
        'version': '2017c',
        'zones': [
            'Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5',
            'Africa/Accra|LMT GMT +0020|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5',
            'Africa/Nairobi|LMT EAT +0230 +0245|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5',
            'Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5',
            'Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6',
            'Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldWV.E 2xonV.E|39e4',
            'Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5',
            'Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6',
            'Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|0121212121212121213121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|32e5',
            'Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3',
            'Africa/El_Aaiun|LMT -01 WET WEST|Q.M 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|20e4',
            'Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5',
            'Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|01212121212121212121212121212121213|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0',
            'Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5',
            'Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5',
            'Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5',
            'Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5',
            'Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5',
            'Africa/Windhoek|+0130 SAST SAST CAT WAT WAST|-1u -20 -30 -20 -10 -20|01213454545454545454545454545454545454545454545454543|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4',
            'America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326',
            'America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4',
            'America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3',
            'America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4',
            'America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0',
            'America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0',
            'America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0',
            'America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0',
            'America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0',
            'America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0',
            'America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0',
            'America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0',
            'America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0',
            'America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0',
            'America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0',
            'America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0',
            'America/Curacao|LMT -0430 AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4',
            'America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5',
            'America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2',
            'America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5',
            'America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3',
            'America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4',
            'America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5',
            'America/Belize|LMT CST -0530 CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3',
            'America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2',
            'America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2',
            'America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5',
            'America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4',
            'America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2',
            'America/Campo_Grande|LMT -04 -03|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|77e4',
            'America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4',
            'America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5',
            'America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3',
            'America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5',
            'America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5',
            'America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4',
            'America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5',
            'America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2',
            'America/Cuiaba|LMT -04 -03|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|54e4',
            'America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8',
            'America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|13e2',
            'America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3',
            'America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5',
            'America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|012342525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 XQp0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5',
            'America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5',
            'America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3',
            'America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5',
            'America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5',
            'America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2',
            'America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5',
            'America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3',
            'America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3',
            'America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2',
            'America/Grand_Turk|KMT EST EDT AST|57.b 50 40 40|01212121212121212121212121212121212121212121212121212121212121212121212121232121212121212121212121212121212121212121|-2l1uQ.N 2HHBQ.N 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2',
            'America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5',
            'America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5',
            'America/Guyana|LMT -0345 -03 -04|3Q.E 3J 30 40|0123|-2dvU7.k 2r6LQ.k Bxbf|80e4',
            'America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4',
            'America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5',
            'America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4',
            'America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2',
            'America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2',
            'America/Jamaica|KMT EST EDT|57.b 50 40|0121212121212121212121|-2l1uQ.N 2uM1Q.N 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4',
            'America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3',
            'America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/La_Paz|CMT BOST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5',
            'America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6',
            'America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6',
            'America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4',
            'America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5',
            'America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5',
            'America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4',
            'America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4',
            'America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4',
            'America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2',
            'America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5',
            'America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|0120303030303030303030303030303030454545454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2',
            'America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6',
            'America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2',
            'America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3',
            'America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5',
            'America/Montevideo|MMT -0330 -03 -02 -0230|3I.I 3u 30 20 2u|012121212121212121212121213232323232324242423243232323232323232323232323232323232323232|-20UIf.g 8jzJ.g 1cLu 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1qMu WLu 1qMu 11zu 1o0u 11zu NAu 11bu 2iMu zWu Dq10 19X0 pd0 jz0 cm10 19X0 1fB0 1on0 11d0 1oL0 1nB0 1fzu 1aou 1fzu 1aou 1fzu 3nAu Jb0 3MN0 1SLu 4jzu 2PB0 Lb0 3Dd0 1pb0 ixd0 An0 1MN0 An0 1wp0 On0 1wp0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5',
            'America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5',
            'America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4',
            'America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6',
            'America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2',
            'America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2',
            'America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2',
            'America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3',
            'America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2',
            'America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4',
            'America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5',
            'America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5',
            'America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4',
            'America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4',
            'America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5',
            'America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0',
            'America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842',
            'America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2',
            'America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5',
            'America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4',
            'America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229',
            'America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4',
            'America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|62e5',
            'America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5',
            'America/Sao_Paulo|LMT -03 -02|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|20e6',
            'America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452',
            'America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2',
            'America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4',
            'America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3',
            'America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5',
            'America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656',
            'America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4',
            'America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5',
            'America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3',
            'America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4',
            'America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642',
            'America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3',
            'Antarctica/Casey|-00 +08 +11|0 -80 -b0|0121212|-2q00 1DjS0 T90 40P0 KL0 blz0|10',
            'Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70',
            'Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80',
            'Antarctica/Macquarie|AEST AEDT -00 +11|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1',
            'Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60',
            'Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5',
            'Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40',
            'Antarctica/Rothera|-00 -03|0 30|01|gOo0|130',
            'Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20',
            'Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40',
            'Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25',
            'Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4',
            'Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5',
            'Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5',
            'Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5',
            'Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3',
            'Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4',
            'Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4',
            'Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4',
            'Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0',
            'Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5',
            'Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4',
            'Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5',
            'Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6',
            'Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0',
            'Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5',
            'Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4',
            'Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4',
            'Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6',
            'Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4',
            'Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3',
            'Asia/Shanghai|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6',
            'Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5',
            'Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6',
            'Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5',
            'Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4',
            'Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5',
            'Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4',
            'Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
            'Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101012323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0|18e5',
            'Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|01010101010101010101010101010101232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0|25e4',
            'Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5',
            'Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5',
            'Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3',
            'Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4',
            'Europe/Istanbul|IMT EET EEST +04 +03|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212124|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1de0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6',
            'Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6',
            'Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4',
            'Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4',
            'Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5',
            'Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4',
            'Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6',
            'Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5',
            'Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5',
            'Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2',
            'Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5',
            'Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5',
            'Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4',
            'Asia/Macau|LMT CST CDT|-7y.k -80 -90|012121212121212121212121212121212121212121|-2le7y.k 1XO34.k 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0|57e4',
            'Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3',
            'Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5',
            'Asia/Manila|+08 +09|-80 -90|010101010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6',
            'Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4',
            'Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4',
            'Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5',
            'Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5',
            'Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4',
            'Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4',
            'Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|01231|-2um8n 97XR 1lTzu 2Onc0|29e5',
            'Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|0123232323232323232323232323232323232323232323|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|73e4',
            'Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5',
            'Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4',
            'Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4',
            'Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -9u -a0|0123141414141414135353|-2um8r.Q 97XV.Q 1m1zu kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6',
            'Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2',
            'Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5',
            'Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5',
            'Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5',
            'Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6',
            'Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3',
            'Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJH0 QL0 1lB0 13X0 1zB0 NX0 1zB0 NX0|38e6',
            'Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5',
            'Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5',
            'Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2',
            'Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4',
            'Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4',
            'Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5',
            'Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5',
            'Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW5.s aPX5.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4',
            'Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3',
            'Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4',
            'Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2xomp.U 1qOMp.U 7zX0 1djf0|50e4',
            'Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3',
            'Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldWQ.o aPWQ.o Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4',
            'Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4',
            'Atlantic/South_Georgia|-02|20|0||30',
            'Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2',
            'Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5',
            'Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5',
            'Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5',
            'Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3',
            'Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746',
            'Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4',
            'Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368',
            'Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4',
            'Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347',
            'Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10',
            'Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5',
            'Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5',
            'CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
            'CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|30e2',
            'EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
            'EST|EST|50|0|',
            'EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
            'Etc/GMT+0|GMT|0|0|',
            'Etc/GMT+1|-01|10|0|',
            'Etc/GMT+10|-10|a0|0|',
            'Etc/GMT+11|-11|b0|0|',
            'Etc/GMT+12|-12|c0|0|',
            'Etc/GMT+3|-03|30|0|',
            'Etc/GMT+4|-04|40|0|',
            'Etc/GMT+5|-05|50|0|',
            'Etc/GMT+6|-06|60|0|',
            'Etc/GMT+7|-07|70|0|',
            'Etc/GMT+8|-08|80|0|',
            'Etc/GMT+9|-09|90|0|',
            'Etc/GMT-1|+01|-10|0|',
            'Pacific/Port_Moresby|+10|-a0|0||25e4',
            'Pacific/Pohnpei|+11|-b0|0||34e3',
            'Pacific/Tarawa|+12|-c0|0||29e3',
            'Etc/GMT-13|+13|-d0|0|',
            'Etc/GMT-14|+14|-e0|0|',
            'Etc/GMT-2|+02|-20|0|',
            'Etc/GMT-3|+03|-30|0|',
            'Etc/GMT-4|+04|-40|0|',
            'Etc/GMT-5|+05|-50|0|',
            'Etc/GMT-6|+06|-60|0|',
            'Indian/Christmas|+07|-70|0||21e2',
            'Etc/GMT-8|+08|-80|0|',
            'Pacific/Palau|+09|-90|0||21e3',
            'Etc/UCT|UCT|0|0|',
            'Etc/UTC|UTC|0|0|',
            'Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5',
            'Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3',
            'Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0',
            'Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5',
            'Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6',
            'Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
            'Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5',
            'Europe/Prague|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 16M0 1lc0 1tA0 17A0 11c0 1io0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5',
            'Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5',
            'Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5',
            'Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5',
            'Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4',
            'Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4',
            'Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
            'Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3',
            'Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
            'Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET +03|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454546767676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4',
            'Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5',
            'Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4',
            'Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ldXn.f aPWn.f Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5',
            'Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4',
            'Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5',
            'Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4',
            'Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5',
            'Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3',
            'Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6',
            'Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6',
            'Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4',
            'Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5',
            'Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5',
            'Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810',
            'Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4',
            'Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
            'Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5',
            'Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4',
            'Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4',
            'Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0',
            'Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4',
            'Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5',
            'Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4',
            'Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|01232323232323232121212121212121212121212121212121212121212121|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5',
            'Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5',
            'Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4',
            'HST|HST|a0|0|',
            'Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2',
            'Indian/Cocos|+0630|-6u|0||596',
            'Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130',
            'Indian/Mahe|LMT +04|-3F.M -40|01|-2yO3F.M|79e3',
            'Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4',
            'Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4',
            'Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4',
            'Pacific/Kwajalein|+11 -12 +12|-b0 c0 -c0|012|-AX0 W9X0|14e3',
            'MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
            'MST|MST|70|0|',
            'MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600',
            'PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
            'Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3',
            'Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4',
            'Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3',
            'Pacific/Enderbury|-12 -11 +13|c0 b0 -d0|012|nIc0 B8n0|1',
            'Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483',
            'Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0|88e4',
            'Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3',
            'Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125',
            'Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4',
            'Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0|17e4',
            'Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0|37e4',
            'Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B8nk|51e2',
            'Pacific/Kosrae|+11 +12|-b0 -c0|010|-AX0 1bdz0|66e2',
            'Pacific/Majuro|+11 +12|-b0 -c0|01|-AX0|28e3',
            'Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2',
            'Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2',
            'Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu|10e3',
            'Pacific/Niue|-1120 -1130 -11|bk bu b0|012|-KfME 17y0a|12e2',
            'Pacific/Norfolk|+1112 +1130 +1230 +11|-bc -bu -cu -b0|01213|-Kgbc W01G On0 1COp0|25e4',
            'Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3',
            'Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56',
            'Pacific/Rarotonga|-1030 -0930 -10|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3',
            'Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4',
            'Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3',
            'WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00'
        ],
        'links': [
            'Africa/Abidjan|Africa/Bamako',
            'Africa/Abidjan|Africa/Banjul',
            'Africa/Abidjan|Africa/Conakry',
            'Africa/Abidjan|Africa/Dakar',
            'Africa/Abidjan|Africa/Freetown',
            'Africa/Abidjan|Africa/Lome',
            'Africa/Abidjan|Africa/Nouakchott',
            'Africa/Abidjan|Africa/Ouagadougou',
            'Africa/Abidjan|Africa/Sao_Tome',
            'Africa/Abidjan|Africa/Timbuktu',
            'Africa/Abidjan|Atlantic/St_Helena',
            'Africa/Cairo|Egypt',
            'Africa/Johannesburg|Africa/Maseru',
            'Africa/Johannesburg|Africa/Mbabane',
            'Africa/Lagos|Africa/Bangui',
            'Africa/Lagos|Africa/Brazzaville',
            'Africa/Lagos|Africa/Douala',
            'Africa/Lagos|Africa/Kinshasa',
            'Africa/Lagos|Africa/Libreville',
            'Africa/Lagos|Africa/Luanda',
            'Africa/Lagos|Africa/Malabo',
            'Africa/Lagos|Africa/Niamey',
            'Africa/Lagos|Africa/Porto-Novo',
            'Africa/Maputo|Africa/Blantyre',
            'Africa/Maputo|Africa/Bujumbura',
            'Africa/Maputo|Africa/Gaborone',
            'Africa/Maputo|Africa/Harare',
            'Africa/Maputo|Africa/Kigali',
            'Africa/Maputo|Africa/Lubumbashi',
            'Africa/Maputo|Africa/Lusaka',
            'Africa/Nairobi|Africa/Addis_Ababa',
            'Africa/Nairobi|Africa/Asmara',
            'Africa/Nairobi|Africa/Asmera',
            'Africa/Nairobi|Africa/Dar_es_Salaam',
            'Africa/Nairobi|Africa/Djibouti',
            'Africa/Nairobi|Africa/Kampala',
            'Africa/Nairobi|Africa/Mogadishu',
            'Africa/Nairobi|Indian/Antananarivo',
            'Africa/Nairobi|Indian/Comoro',
            'Africa/Nairobi|Indian/Mayotte',
            'Africa/Tripoli|Libya',
            'America/Adak|America/Atka',
            'America/Adak|US/Aleutian',
            'America/Anchorage|US/Alaska',
            'America/Argentina/Buenos_Aires|America/Buenos_Aires',
            'America/Argentina/Catamarca|America/Argentina/ComodRivadavia',
            'America/Argentina/Catamarca|America/Catamarca',
            'America/Argentina/Cordoba|America/Cordoba',
            'America/Argentina/Cordoba|America/Rosario',
            'America/Argentina/Jujuy|America/Jujuy',
            'America/Argentina/Mendoza|America/Mendoza',
            'America/Atikokan|America/Coral_Harbour',
            'America/Chicago|US/Central',
            'America/Curacao|America/Aruba',
            'America/Curacao|America/Kralendijk',
            'America/Curacao|America/Lower_Princes',
            'America/Denver|America/Shiprock',
            'America/Denver|Navajo',
            'America/Denver|US/Mountain',
            'America/Detroit|US/Michigan',
            'America/Edmonton|Canada/Mountain',
            'America/Fort_Wayne|America/Indiana/Indianapolis',
            'America/Fort_Wayne|America/Indianapolis',
            'America/Fort_Wayne|US/East-Indiana',
            'America/Halifax|Canada/Atlantic',
            'America/Havana|Cuba',
            'America/Indiana/Knox|America/Knox_IN',
            'America/Indiana/Knox|US/Indiana-Starke',
            'America/Jamaica|Jamaica',
            'America/Kentucky/Louisville|America/Louisville',
            'America/Los_Angeles|US/Pacific',
            'America/Los_Angeles|US/Pacific-New',
            'America/Manaus|Brazil/West',
            'America/Mazatlan|Mexico/BajaSur',
            'America/Mexico_City|Mexico/General',
            'America/New_York|US/Eastern',
            'America/Noronha|Brazil/DeNoronha',
            'America/Panama|America/Cayman',
            'America/Phoenix|US/Arizona',
            'America/Port_of_Spain|America/Anguilla',
            'America/Port_of_Spain|America/Antigua',
            'America/Port_of_Spain|America/Dominica',
            'America/Port_of_Spain|America/Grenada',
            'America/Port_of_Spain|America/Guadeloupe',
            'America/Port_of_Spain|America/Marigot',
            'America/Port_of_Spain|America/Montserrat',
            'America/Port_of_Spain|America/St_Barthelemy',
            'America/Port_of_Spain|America/St_Kitts',
            'America/Port_of_Spain|America/St_Lucia',
            'America/Port_of_Spain|America/St_Thomas',
            'America/Port_of_Spain|America/St_Vincent',
            'America/Port_of_Spain|America/Tortola',
            'America/Port_of_Spain|America/Virgin',
            'America/Regina|Canada/Saskatchewan',
            'America/Rio_Branco|America/Porto_Acre',
            'America/Rio_Branco|Brazil/Acre',
            'America/Santiago|Chile/Continental',
            'America/Sao_Paulo|Brazil/East',
            'America/St_Johns|Canada/Newfoundland',
            'America/Tijuana|America/Ensenada',
            'America/Tijuana|America/Santa_Isabel',
            'America/Tijuana|Mexico/BajaNorte',
            'America/Toronto|America/Montreal',
            'America/Toronto|Canada/Eastern',
            'America/Vancouver|Canada/Pacific',
            'America/Whitehorse|Canada/Yukon',
            'America/Winnipeg|Canada/Central',
            'Asia/Ashgabat|Asia/Ashkhabad',
            'Asia/Bangkok|Asia/Phnom_Penh',
            'Asia/Bangkok|Asia/Vientiane',
            'Asia/Dhaka|Asia/Dacca',
            'Asia/Dubai|Asia/Muscat',
            'Asia/Ho_Chi_Minh|Asia/Saigon',
            'Asia/Hong_Kong|Hongkong',
            'Asia/Jerusalem|Asia/Tel_Aviv',
            'Asia/Jerusalem|Israel',
            'Asia/Kathmandu|Asia/Katmandu',
            'Asia/Kolkata|Asia/Calcutta',
            'Asia/Kuala_Lumpur|Asia/Singapore',
            'Asia/Kuala_Lumpur|Singapore',
            'Asia/Macau|Asia/Macao',
            'Asia/Makassar|Asia/Ujung_Pandang',
            'Asia/Nicosia|Europe/Nicosia',
            'Asia/Qatar|Asia/Bahrain',
            'Asia/Rangoon|Asia/Yangon',
            'Asia/Riyadh|Asia/Aden',
            'Asia/Riyadh|Asia/Kuwait',
            'Asia/Seoul|ROK',
            'Asia/Shanghai|Asia/Chongqing',
            'Asia/Shanghai|Asia/Chungking',
            'Asia/Shanghai|Asia/Harbin',
            'Asia/Shanghai|PRC',
            'Asia/Taipei|ROC',
            'Asia/Tehran|Iran',
            'Asia/Thimphu|Asia/Thimbu',
            'Asia/Tokyo|Japan',
            'Asia/Ulaanbaatar|Asia/Ulan_Bator',
            'Asia/Urumqi|Asia/Kashgar',
            'Atlantic/Faroe|Atlantic/Faeroe',
            'Atlantic/Reykjavik|Iceland',
            'Atlantic/South_Georgia|Etc/GMT+2',
            'Australia/Adelaide|Australia/South',
            'Australia/Brisbane|Australia/Queensland',
            'Australia/Broken_Hill|Australia/Yancowinna',
            'Australia/Darwin|Australia/North',
            'Australia/Hobart|Australia/Tasmania',
            'Australia/Lord_Howe|Australia/LHI',
            'Australia/Melbourne|Australia/Victoria',
            'Australia/Perth|Australia/West',
            'Australia/Sydney|Australia/ACT',
            'Australia/Sydney|Australia/Canberra',
            'Australia/Sydney|Australia/NSW',
            'Etc/GMT+0|Etc/GMT',
            'Etc/GMT+0|Etc/GMT-0',
            'Etc/GMT+0|Etc/GMT0',
            'Etc/GMT+0|Etc/Greenwich',
            'Etc/GMT+0|GMT',
            'Etc/GMT+0|GMT+0',
            'Etc/GMT+0|GMT-0',
            'Etc/GMT+0|GMT0',
            'Etc/GMT+0|Greenwich',
            'Etc/UCT|UCT',
            'Etc/UTC|Etc/Universal',
            'Etc/UTC|Etc/Zulu',
            'Etc/UTC|UTC',
            'Etc/UTC|Universal',
            'Etc/UTC|Zulu',
            'Europe/Belgrade|Europe/Ljubljana',
            'Europe/Belgrade|Europe/Podgorica',
            'Europe/Belgrade|Europe/Sarajevo',
            'Europe/Belgrade|Europe/Skopje',
            'Europe/Belgrade|Europe/Zagreb',
            'Europe/Chisinau|Europe/Tiraspol',
            'Europe/Dublin|Eire',
            'Europe/Helsinki|Europe/Mariehamn',
            'Europe/Istanbul|Asia/Istanbul',
            'Europe/Istanbul|Turkey',
            'Europe/Lisbon|Portugal',
            'Europe/London|Europe/Belfast',
            'Europe/London|Europe/Guernsey',
            'Europe/London|Europe/Isle_of_Man',
            'Europe/London|Europe/Jersey',
            'Europe/London|GB',
            'Europe/London|GB-Eire',
            'Europe/Moscow|W-SU',
            'Europe/Oslo|Arctic/Longyearbyen',
            'Europe/Oslo|Atlantic/Jan_Mayen',
            'Europe/Prague|Europe/Bratislava',
            'Europe/Rome|Europe/San_Marino',
            'Europe/Rome|Europe/Vatican',
            'Europe/Warsaw|Poland',
            'Europe/Zurich|Europe/Busingen',
            'Europe/Zurich|Europe/Vaduz',
            'Indian/Christmas|Etc/GMT-7',
            'Pacific/Auckland|Antarctica/McMurdo',
            'Pacific/Auckland|Antarctica/South_Pole',
            'Pacific/Auckland|NZ',
            'Pacific/Chatham|NZ-CHAT',
            'Pacific/Easter|Chile/EasterIsland',
            'Pacific/Guam|Pacific/Saipan',
            'Pacific/Honolulu|Pacific/Johnston',
            'Pacific/Honolulu|US/Hawaii',
            'Pacific/Kwajalein|Kwajalein',
            'Pacific/Pago_Pago|Pacific/Midway',
            'Pacific/Pago_Pago|Pacific/Samoa',
            'Pacific/Pago_Pago|US/Samoa',
            'Pacific/Palau|Etc/GMT-9',
            'Pacific/Pohnpei|Etc/GMT-11',
            'Pacific/Pohnpei|Pacific/Ponape',
            'Pacific/Port_Moresby|Etc/GMT-10',
            'Pacific/Port_Moresby|Pacific/Chuuk',
            'Pacific/Port_Moresby|Pacific/Truk',
            'Pacific/Port_Moresby|Pacific/Yap',
            'Pacific/Tarawa|Etc/GMT-12',
            'Pacific/Tarawa|Pacific/Funafuti',
            'Pacific/Tarawa|Pacific/Wake',
            'Pacific/Tarawa|Pacific/Wallis'
        ]
    });
    return moment;
}));
/*jquery*/
(function (global, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
                throw new Error('jQuery requires a window with a document');
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
    var arr = [];
    var document = window.document;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var support = {};
    var version = '2.2.4', jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context);
        }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) {
            return letter.toUpperCase();
        };
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        selector: '',
        length: 0,
        toArray: function () {
            return slice.call(this);
        },
        get: function (num) {
            return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function (callback) {
            return jQuery.each(this, callback);
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function () {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function () {
            return this.prevObject || this.constructor();
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        isReady: true,
        error: function (msg) {
            throw new Error(msg);
        },
        noop: function () {
        },
        isFunction: function (obj) {
            return jQuery.type(obj) === 'function';
        },
        isArray: Array.isArray,
        isWindow: function (obj) {
            return obj != null && obj === obj.window;
        },
        isNumeric: function (obj) {
            var realStringObj = obj && obj.toString();
            return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
        },
        isPlainObject: function (obj) {
            var key;
            if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            if (obj.constructor && !hasOwn.call(obj, 'constructor') && !hasOwn.call(obj.constructor.prototype || {}, 'isPrototypeOf')) {
                return false;
            }
            for (key in obj) {
            }
            return key === undefined || hasOwn.call(obj, key);
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        type: function (obj) {
            if (obj == null) {
                return obj + '';
            }
            return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
        },
        globalEval: function (code) {
            var script, indirect = eval;
            code = jQuery.trim(code);
            if (code) {
                if (code.indexOf('use strict') === 1) {
                    script = document.createElement('script');
                    script.text = code;
                    document.head.appendChild(script).parentNode.removeChild(script);
                } else {
                    indirect(code);
                }
            }
        },
        camelCase: function (string) {
            return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
        },
        nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function (obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }
            return obj;
        },
        trim: function (text) {
            return text == null ? '' : (text + '').replace(rtrim, '');
        },
        makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function (elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function (first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },
        grep: function (elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function (elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function (fn, context) {
            var tmp, args, proxy;
            if (typeof context === 'string') {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            args = slice.call(arguments, 2);
            proxy = function () {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        now: Date.now,
        support: support
    });
    if (typeof Symbol === 'function') {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }
    jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        var length = !!obj && 'length' in obj && obj.length, type = jQuery.type(obj);
        if (type === 'function' || jQuery.isWindow(obj)) {
            return false;
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
    }
    var Sizzle = function (window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = 'sizzle' + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                }
                return 0;
            }, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function (list, elem) {
                var i = 0, len = list.length;
                for (; i < len; i++) {
                    if (list[i] === elem) {
                        return i;
                    }
                }
                return -1;
            }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', whitespace = '[\\x20\\t\\r\\n\\f]', identifier = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+', attributes = '\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + identifier + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)', rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
                'ID': new RegExp('^#(' + identifier + ')'),
                'CLASS': new RegExp('^\\.(' + identifier + ')'),
                'TAG': new RegExp('^(' + identifier + '|[*])'),
                'ATTR': new RegExp('^' + attributes),
                'PSEUDO': new RegExp('^' + pseudos),
                'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
                'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
                'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
            }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
                var high = '0x' + escaped - 65536;
                return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
            }, unloadHandler = function () {
                setDocument();
            };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function (target, els) {
                    push_native.apply(target, slice.call(els));
                } : function (target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {
                    }
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, nidselect, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
            }
            if (!seed) {
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                }
                context = context || document;
                if (documentIsHTML) {
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        if (m = match[1]) {
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else {
                                    return results;
                                }
                            } else {
                                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    if (support.qsa && !compilerCache[selector + ' '] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                        if (nodeType !== 1) {
                            newContext = context;
                            newSelector = selector;
                        } else if (context.nodeName.toLowerCase() !== 'object') {
                            if (nid = context.getAttribute('id')) {
                                nid = nid.replace(rescape, '\\$&');
                            } else {
                                context.setAttribute('id', nid = expando);
                            }
                            groups = tokenize(selector);
                            i = groups.length;
                            nidselect = ridentifier.test(nid) ? '#' + nid : '[id=\'' + nid + '\']';
                            while (i--) {
                                groups[i] = nidselect + ' ' + toSelector(groups[i]);
                            }
                            newSelector = groups.join(',');
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        }
                        if (newSelector) {
                            try {
                                push.apply(results, newContext.querySelectorAll(newSelector));
                                return results;
                            } catch (qsaError) {
                            } finally {
                                if (nid === expando) {
                                    context.removeAttribute('id');
                                }
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, '$1'), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + ' ') > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + ' '] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement('div');
            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                if (div.parentNode) {
                    div.parentNode.removeChild(div);
                }
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split('|'), i = arr.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === 'input' && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === 'input' || name === 'button') && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== 'undefined' && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function (elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== 'HTML' : false;
        };
        setDocument = Sizzle.setDocument = function (node) {
            var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = document.documentElement;
            documentIsHTML = !isXML(document);
            if ((parent = document.defaultView) && parent.top !== parent) {
                if (parent.addEventListener) {
                    parent.addEventListener('unload', unloadHandler, false);
                } else if (parent.attachEvent) {
                    parent.attachEvent('onunload', unloadHandler);
                }
            }
            support.attributes = assert(function (div) {
                div.className = 'i';
                return !div.getAttribute('className');
            });
            support.getElementsByTagName = assert(function (div) {
                div.appendChild(document.createComment(''));
                return !div.getElementsByTagName('*').length;
            });
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            support.getById = assert(function (div) {
                docElem.appendChild(div).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m ? [m] : [];
                    }
                };
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute('id') === attrId;
                    };
                };
            } else {
                delete Expr.find['ID'];
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
                if (typeof context.getElementsByTagName !== 'undefined') {
                    return context.getElementsByTagName(tag);
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            } : function (tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === '*') {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                assert(function (div) {
                    docElem.appendChild(div).innerHTML = '<a id=\'' + expando + '\'></a>' + '<select id=\'' + expando + '-\r\\\' msallowcapture=\'\'>' + '<option selected=\'\'></option></select>';
                    if (div.querySelectorAll('[msallowcapture^=\'\']').length) {
                        rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
                    }
                    if (!div.querySelectorAll('[selected]').length) {
                        rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
                    }
                    if (!div.querySelectorAll('[id~=' + expando + '-]').length) {
                        rbuggyQSA.push('~=');
                    }
                    if (!div.querySelectorAll(':checked').length) {
                        rbuggyQSA.push(':checked');
                    }
                    if (!div.querySelectorAll('a#' + expando + '+*').length) {
                        rbuggyQSA.push('.#.+[+~]');
                    }
                });
                assert(function (div) {
                    var input = document.createElement('input');
                    input.setAttribute('type', 'hidden');
                    div.appendChild(input).setAttribute('name', 'D');
                    if (div.querySelectorAll('[name=d]').length) {
                        rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
                    }
                    if (!div.querySelectorAll(':enabled').length) {
                        rbuggyQSA.push(':enabled', ':disabled');
                    }
                    div.querySelectorAll('*,:x');
                    rbuggyQSA.push(',.*:');
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function (div) {
                    support.disconnectedMatch = matches.call(div, 'div');
                    matches.call(div, '[s!=\'\']:x');
                    rbuggyMatches.push('!=', pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function (a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                if (!aup || !bup) {
                    return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return document;
        };
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, '=\'$1\']');
            if (support.matchesSelector && documentIsHTML && !compilerCache[expr + ' '] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {
                }
            }
            return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function (msg) {
            throw new Error('Syntax error, unrecognized expression: ' + msg);
        };
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function (elem) {
            var node, ret = '', i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === 'string') {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                '>': {
                    dir: 'parentNode',
                    first: true
                },
                ' ': { dir: 'parentNode' },
                '+': {
                    dir: 'previousSibling',
                    first: true
                },
                '~': { dir: 'previousSibling' }
            },
            preFilter: {
                'ATTR': function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
                    if (match[2] === '~=') {
                        match[3] = ' ' + match[3] + ' ';
                    }
                    return match.slice(0, 4);
                },
                'CHILD': function (match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === 'nth') {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                        match[5] = +(match[7] + match[8] || match[3] === 'odd');
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                'PSEUDO': function (match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr['CHILD'].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || '';
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                'TAG': function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === '*' ? function () {
                        return true;
                    } : function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                'CLASS': function (className) {
                    var pattern = classCache[className + ' '];
                    return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                        return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '');
                    });
                },
                'ATTR': function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === '!=';
                        }
                        if (!operator) {
                            return true;
                        }
                        result += '';
                        return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
                    };
                },
                'CHILD': function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
                    return first === 1 && last === 0 ? function (elem) {
                        return !!elem.parentNode;
                    } : function (elem, context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === 'only' && !start && 'nextSibling';
                                }
                                return true;
                            }
                            start = [forward ? parent.firstChild : parent.lastChild];
                            if (forward && useCache) {
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        uniqueCache[type] = [
                                            dirruns,
                                            nodeIndex,
                                            diff
                                        ];
                                        break;
                                    }
                                }
                            } else {
                                if (useCache) {
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {});
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                if (diff === false) {
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                outerCache = node[expando] || (node[expando] = {});
                                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                                uniqueCache[type] = [
                                                    dirruns,
                                                    diff
                                                ];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                'PSEUDO': function (pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [
                            pseudo,
                            pseudo,
                            '',
                            argument
                        ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function (elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                'not': markFunction(function (selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                'has': markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                'contains': markFunction(function (text) {
                    text = text.replace(runescape, funescape);
                    return function (elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                'lang': markFunction(function (lang) {
                    if (!ridentifier.test(lang || '')) {
                        Sizzle.error('unsupported lang: ' + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                'target': function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                'root': function (elem) {
                    return elem === docElem;
                },
                'focus': function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                'enabled': function (elem) {
                    return elem.disabled === false;
                },
                'disabled': function (elem) {
                    return elem.disabled === true;
                },
                'checked': function (elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
                },
                'selected': function (elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                'empty': function (elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                'parent': function (elem) {
                    return !Expr.pseudos['empty'](elem);
                },
                'header': function (elem) {
                    return rheader.test(elem.nodeName);
                },
                'input': function (elem) {
                    return rinputs.test(elem.nodeName);
                },
                'button': function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === 'input' && elem.type === 'button' || name === 'button';
                },
                'text': function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
                },
                'first': createPositionalPseudo(function () {
                    return [0];
                }),
                'last': createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1];
                }),
                'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),
                'even': createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'odd': createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
            }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
                submit: true,
                reset: true
            }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, ' ')
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = '';
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            } : function (elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [
                        dirruns,
                        doneName
                    ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                            if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                uniqueCache[dir] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (; i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                    return elem === checkContext;
                }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                    return indexOf(checkContext, elem) > -1;
                }, implicitRelative, true), matchers = [function (elem, context, xml) {
                        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                        checkContext = null;
                        return ret;
                    }];
            for (; i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
                    var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                    if (outermost) {
                        outermostContext = context === document || context || outermost;
                    }
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            if (!context && elem.ownerDocument !== document) {
                                setDocument(elem);
                                xml = !documentIsHTML;
                            }
                            while (matcher = elementMatchers[j++]) {
                                if (matcher(elem, context || document, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                            }
                        }
                        if (bySet) {
                            if (elem = !matcher && elem) {
                                matchedCount--;
                            }
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while (matcher = setMatchers[j++]) {
                            matcher(unmatched, setMatched, context, xml);
                        }
                        if (seed) {
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }
                            setMatched = condense(setMatched);
                        }
                        push.apply(results, setMatched);
                        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                            Sizzle.uniqueSort(results);
                        }
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }
                    return unmatched;
                };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function (selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function (selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function (div1) {
            return div1.compareDocumentPosition(document.createElement('div')) & 1;
        });
        if (!assert(function (div) {
                div.innerHTML = '<a href=\'#\'></a>';
                return div.firstChild.getAttribute('href') === '#';
            })) {
            addHandle('type|href|height|width', function (elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function (div) {
                div.innerHTML = '<input/>';
                div.firstChild.setAttribute('value', '');
                return div.firstChild.getAttribute('value') === '';
            })) {
            addHandle('value', function (elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === 'input') {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function (div) {
                return div.getAttribute('disabled') == null;
            })) {
            addHandle(booleans, function (elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[':'] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var dir = function (elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };
    var siblings = function (n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
    var risSimple = /^.[^:#\[\.,]*$/;
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier === 'string') {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function (elem) {
            return indexOf.call(qualifier, elem) > -1 !== not;
        });
    }
    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ':not(' + expr + ')';
        }
        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function (selector) {
            var i, len = this.length, ret = [], self = this;
            if (typeof selector !== 'string') {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + ' ' + selector : selector;
            return ret;
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function (selector) {
            return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context, root) {
            var match, elem;
            if (!selector) {
                return this;
            }
            root = root || rootjQuery;
            if (typeof selector === 'string') {
                if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
                    match = [
                        null,
                        selector,
                        null
                    ];
                } else {
                    match = rquickExpr.exec(selector);
                }
                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem && elem.parentNode) {
                            this.length = 1;
                            this[0] = elem;
                        }
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
                } else if (!context || context.jquery) {
                    return (context || root).find(selector);
                } else {
                    return this.constructor(context).find(selector);
                }
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
            } else if (jQuery.isFunction(selector)) {
                return root.ready !== undefined ? root.ready(selector) : selector(jQuery);
            }
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
            return jQuery.makeArray(selector, this);
        };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    jQuery.fn.extend({
        has: function (target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function () {
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function (selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
            for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                        matched.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function (elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === 'string') {
                return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function (selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur;
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
            return dir(elem, 'parentNode');
        },
        parentsUntil: function (elem, i, until) {
            return dir(elem, 'parentNode', until);
        },
        next: function (elem) {
            return sibling(elem, 'nextSibling');
        },
        prev: function (elem) {
            return sibling(elem, 'previousSibling');
        },
        nextAll: function (elem) {
            return dir(elem, 'nextSibling');
        },
        prevAll: function (elem) {
            return dir(elem, 'previousSibling');
        },
        nextUntil: function (elem, i, until) {
            return dir(elem, 'nextSibling', until);
        },
        prevUntil: function (elem, i, until) {
            return dir(elem, 'previousSibling', until);
        },
        siblings: function (elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return siblings(elem.firstChild);
        },
        contents: function (elem) {
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== 'Until') {
                selector = until;
            }
            if (selector && typeof selector === 'string') {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }
            return this.pushStack(matched);
        };
    });
    var rnotwhite = /\S+/g;
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function (options) {
        options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function () {
                locked = options.once;
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {
                        if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }
                if (!options.memory) {
                    memory = false;
                }
                firing = false;
                if (locked) {
                    if (memory) {
                        list = [];
                    } else {
                        list = '';
                    }
                }
            }, self = {
                add: function () {
                    if (list) {
                        if (memory && !firing) {
                            firingIndex = list.length - 1;
                            queue.push(memory);
                        }
                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                if (jQuery.isFunction(arg)) {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && jQuery.type(arg) !== 'string') {
                                    add(arg);
                                }
                            });
                        }(arguments));
                        if (memory && !firing) {
                            fire();
                        }
                    }
                    return this;
                },
                remove: function () {
                    jQuery.each(arguments, function (_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    });
                    return this;
                },
                has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                },
                empty: function () {
                    if (list) {
                        list = [];
                    }
                    return this;
                },
                disable: function () {
                    locked = queue = [];
                    list = memory = '';
                    return this;
                },
                disabled: function () {
                    return !list;
                },
                lock: function () {
                    locked = queue = [];
                    if (!memory) {
                        list = memory = '';
                    }
                    return this;
                },
                locked: function () {
                    return !!locked;
                },
                fireWith: function (context, args) {
                    if (!locked) {
                        args = args || [];
                        args = [
                            context,
                            args.slice ? args.slice() : args
                        ];
                        queue.push(args);
                        if (!firing) {
                            fire();
                        }
                    }
                    return this;
                },
                fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function () {
                    return !!fired;
                }
            };
        return self;
    };
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [
                    [
                        'resolve',
                        'done',
                        jQuery.Callbacks('once memory'),
                        'resolved'
                    ],
                    [
                        'reject',
                        'fail',
                        jQuery.Callbacks('once memory'),
                        'rejected'
                    ],
                    [
                        'notify',
                        'progress',
                        jQuery.Callbacks('memory')
                    ]
                ], state = 'pending', promise = {
                    state: function () {
                        return state;
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function () {
                        var fns = arguments;
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var fn = jQuery.isFunction(fns[i]) && fns[i];
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                    } else {
                                        newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function () {
                        state = stateString;
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + 'With'] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function (subordinate) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) {
                    return function (value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);
                        } else if (!--remaining) {
                            deferred.resolveWith(contexts, values);
                        }
                    };
                }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject);
                    } else {
                        --remaining;
                    }
                }
            }
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
        }
    });
    var readyList;
    jQuery.fn.ready = function (fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        holdReady: function (hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [jQuery]);
            if (jQuery.fn.triggerHandler) {
                jQuery(document).triggerHandler('ready');
                jQuery(document).off('ready');
            }
        }
    });
    function completed() {
        document.removeEventListener('DOMContentLoaded', completed);
        window.removeEventListener('load', completed);
        jQuery.ready();
    }
    jQuery.ready.promise = function (obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
                window.setTimeout(jQuery.ready);
            } else {
                document.addEventListener('DOMContentLoaded', completed);
                window.addEventListener('load', completed);
            }
        }
        return readyList.promise(obj);
    };
    jQuery.ready.promise();
    var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (jQuery.type(key) === 'object') {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!jQuery.isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function (elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (; i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
    };
    var acceptData = function (owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        register: function (owner, initial) {
            var value = initial || {};
            if (owner.nodeType) {
                owner[this.expando] = value;
            } else {
                Object.defineProperty(owner, this.expando, {
                    value: value,
                    writable: true,
                    configurable: true
                });
            }
            return owner[this.expando];
        },
        cache: function (owner) {
            if (!acceptData(owner)) {
                return {};
            }
            var value = owner[this.expando];
            if (!value) {
                value = {};
                if (acceptData(owner)) {
                    if (owner.nodeType) {
                        owner[this.expando] = value;
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }
            return value;
        },
        set: function (owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === 'string') {
                cache[data] = value;
            } else {
                for (prop in data) {
                    cache[prop] = data[prop];
                }
            }
            return cache;
        },
        get: function (owner, key) {
            return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][key];
        },
        access: function (owner, key, value) {
            var stored;
            if (key === undefined || key && typeof key === 'string' && value === undefined) {
                stored = this.get(owner, key);
                return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
            var i, name, camel, cache = owner[this.expando];
            if (cache === undefined) {
                return;
            }
            if (key === undefined) {
                this.register(owner);
            } else {
                if (jQuery.isArray(key)) {
                    name = key.concat(key.map(jQuery.camelCase));
                } else {
                    camel = jQuery.camelCase(key);
                    if (key in cache) {
                        name = [
                            key,
                            camel
                        ];
                    } else {
                        name = camel;
                        name = name in cache ? [name] : name.match(rnotwhite) || [];
                    }
                }
                i = name.length;
                while (i--) {
                    delete cache[name[i]];
                }
            }
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function (owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === 'string') {
                try {
                    data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {
                }
                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function (elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function (elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function (elem, name) {
            dataUser.remove(elem, name);
        },
        _data: function (elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf('data-') === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, 'hasDataAttrs', true);
                    }
                }
                return data;
            }
            if (typeof key === 'object') {
                return this.each(function () {
                    dataUser.set(this, key);
                });
            }
            return access(this, function (value) {
                var data, camelKey;
                if (elem && value === undefined) {
                    data = dataUser.get(elem, key) || dataUser.get(elem, key.replace(rmultiDash, '-$&').toLowerCase());
                    if (data !== undefined) {
                        return data;
                    }
                    camelKey = jQuery.camelCase(key);
                    data = dataUser.get(elem, camelKey);
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, camelKey, undefined);
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                camelKey = jQuery.camelCase(key);
                this.each(function () {
                    var data = dataUser.get(this, camelKey);
                    dataUser.set(this, camelKey, value);
                    if (key.indexOf('-') > -1 && data !== undefined) {
                        dataUser.set(this, key, value);
                    }
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
            return this.each(function () {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || 'fx') + 'queue';
                queue = dataPriv.get(elem, type);
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function (elem, type) {
            type = type || 'fx';
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                    jQuery.dequeue(elem, type);
                };
            if (fn === 'inprogress') {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === 'fx') {
                    queue.unshift('inprogress');
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function (elem, type) {
            var key = type + 'queueHooks';
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks('once memory').add(function () {
                    dataPriv.remove(elem, [
                        type + 'queue',
                        key
                    ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== 'string') {
                data = type;
                type = 'fx';
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === 'fx' && queue[0] !== 'inprogress') {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function (type) {
            return this.queue(type || 'fx', []);
        },
        promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                    if (!--count) {
                        defer.resolveWith(elements, [elements]);
                    }
                };
            if (typeof type !== 'string') {
                obj = type;
                type = undefined;
            }
            type = type || 'fx';
            while (i--) {
                tmp = dataPriv.get(elements[i], type + 'queueHooks');
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');
    var cssExpand = [
        'Top',
        'Right',
        'Bottom',
        'Left'
    ];
    var isHidden = function (elem, el) {
        elem = el || elem;
        return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale = 1, maxIterations = 20, currentValue = tween ? function () {
                return tween.cur();
            } : function () {
                return jQuery.css(elem, prop, '');
            }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px'), initialInUnit = (jQuery.cssNumber[prop] || unit !== 'px' && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            unit = unit || initialInUnit[3];
            valueParts = valueParts || [];
            initialInUnit = +initial || 1;
            do {
                scale = scale || '.5';
                initialInUnit = initialInUnit / scale;
                jQuery.style(elem, prop, initialInUnit + unit);
            } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([\w:-]+)/;
    var rscriptType = /^$|\/(?:java|ecma)script/i;
    var wrapMap = {
        option: [
            1,
            '<select multiple=\'multiple\'>',
            '</select>'
        ],
        thead: [
            1,
            '<table>',
            '</table>'
        ],
        col: [
            2,
            '<table><colgroup>',
            '</colgroup></table>'
        ],
        tr: [
            2,
            '<table><tbody>',
            '</tbody></table>'
        ],
        td: [
            3,
            '<table><tbody><tr>',
            '</tr></tbody></table>'
        ],
        _default: [
            0,
            '',
            ''
        ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var ret = typeof context.getElementsByTagName !== 'undefined' ? context.getElementsByTagName(tag || '*') : typeof context.querySelectorAll !== 'undefined' ? context.querySelectorAll(tag || '*') : [];
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
    }
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
            dataPriv.set(elems[i], 'globalEval', !refElements || dataPriv.get(refElements[i], 'globalEval'));
        }
    }
    var rhtml = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
                if (jQuery.type(elem) === 'object') {
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement('div'));
                    tag = (rtagName.exec(elem) || [
                        '',
                        ''
                    ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp = fragment.firstChild;
                    tmp.textContent = '';
                }
            }
        }
        fragment.textContent = '';
        i = 0;
        while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }
                continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem);
            tmp = getAll(fragment.appendChild(elem), 'script');
            if (contains) {
                setGlobalEval(tmp);
            }
            if (scripts) {
                j = 0;
                while (elem = tmp[j++]) {
                    if (rscriptType.test(elem.type || '')) {
                        scripts.push(elem);
                    }
                }
            }
        }
        return fragment;
    }
    (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    }());
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {
        }
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === 'object') {
            if (typeof selector !== 'string') {
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }
        if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === 'string') {
                fn = data;
                data = undefined;
            } else {
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }
        if (one === 1) {
            origFn = fn;
            fn = function (event) {
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function () {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }
            types = (types || '').match(rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join('.')
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || '').match(rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, 'handle events');
            }
        },
        dispatch: function (event) {
            event = jQuery.event.fix(event);
            var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (dataPriv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function (event, handlers) {
            var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (event.type !== 'click' || isNaN(event.button) || event.button < 1)) {
                for (; cur !== this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== 'click')) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + ' ';
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        props: ('altKey bubbles cancelable ctrlKey currentTarget detail eventPhase ' + 'metaKey relatedTarget shiftKey target timeStamp view which').split(' '),
        fixHooks: {},
        keyHooks: {
            props: 'char charCode key keyCode'.split(' '),
            filter: function (event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }
        },
        mouseHooks: {
            props: ('button buttons clientX clientY offsetX offsetY pageX pageY ' + 'screenX screenY toElement').split(' '),
            filter: function (event, original) {
                var eventDoc, doc, body, button = original.button;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.which && button !== undefined) {
                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                }
                return event;
            }
        },
        fix: function (event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) {
                event.target = document;
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        special: {
            load: { noBubble: true },
            focus: {
                trigger: function () {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: 'focusin'
            },
            blur: {
                trigger: function () {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: 'focusout'
            },
            click: {
                trigger: function () {
                    if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
                        this.click();
                        return false;
                    }
                },
                _default: function (event) {
                    return jQuery.nodeName(event.target, 'a');
                }
            },
            beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };
    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function () {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === 'object') {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === 'function') {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
    }
    function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute('type');
        }
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === 'input' || nodeName === 'textarea') {
            dest.defaultValue = src.defaultValue;
        }
    }
    function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
        if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
            return collection.each(function (index) {
                var self = collection.eq(index);
                if (isFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
                fragment = first;
            }
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
                hasScripts = scripts.length;
                for (; i < l; i++) {
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        if (hasScripts) {
                            jQuery.merge(scripts, getAll(node, 'script'));
                        }
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    jQuery.map(scripts, restoreScript);
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || '') && !dataPriv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                            if (node.src) {
                                if (jQuery._evalUrl) {
                                    jQuery._evalUrl(node.src);
                                }
                            } else {
                                jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                            }
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) {
                    setGlobalEval(getAll(node, 'script'));
                }
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function (html) {
            return html.replace(rxhtmlTag, '<$1></$2>');
        },
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, 'script');
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
            }
            return clone;
        },
        cleanData: function (elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for (; (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if (data = elem[dataPriv.expando]) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        domManip: domManip,
        detach: function (selector) {
            return remove(this, selector, true);
        },
        remove: function (selector) {
            return remove(this, selector);
        },
        text: function (value) {
            return access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function () {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent = '';
                }
            }
            return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function (value) {
            return access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }
                if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                        '',
                        ''
                    ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function () {
            var ignored = [];
            return domManip(this, arguments, function (elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, elemdisplay = {
            HTML: 'block',
            BODY: 'block'
        };
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], 'display');
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === 'none' || !display) {
                iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(doc.documentElement);
                doc = iframe[0].contentDocument;
                doc.write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    var rmargin = /^margin/;
    var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
    var getStyles = function (elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
            view = window;
        }
        return view.getComputedStyle(elem);
    };
    var swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    var documentElement = document.documentElement;
    (function () {
        var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal, container = document.createElement('div'), div = document.createElement('div');
        if (!div.style) {
            return;
        }
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        container.style.cssText = 'border:0;width:8px;height:0;top:0;left:-9999px;' + 'padding:0;margin-top:1px;position:absolute';
        container.appendChild(div);
        function computeStyleTests() {
            div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;' + 'position:relative;display:block;' + 'margin:auto;border:1px;padding:1px;' + 'top:1%;width:50%';
            div.innerHTML = '';
            documentElement.appendChild(container);
            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== '1%';
            reliableMarginLeftVal = divStyle.marginLeft === '2px';
            boxSizingReliableVal = divStyle.width === '4px';
            div.style.marginRight = '50%';
            pixelMarginRightVal = divStyle.marginRight === '4px';
            documentElement.removeChild(container);
        }
        jQuery.extend(support, {
            pixelPosition: function () {
                computeStyleTests();
                return pixelPositionVal;
            },
            boxSizingReliable: function () {
                if (boxSizingReliableVal == null) {
                    computeStyleTests();
                }
                return boxSizingReliableVal;
            },
            pixelMarginRight: function () {
                if (boxSizingReliableVal == null) {
                    computeStyleTests();
                }
                return pixelMarginRightVal;
            },
            reliableMarginLeft: function () {
                if (boxSizingReliableVal == null) {
                    computeStyleTests();
                }
                return reliableMarginLeftVal;
            },
            reliableMarginRight: function () {
                var ret, marginDiv = div.appendChild(document.createElement('div'));
                marginDiv.style.cssText = div.style.cssText = '-webkit-box-sizing:content-box;box-sizing:content-box;' + 'display:block;margin:0;border:0;padding:0';
                marginDiv.style.marginRight = marginDiv.style.width = '0';
                div.style.width = '1px';
                documentElement.appendChild(container);
                ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);
                documentElement.removeChild(container);
                div.removeChild(marginDiv);
                return ret;
            }
        });
    }());
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;
        if ((ret === '' || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
            ret = jQuery.style(elem, name);
        }
        if (computed) {
            if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? ret + '' : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function () {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
        }, cssNormalTransform = {
            letterSpacing: '0',
            fontWeight: '400'
        }, cssPrefixes = [
            'Webkit',
            'O',
            'Moz',
            'ms'
        ], emptyStyle = document.createElement('div').style;
    function vendorPropName(name) {
        if (name in emptyStyle) {
            return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px') : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
        for (; i < 4; i += 2) {
            if (extra === 'margin') {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if (extra === 'content') {
                    val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                }
                if (extra !== 'margin') {
                    val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            } else {
                val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                if (extra !== 'padding') {
                    val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            if (rnumnonpx.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = dataPriv.get(elem, 'olddisplay');
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === 'none') {
                    elem.style.display = '';
                }
                if (elem.style.display === '' && isHidden(elem)) {
                    values[index] = dataPriv.access(elem, 'olddisplay', defaultDisplay(elem.nodeName));
                }
            } else {
                hidden = isHidden(elem);
                if (display !== 'none' || !hidden) {
                    dataPriv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === 'none' || elem.style.display === '') {
                elem.style.display = show ? values[index] || '' : 'none';
            }
        }
        return elements;
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, 'opacity');
                        return ret === '' ? '1' : ret;
                    }
                }
            }
        },
        cssNumber: {
            'animationIterationCount': true,
            'columnCount': true,
            'fillOpacity': true,
            'flexGrow': true,
            'flexShrink': true,
            'fontWeight': true,
            'lineHeight': true,
            'opacity': true,
            'order': true,
            'orphans': true,
            'widows': true,
            'zIndex': true,
            'zoom': true
        },
        cssProps: { 'float': 'cssFloat' },
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    type = 'number';
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === 'number') {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px');
                }
                if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
                    style[name] = 'inherit';
                }
                if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    style[name] = value;
                }
            } else {
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function (elem, name, extra, styles) {
            var val, num, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && 'get' in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === 'normal' && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === '' || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([
        'height',
        'width'
    ], function (i, name) {
        jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, 'display')) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            set: function (elem, value, extra) {
                var matches, styles = extra && getStyles(elem), subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles);
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
                    elem.style[name] = value;
                    value = jQuery.css(elem, name);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
            return (parseFloat(curCSS(elem, 'marginLeft')) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
                return elem.getBoundingClientRect().left;
            })) + 'px';
        }
    });
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
        if (computed) {
            return swap(elem, { 'display': 'inline-block' }, curCSS, [
                elem,
                'marginRight'
            ]);
        }
    });
    jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function (name, value) {
            return access(this, function (elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            if (typeof state === 'boolean') {
                return state ? this.show() : this.hide();
            }
            return this.each(function () {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, '');
                return !result || result === 'auto' ? 0 : result;
            },
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: 'swing'
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function createFxNow() {
        window.setTimeout(function () {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs['margin' + which] = attrs['padding' + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = dataPriv.get(elem, 'fxshow');
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, 'fx');
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, 'fx').length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            display = jQuery.css(elem, 'display');
            checkDisplay = display === 'none' ? dataPriv.get(elem, 'olddisplay') || defaultDisplay(elem.nodeName) : display;
            if (checkDisplay === 'inline' && jQuery.css(elem, 'float') === 'none') {
                style.display = 'inline-block';
            }
        }
        if (opts.overflow) {
            style.overflow = 'hidden';
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === 'toggle';
                if (value === (hidden ? 'hide' : 'show')) {
                    if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else {
                display = undefined;
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ('hidden' in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = dataPriv.access(elem, 'fxshow', {});
            }
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function () {
                    jQuery(elem).hide();
                });
            }
            anim.done(function () {
                var prop;
                dataPriv.remove(elem, 'fxshow');
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
                    }
                }
            }
        } else if ((display === 'none' ? defaultDisplay(elem.nodeName) : display) === 'inline') {
            style.display = display;
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && 'expand' in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () {
                delete tick.elem;
            }), tick = function () {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [
                    animation,
                    percent,
                    remaining
                ]);
                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [animation]);
                    return false;
                }
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function (gotoEnd) {
                    var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.notifyWith(elem, [
                            animation,
                            1,
                            0
                        ]);
                        deferred.resolveWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    } else {
                        deferred.rejectWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    }
                    return this;
                }
            }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (jQuery.isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
                }
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            '*': [function (prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                }]
        },
        tweener: function (props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ['*'];
            } else {
                props = props.match(rnotwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [defaultPrefilter],
        prefilter: function (callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
            opt.queue = 'fx';
        }
        opt.old = opt.complete;
        opt.complete = function () {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    if (empty || dataPriv.get(this, 'finish')) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== 'string') {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || 'fx', []);
            }
            return this.each(function () {
                var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || 'fx';
            }
            return this.each(function () {
                var index, data = dataPriv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([
        'toggle',
        'show',
        'hide'
    ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (!timerId) {
            timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function () {
        window.clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function () {
                window.clearTimeout(timeout);
            };
        });
    };
    (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        support.checkOn = input.value !== '';
        support.optSelected = opt.selected;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't';
    }());
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === 'undefined') {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                elem.setAttribute(name, value + '');
                return value;
            }
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                        var val = elem.value;
                        elem.setAttribute('type', value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        removeAttr: function (elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) {
                        elem[propName] = false;
                    }
                    elem.removeAttribute(name);
                }
            }
        }
    });
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function (name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                return elem[name] = value;
            }
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function (elem) {
                    var tabindex = jQuery.find.attr(elem, 'tabindex');
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        },
        propFix: {
            'for': 'htmlFor',
            'class': 'className'
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function (elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }
    jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
    ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    var rclass = /[\t\r\n\f]/g;
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute('class') || '';
    }
    jQuery.fn.extend({
        addClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }
            if (typeof value === 'string' && value) {
                classes = value.match(rnotwhite) || [];
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && (' ' + curValue + ' ').replace(rclass, ' ');
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(' ' + clazz + ' ') < 0) {
                                cur += clazz + ' ';
                            }
                        }
                        finalValue = jQuery.trim(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute('class', finalValue);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }
            if (!arguments.length) {
                return this.attr('class', '');
            }
            if (typeof value === 'string' && value) {
                classes = value.match(rnotwhite) || [];
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && (' ' + curValue + ' ').replace(rclass, ' ');
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(' ' + clazz + ' ') > -1) {
                                cur = cur.replace(' ' + clazz + ' ', ' ');
                            }
                        }
                        finalValue = jQuery.trim(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute('class', finalValue);
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === 'boolean' && type === 'string') {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
                });
            }
            return this.each(function () {
                var className, i, self, classNames;
                if (type === 'string') {
                    i = 0;
                    self = jQuery(this);
                    classNames = value.match(rnotwhite) || [];
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (value === undefined || type === 'boolean') {
                    className = getClass(this);
                    if (className) {
                        dataPriv.set(this, '__className__', className);
                    }
                    if (this.setAttribute) {
                        this.setAttribute('class', className || value === false ? '' : dataPriv.get(this, '__className__') || '');
                    }
                }
            });
        },
        hasClass: function (selector) {
            var className, elem, i = 0;
            className = ' ' + selector + ' ';
            while (elem = this[i++]) {
                if (elem.nodeType === 1 && (' ' + getClass(elem) + ' ').replace(rclass, ' ').indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
        }
    });
    var rreturn = /\r/g, rspaces = /[\x20\t\r\n\f]+/g;
    jQuery.fn.extend({
        val: function (value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = '';
                } else if (typeof val === 'number') {
                    val += '';
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? '' : value + '';
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    var val = jQuery.find.attr(elem, 'value');
                    return val != null ? val : jQuery.trim(jQuery.text(elem)).replace(rspaces, ' ');
                }
            },
            select: {
                get: function (elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function (elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                            optionSet = true;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    jQuery.each([
        'radio',
        'checkbox'
    ], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (jQuery.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute('value') === null ? 'on' : elem.value;
            };
        }
    });
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
    jQuery.extend(jQuery.event, {
        trigger: function (event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf('.') > -1) {
                namespaces = type.split('.');
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join('.');
            event.rnamespace = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (dataPriv.get(cur, 'events') || {})[event.type] && dataPriv.get(cur, 'handle');
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        simulate: function (type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    support.focusin = 'onfocusin' in window;
    if (!support.focusin) {
        jQuery.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function (orig, fix) {
            var handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
                setup: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    var location = window.location;
    var nonce = jQuery.now();
    var rquery = /\?/;
    jQuery.parseJSON = function (data) {
        return JSON.parse(data + '');
    };
    jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== 'string') {
            return null;
        }
        try {
            xml = new window.DOMParser().parseFromString(data, 'text/xml');
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
            jQuery.error('Invalid XML: ' + data);
        }
        return xml;
    };
    var rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = '*/'.concat('*'), originAnchor = document.createElement('a');
    originAnchor.href = location.href;
    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== 'string') {
                func = dataTypeExpression;
                dataTypeExpression = '*';
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === '+') {
                        dataType = dataType.slice(1) || '*';
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === '*') {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === '*') {
                    current = prev;
                } else if (prev !== '*' && prev !== current) {
                    conv = converters[prev + ' ' + current] || converters['* ' + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(' ');
                            if (tmp[1] === current) {
                                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: 'parsererror',
                                    error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: 'success',
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: 'GET',
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            accepts: {
                '*': allTypes,
                text: 'text/plain',
                html: 'text/html',
                xml: 'application/xml, text/xml',
                json: 'application/json, text/javascript'
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: 'responseXML',
                text: 'responseText',
                json: 'responseJSON'
            },
            converters: {
                '* text': String,
                'text html': true,
                'text json': jQuery.parseJSON,
                'text xml': jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
            if (typeof url === 'object') {
                options = url;
                url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, fireGlobals, i, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = 'canceled', jqXHR = {
                    readyState: 0,
                    getResponseHeader: function (key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (match = rheaders.exec(responseHeadersString)) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },
                    getAllResponseHeaders: function () {
                        return state === 2 ? responseHeadersString : null;
                    },
                    setRequestHeader: function (name, value) {
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    overrideMimeType: function (type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    statusCode: function (map) {
                        var code;
                        if (map) {
                            if (state < 2) {
                                for (code in map) {
                                    statusCode[code] = [
                                        statusCode[code],
                                        map[code]
                                    ];
                                }
                            } else {
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },
                    abort: function (statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || location.href) + '').replace(rhash, '').replace(rprotocol, location.protocol + '//');
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(rnotwhite) || [''];
            if (s.crossDomain == null) {
                urlAnchor = document.createElement('a');
                try {
                    urlAnchor.href = s.url;
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;
                } catch (e) {
                    s.crossDomain = true;
                }
            }
            if (s.data && s.processData && typeof s.data !== 'string') {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger('ajaxStart');
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? '&' : '?') + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + nonce++) : cacheURL + (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++;
                }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader('Content-Type', s.contentType);
            }
            jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort();
            }
            strAbort = 'abort';
            for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, 'No Transport');
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxSend', [
                        jqXHR,
                        s
                    ]);
                }
                if (state === 2) {
                    return jqXHR;
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                        jqXHR.abort('timeout');
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || '';
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader('Last-Modified');
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader('etag');
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === 'HEAD') {
                        statusText = 'nocontent';
                    } else if (status === 304) {
                        statusText = 'notmodified';
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = 'error';
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + '';
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                        success,
                        statusText,
                        jqXHR
                    ]);
                } else {
                    deferred.rejectWith(callbackContext, [
                        jqXHR,
                        statusText,
                        error
                    ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                        jqXHR,
                        s,
                        isSuccess ? success : error
                    ]);
                }
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxComplete', [
                        jqXHR,
                        s
                    ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger('ajaxStop');
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, 'json');
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, 'script');
        }
    });
    jQuery.each([
        'get',
        'post'
    ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery._evalUrl = function (url) {
        return jQuery.ajax({
            url: url,
            type: 'GET',
            dataType: 'script',
            async: false,
            global: false,
            'throws': true
        });
    };
    jQuery.fn.extend({
        wrapAll: function (html) {
            var wrap;
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function () {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, 'body')) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function (elem) {
        return !jQuery.expr.filters.visible(elem);
    };
    jQuery.expr.filters.visible = function (elem) {
        return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']', v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === 'object') {
            for (name in obj) {
                buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, value) {
                value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
                s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
            };
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join('&').replace(r20, '+');
    };
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, 'elements');
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
                var type = this.type;
                return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, '\r\n')
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, '\r\n')
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = function () {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {
        }
    };
    var xhrSuccessStatus = {
            0: 200,
            1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function (headers, complete) {
                    var i, xhr = options.xhr();
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers['X-Requested-With']) {
                        headers['X-Requested-With'] = 'XMLHttpRequest';
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function (type) {
                        return function () {
                            if (callback) {
                                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
                                if (type === 'abort') {
                                    xhr.abort();
                                } else if (type === 'error') {
                                    if (typeof xhr.status !== 'number') {
                                        complete(0, 'error');
                                    } else {
                                        complete(xhr.status, xhr.statusText);
                                    }
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string' ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = callback('error');
                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                                window.setTimeout(function () {
                                    if (callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }
                    callback = callback('abort');
                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (callback) {
                            throw e;
                        }
                    }
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, ' + 'application/ecmascript, application/x-ecmascript' },
        contents: { script: /\b(?:java|ecma)script\b/ },
        converters: {
            'text script': function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = 'GET';
        }
    });
    jQuery.ajaxTransport('script', function (s) {
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function (_, complete) {
                    script = jQuery('<script>').prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on('load error', callback = function (evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === 'error' ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && rjsonp.test(s.data) && 'data');
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
            }
            s.converters['script json'] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + ' was not called');
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = 'json';
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };
            jqXHR.always(function () {
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);
                } else {
                    window[callbackName] = overwritten;
                }
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return 'script';
        }
    });
    jQuery.parseHTML = function (data, context, keepScripts) {
        if (!data || typeof data !== 'string') {
            return null;
        }
        if (typeof context === 'boolean') {
            keepScripts = context;
            context = false;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) {
            return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== 'string' && _load) {
            return _load.apply(this, arguments);
        }
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off > -1) {
            selector = jQuery.trim(url.slice(off));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === 'object') {
            type = 'POST';
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type || 'GET',
                dataType: 'html',
                data: params
            }).done(function (responseText) {
                response = arguments;
                self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function (jqXHR, status) {
                self.each(function () {
                    callback.apply(this, response || [
                        jqXHR.responseText,
                        status,
                        jqXHR
                    ]);
                });
            });
        }
        return this;
    };
    jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
    ], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.filters.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
        }).length;
    };
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    }
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
            if (position === 'static') {
                elem.style.position = 'relative';
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, 'top');
            curCSSLeft = jQuery.css(elem, 'left');
            calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ('using' in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function (options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var docElem, win, elem = this[0], box = {
                    top: 0,
                    left: 0
                }, doc = elem && elem.ownerDocument;
            if (!doc) {
                return;
            }
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }
            box = elem.getBoundingClientRect();
            win = getWindow(doc);
            return {
                top: box.top + win.pageYOffset - docElem.clientTop,
                left: box.left + win.pageXOffset - docElem.clientLeft
            };
        },
        position: function () {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, elem = this[0], parentOffset = {
                    top: 0,
                    left: 0
                };
            if (jQuery.css(elem, 'position') === 'fixed') {
                offset = elem.getBoundingClientRect();
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], 'html')) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
                parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
                left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
            };
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent;
                while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || documentElement;
            });
        }
    });
    jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
    }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });
    jQuery.each([
        'top',
        'left'
    ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
            }
        });
    });
    jQuery.each({
        Height: 'height',
        Width: 'width'
    }, function (name, type) {
        jQuery.each({
            padding: 'inner' + name,
            content: type,
            '': 'outer' + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
                return access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        return elem.document.documentElement['client' + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    jQuery.fn.extend({
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
        },
        size: function () {
            return this.length;
        }
    });
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if (typeof define === 'function' && define.amd) {
        define('jquery', [], function () {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
}));
/*can/util/can*/
define('can/util/can', [], function () {
    var glbl = typeof window !== 'undefined' ? window : typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self : global;
    var can = {};
    if (typeof GLOBALCAN === 'undefined' || GLOBALCAN !== false) {
        glbl.can = can;
    }
    can.global = glbl;
    can.k = function () {
    };
    can.isDeferred = function (obj) {
        if (!!can.dev) {
            can.dev.warn('can.isDeferred: this function is deprecated and will be removed in a future release. can.isPromise replaces the functionality of can.isDeferred.');
        }
        return obj && typeof obj.then === 'function' && typeof obj.pipe === 'function';
    };
    can.isPromise = function (obj) {
        return !!obj && (window.Promise && obj instanceof Promise || can.isFunction(obj.then) && (can.List === undefined || !(obj instanceof can.List)));
    };
    can.isMapLike = function (obj) {
        return can.Map && (obj instanceof can.Map || obj && obj.___get);
    };
    var cid = 0;
    can.cid = function (object, name) {
        if (!object._cid) {
            cid++;
            object._cid = (name || '') + cid;
        }
        return object._cid;
    };
    can.VERSION = '@EDGE';
    can.simpleExtend = function (d, s) {
        for (var prop in s) {
            d[prop] = s[prop];
        }
        return d;
    };
    can.last = function (arr) {
        return arr && arr[arr.length - 1];
    };
    can.isDOM = function (el) {
        return (el.ownerDocument || el) === can.global.document;
    };
    can.childNodes = function (node) {
        var childNodes = node.childNodes;
        if ('length' in childNodes) {
            return childNodes;
        } else {
            var cur = node.firstChild;
            var nodes = [];
            while (cur) {
                nodes.push(cur);
                cur = cur.nextSibling;
            }
            return nodes;
        }
    };
    var protoBind = Function.prototype.bind;
    if (protoBind) {
        can.proxy = function (fn, context) {
            return protoBind.call(fn, context);
        };
    } else {
        can.proxy = function (fn, context) {
            return function () {
                return fn.apply(context, arguments);
            };
        };
    }
    can.frag = function (item, doc) {
        var document = doc || can.document || can.global.document;
        var frag;
        if (!item || typeof item === 'string') {
            frag = can.buildFragment(item == null ? '' : '' + item, document);
            if (!frag.childNodes.length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        } else if (item.nodeType === 11) {
            return item;
        } else if (typeof item.nodeType === 'number') {
            frag = document.createDocumentFragment();
            frag.appendChild(item);
            return frag;
        } else if (typeof item.length === 'number') {
            frag = document.createDocumentFragment();
            can.each(item, function (item) {
                frag.appendChild(can.frag(item));
            });
            if (!can.childNodes(frag).length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        } else {
            frag = can.buildFragment('' + item, document);
            if (!can.childNodes(frag).length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        }
    };
    can.scope = can.viewModel = function (el, attr, val) {
        el = can.$(el);
        var scope = can.data(el, 'scope') || can.data(el, 'viewModel');
        if (!scope) {
            scope = new can.Map();
            can.data(el, 'scope', scope);
            can.data(el, 'viewModel', scope);
        }
        switch (arguments.length) {
        case 0:
        case 1:
            return scope;
        case 2:
            return scope.attr(attr);
        default:
            scope.attr(attr, val);
            return el;
        }
    };
    var parseURI = function (url) {
        var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
        return m ? {
            href: m[0] || '',
            protocol: m[1] || '',
            authority: m[2] || '',
            host: m[3] || '',
            hostname: m[4] || '',
            port: m[5] || '',
            pathname: m[6] || '',
            search: m[7] || '',
            hash: m[8] || ''
        } : null;
    };
    can.joinURIs = function (base, href) {
        function removeDotSegments(input) {
            var output = [];
            input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
                if (p === '/..') {
                    output.pop();
                } else {
                    output.push(p);
                }
            });
            return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
        }
        href = parseURI(href || '');
        base = parseURI(base || '');
        return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
    };
    can['import'] = function (moduleName, parentName) {
        var deferred = new can.Deferred();
        if (typeof window.System === 'object' && can.isFunction(window.System['import'])) {
            window.System['import'](moduleName, { name: parentName }).then(can.proxy(deferred.resolve, deferred), can.proxy(deferred.reject, deferred));
        } else if (window.define && window.define.amd) {
            window.require([moduleName], function (value) {
                deferred.resolve(value);
            });
        } else if (window.steal) {
            steal.steal(moduleName, function (value) {
                deferred.resolve(value);
            });
        } else if (window.require) {
            deferred.resolve(window.require(moduleName));
        } else {
            deferred.resolve();
        }
        return deferred.promise();
    };
    can.__observe = function () {
    };
    can.isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
    can.isBrowserWindow = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof SimpleDOM === 'undefined';
    can.isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
    return can;
});
/*can/util/attr/attr*/
define('can/util/attr/attr', ['can/util/can'], function (can) {
    var namespaces = { 'xlink': 'http://www.w3.org/1999/xlink' };
    var setImmediate = can.global.setImmediate || function (cb) {
            return setTimeout(cb, 0);
        }, formElements = {
            'input': true,
            'textarea': true,
            'select': true
        }, hasProperty = function (el, attrName) {
            return attrName in el || can.document && formElements[el.nodeName.toLowerCase()];
        }, attr = {
            MutationObserver: can.global.MutationObserver || can.global.WebKitMutationObserver || can.global.MozMutationObserver,
            map: {
                'class': function (el, val) {
                    val = val || '';
                    if (el.namespaceURI === 'http://www.w3.org/2000/svg') {
                        el.setAttribute('class', val);
                    } else {
                        el.className = val;
                    }
                    return val;
                },
                'value': 'value',
                'innertext': 'innerText',
                'innerhtml': 'innerHTML',
                'textcontent': 'textContent',
                'for': 'htmlFor',
                'checked': true,
                'disabled': true,
                'readonly': function (el, val) {
                    el.readOnly = val || typeof val === 'string' ? true : false;
                    return val;
                },
                'required': true,
                src: function (el, val) {
                    if (val == null || val === '') {
                        el.removeAttribute('src');
                        return null;
                    } else {
                        el.setAttribute('src', val);
                        return val;
                    }
                },
                style: function () {
                    var el = can.global.document && document.createElement('div');
                    if (el && el.style && 'cssText' in el.style) {
                        return function (el, val) {
                            return el.style.cssText = val || '';
                        };
                    } else {
                        return function (el, val) {
                            return el.setAttribute('style', val);
                        };
                    }
                }()
            },
            defaultValue: [
                'input',
                'textarea'
            ],
            setAttrOrProp: function (el, attrName, val) {
                attrName = attrName.toLowerCase();
                var prop = attr.map[attrName];
                if (prop === true && !val) {
                    this.remove(el, attrName);
                } else {
                    this.set(el, attrName, val);
                }
            },
            setSelectValue: function (el, val) {
                if (val != null) {
                    var options = el.getElementsByTagName('option');
                    for (var i = 0; i < options.length; i++) {
                        if (val == options[i].value) {
                            options[i].selected = true;
                            return;
                        }
                    }
                }
                el.selectedIndex = -1;
            },
            set: function (el, attrName, val) {
                var usingMutationObserver = can.isDOM(el) && attr.MutationObserver;
                attrName = attrName.toLowerCase();
                var oldValue;
                if (!usingMutationObserver) {
                    oldValue = attr.get(el, attrName);
                }
                var prop = attr.map[attrName], newValue;
                if (typeof prop === 'function') {
                    newValue = prop(el, val);
                } else if (prop === true && hasProperty(el, attrName)) {
                    newValue = el[attrName] = true;
                    if (attrName === 'checked' && el.type === 'radio') {
                        if (can.inArray((el.nodeName + '').toLowerCase(), attr.defaultValue) >= 0) {
                            el.defaultChecked = true;
                        }
                    }
                } else if (typeof prop === 'string' && hasProperty(el, prop)) {
                    newValue = val;
                    if (el[prop] !== val || el.nodeName.toUpperCase() === 'OPTION') {
                        el[prop] = val;
                    }
                    if (prop === 'value' && can.inArray((el.nodeName + '').toLowerCase(), attr.defaultValue) >= 0) {
                        el.defaultValue = val;
                    }
                } else {
                    attr.setAttribute(el, attrName, val);
                }
                if (!usingMutationObserver && newValue !== oldValue) {
                    attr.trigger(el, attrName, oldValue);
                }
            },
            setAttribute: function () {
                var doc = can.global.document;
                if (doc && document.createAttribute) {
                    try {
                        doc.createAttribute('{}');
                    } catch (e) {
                        var invalidNodes = {}, attributeDummy = document.createElement('div');
                        return function (el, attrName, val) {
                            var first = attrName.charAt(0), cachedNode, node, attr;
                            if ((first === '{' || first === '(' || first === '*') && el.setAttributeNode) {
                                cachedNode = invalidNodes[attrName];
                                if (!cachedNode) {
                                    attributeDummy.innerHTML = '<div ' + attrName + '=""></div>';
                                    cachedNode = invalidNodes[attrName] = attributeDummy.childNodes[0].attributes[0];
                                }
                                node = cachedNode.cloneNode();
                                node.value = val;
                                el.setAttributeNode(node);
                            } else {
                                attr = attrName.split(':');
                                if (attr.length !== 1) {
                                    el.setAttributeNS(namespaces[attr[0]], attrName, val);
                                } else {
                                    el.setAttribute(attrName, val);
                                }
                            }
                        };
                    }
                }
                return function (el, attrName, val) {
                    el.setAttribute(attrName, val);
                };
            }(),
            trigger: function (el, attrName, oldValue) {
                if (can.data(can.$(el), 'canHasAttributesBindings')) {
                    attrName = attrName.toLowerCase();
                    return setImmediate(function () {
                        can.trigger(el, {
                            type: 'attributes',
                            attributeName: attrName,
                            target: el,
                            oldValue: oldValue,
                            bubbles: false
                        }, []);
                    });
                }
            },
            get: function (el, attrName) {
                attrName = attrName.toLowerCase();
                var prop = attr.map[attrName];
                if (typeof prop === 'string' && hasProperty(el, prop)) {
                    return el[prop];
                } else if (prop === true && hasProperty(el, attrName)) {
                    return el[attrName];
                }
                return el.getAttribute(attrName);
            },
            remove: function (el, attrName) {
                attrName = attrName.toLowerCase();
                var oldValue;
                if (!attr.MutationObserver) {
                    oldValue = attr.get(el, attrName);
                }
                var setter = attr.map[attrName];
                if (typeof setter === 'function') {
                    setter(el, undefined);
                }
                if (setter === true && hasProperty(el, attrName)) {
                    el[attrName] = false;
                } else if (typeof setter === 'string' && hasProperty(el, setter)) {
                    el[setter] = '';
                } else {
                    el.removeAttribute(attrName);
                }
                if (!attr.MutationObserver && oldValue != null) {
                    attr.trigger(el, attrName, oldValue);
                }
            },
            has: function () {
                var el = can.global.document && document.createElement('div');
                if (el && el.hasAttribute) {
                    return function (el, name) {
                        return el.hasAttribute(name);
                    };
                } else {
                    return function (el, name) {
                        return el.getAttribute(name) !== null;
                    };
                }
            }()
        };
    return attr;
});
/*can/event/event*/
define('can/event/event', ['can/util/can'], function (can) {
    can.addEvent = function (event, handler) {
        var allEvents = this.__bindEvents || (this.__bindEvents = {}), eventList = allEvents[event] || (allEvents[event] = []);
        eventList.push({
            handler: handler,
            name: event
        });
        return this;
    };
    can.listenTo = function (other, event, handler) {
        var idedEvents = this.__listenToEvents;
        if (!idedEvents) {
            idedEvents = this.__listenToEvents = {};
        }
        var otherId = can.cid(other);
        var othersEvents = idedEvents[otherId];
        if (!othersEvents) {
            othersEvents = idedEvents[otherId] = {
                obj: other,
                events: {}
            };
        }
        var eventsEvents = othersEvents.events[event];
        if (!eventsEvents) {
            eventsEvents = othersEvents.events[event] = [];
        }
        eventsEvents.push(handler);
        can.bind.call(other, event, handler);
    };
    can.stopListening = function (other, event, handler) {
        var idedEvents = this.__listenToEvents, iterIdedEvents = idedEvents, i = 0;
        if (!idedEvents) {
            return this;
        }
        if (other) {
            var othercid = can.cid(other);
            (iterIdedEvents = {})[othercid] = idedEvents[othercid];
            if (!idedEvents[othercid]) {
                return this;
            }
        }
        for (var cid in iterIdedEvents) {
            var othersEvents = iterIdedEvents[cid], eventsEvents;
            other = idedEvents[cid].obj;
            if (!event) {
                eventsEvents = othersEvents.events;
            } else {
                (eventsEvents = {})[event] = othersEvents.events[event];
            }
            for (var eventName in eventsEvents) {
                var handlers = eventsEvents[eventName] || [];
                i = 0;
                while (i < handlers.length) {
                    if (handler && handler === handlers[i] || !handler) {
                        can.unbind.call(other, eventName, handlers[i]);
                        handlers.splice(i, 1);
                    } else {
                        i++;
                    }
                }
                if (!handlers.length) {
                    delete othersEvents.events[eventName];
                }
            }
            if (can.isEmptyObject(othersEvents.events)) {
                delete idedEvents[cid];
            }
        }
        return this;
    };
    can.removeEvent = function (event, fn, __validate) {
        if (!this.__bindEvents) {
            return this;
        }
        var events = this.__bindEvents[event] || [], i = 0, ev, isFunction = typeof fn === 'function';
        while (i < events.length) {
            ev = events[i];
            if (__validate ? __validate(ev, event, fn) : isFunction && ev.handler === fn || !isFunction && (ev.cid === fn || !fn)) {
                events.splice(i, 1);
            } else {
                i++;
            }
        }
        return this;
    };
    can.dispatch = function (event, args) {
        var events = this.__bindEvents;
        if (!events) {
            return;
        }
        var eventName;
        if (typeof event === 'string') {
            eventName = event;
            event = { type: event };
        } else {
            eventName = event.type;
        }
        var handlers = events[eventName];
        if (!handlers) {
            return;
        } else {
            handlers = handlers.slice(0);
        }
        var passed = [event];
        if (args) {
            passed.push.apply(passed, args);
        }
        for (var i = 0, len = handlers.length; i < len; i++) {
            handlers[i].handler.apply(this, passed);
        }
        return event;
    };
    can.one = function (event, handler) {
        var one = function () {
            can.unbind.call(this, event, one);
            return handler.apply(this, arguments);
        };
        can.bind.call(this, event, one);
        return this;
    };
    can.event = {
        on: function () {
            if (arguments.length === 0 && can.Control && this instanceof can.Control) {
                return can.Control.prototype.on.call(this);
            } else {
                return can.addEvent.apply(this, arguments);
            }
        },
        off: function () {
            if (arguments.length === 0 && can.Control && this instanceof can.Control) {
                return can.Control.prototype.off.call(this);
            } else {
                return can.removeEvent.apply(this, arguments);
            }
        },
        bind: can.addEvent,
        unbind: can.removeEvent,
        delegate: function (selector, event, handler) {
            return can.addEvent.call(this, event, handler);
        },
        undelegate: function (selector, event, handler) {
            return can.removeEvent.call(this, event, handler);
        },
        trigger: can.dispatch,
        one: can.one,
        addEvent: can.addEvent,
        removeEvent: can.removeEvent,
        listenTo: can.listenTo,
        stopListening: can.stopListening,
        dispatch: can.dispatch
    };
    return can.event;
});
/*can/util/fragment*/
define('can/util/fragment', ['can/util/can'], function (can) {
    var fragmentRE = /^\s*<(\w+)[^>]*>/, toString = {}.toString, fragment = function (html, name, doc) {
            if (name === undefined) {
                name = fragmentRE.test(html) && RegExp.$1;
            }
            if (html && toString.call(html.replace) === '[object Function]') {
                html = html.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, '<$1></$2>');
            }
            var container = doc.createElement('div'), temp = doc.createElement('div');
            if (name === 'tbody' || name === 'tfoot' || name === 'thead' || name === 'colgroup') {
                temp.innerHTML = '<table>' + html + '</table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
            } else if (name === 'col') {
                temp.innerHTML = '<table><colgroup>' + html + '</colgroup></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
            } else if (name === 'tr') {
                temp.innerHTML = '<table><tbody>' + html + '</tbody></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
            } else if (name === 'td' || name === 'th') {
                temp.innerHTML = '<table><tbody><tr>' + html + '</tr></tbody></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild.firstChild;
            } else if (name === 'option') {
                temp.innerHTML = '<select>' + html + '</select>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
            } else {
                container.innerHTML = '' + html;
            }
            var tmp = {}, children = can.childNodes(container);
            tmp.length = children.length;
            for (var i = 0; i < children.length; i++) {
                tmp[i] = children[i];
            }
            return [].slice.call(tmp);
        };
    can.buildFragment = function (html, doc) {
        if (html && html.nodeType === 11) {
            return html;
        }
        if (!doc) {
            doc = document;
        } else if (doc.length) {
            doc = doc[0];
        }
        var parts = fragment(html, undefined, doc), frag = (doc || document).createDocumentFragment();
        for (var i = 0, length = parts.length; i < length; i++) {
            frag.appendChild(parts[i]);
        }
        return frag;
    };
    (function () {
        var text = '<-\n>', frag = can.buildFragment(text, document);
        if (text !== frag.firstChild.nodeValue) {
            var oldBuildFragment = can.buildFragment;
            can.buildFragment = function (html, nodes) {
                var res = oldBuildFragment(html, nodes);
                if (res.childNodes.length === 1 && res.childNodes[0].nodeType === 3) {
                    res.childNodes[0].nodeValue = html;
                }
                return res;
            };
        }
    }());
    return can;
});
/*can/util/array/isArrayLike*/
define('can/util/array/isArrayLike', ['can/util/can'], function (can) {
    can.isArrayLike = function (obj) {
        var length = obj && typeof obj !== 'boolean' && typeof obj !== 'number' && 'length' in obj && obj.length;
        return typeof arr !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
    };
});
/*can/util/array/each*/
define('can/util/array/each', [
    'can/util/can',
    'can/util/array/isArrayLike'
], function (can) {
    can.each = function (elements, callback, context) {
        var i = 0, key, len, item;
        if (elements) {
            if (can.isArrayLike(elements)) {
                if (can.List && elements instanceof can.List) {
                    for (len = elements.attr('length'); i < len; i++) {
                        item = elements.attr(i);
                        if (callback.call(context || item, item, i, elements) === false) {
                            break;
                        }
                    }
                } else {
                    for (len = elements.length; i < len; i++) {
                        item = elements[i];
                        if (callback.call(context || item, item, i, elements) === false) {
                            break;
                        }
                    }
                }
            } else if (typeof elements === 'object') {
                if (can.Map && elements instanceof can.Map || elements === can.route) {
                    var keys = can.Map.keys(elements);
                    for (i = 0, len = keys.length; i < len; i++) {
                        key = keys[i];
                        item = elements.attr(key);
                        if (callback.call(context || item, item, key, elements) === false) {
                            break;
                        }
                    }
                } else {
                    for (key in elements) {
                        if (Object.prototype.hasOwnProperty.call(elements, key) && callback.call(context || elements[key], elements[key], key, elements) === false) {
                            break;
                        }
                    }
                }
            }
        }
        return elements;
    };
    return can;
});
/*can/util/inserted/inserted*/
define('can/util/inserted/inserted', ['can/util/can'], function (can) {
    can.inserted = function (elems, document) {
        if (!elems.length) {
            return;
        }
        elems = can.makeArray(elems);
        var doc = document || elems[0].ownerDocument || elems[0], inDocument = false, root = can.$(doc.contains ? doc : doc.body), children;
        for (var i = 0, elem; (elem = elems[i]) !== undefined; i++) {
            if (!inDocument) {
                if (elem.getElementsByTagName) {
                    if (can.has(root, elem).length) {
                        inDocument = true;
                    } else {
                        return;
                    }
                } else {
                    continue;
                }
            }
            if (inDocument && elem.getElementsByTagName) {
                children = can.makeArray(elem.getElementsByTagName('*'));
                can.trigger(elem, 'inserted', [], false);
                for (var j = 0, child; (child = children[j]) !== undefined; j++) {
                    can.trigger(child, 'inserted', [], false);
                }
            }
        }
    };
    can.appendChild = function (el, child, document) {
        var children;
        if (child.nodeType === 11) {
            children = can.makeArray(can.childNodes(child));
        } else {
            children = [child];
        }
        el.appendChild(child);
        can.inserted(children, document);
    };
    can.insertBefore = function (el, child, ref, document) {
        var children;
        if (child.nodeType === 11) {
            children = can.makeArray(can.childNodes(child));
        } else {
            children = [child];
        }
        el.insertBefore(child, ref);
        can.inserted(children, document);
    };
});
/*can/util/jquery/jquery*/
define('can/util/jquery/jquery', [
    'jquery/jquery',
    'can/util/can',
    'can/util/attr/attr',
    'can/event/event',
    'can/util/fragment',
    'can/util/array/each',
    'can/util/inserted/inserted'
], function ($, can, attr, event) {
    var isBindableElement = function (node) {
        return node.nodeName && (node.nodeType === 1 || node.nodeType === 9) || node == window || node.addEventListener;
    };
    $ = $ || window.jQuery;
    $.extend(can, $, {
        trigger: function (obj, event, args, bubbles) {
            if (isBindableElement(obj)) {
                $.event.trigger(event, args, obj, !bubbles);
            } else if (obj.trigger) {
                obj.trigger(event, args);
            } else {
                if (typeof event === 'string') {
                    event = { type: event };
                }
                event.target = event.target || obj;
                if (args) {
                    if (args.length && typeof args === 'string') {
                        args = [args];
                    } else if (!args.length) {
                        args = [args];
                    }
                }
                if (!args) {
                    args = [];
                }
                can.dispatch.call(obj, event, args);
            }
        },
        event: can.event,
        addEvent: can.addEvent,
        removeEvent: can.removeEvent,
        buildFragment: can.buildFragment,
        $: $,
        each: can.each,
        bind: function (ev, cb) {
            if (this.nodeType === 11) {
                return;
            }
            if (this.bind && this.bind !== can.bind) {
                this.bind(ev, cb);
            } else if (isBindableElement(this)) {
                $.event.add(this, ev, cb);
            } else {
                can.addEvent.call(this, ev, cb);
            }
            return this;
        },
        unbind: function (ev, cb) {
            if (this.nodeType === 11) {
                return;
            }
            if (this.unbind && this.unbind !== can.unbind) {
                this.unbind(ev, cb);
            } else if (isBindableElement(this)) {
                $.event.remove(this, ev, cb);
            } else {
                can.removeEvent.call(this, ev, cb);
            }
            return this;
        },
        delegate: function (selector, ev, cb) {
            if (this.delegate) {
                this.delegate(selector, ev, cb);
            } else if (isBindableElement(this)) {
                $(this).delegate(selector, ev, cb);
            } else {
                can.bind.call(this, ev, cb);
            }
            return this;
        },
        undelegate: function (selector, ev, cb) {
            if (this.undelegate) {
                this.undelegate(selector, ev, cb);
            } else if (isBindableElement(this)) {
                $(this).undelegate(selector, ev, cb);
            } else {
                can.unbind.call(this, ev, cb);
            }
            return this;
        },
        proxy: can.proxy,
        attr: attr
    });
    can.on = can.bind;
    can.off = can.unbind;
    $.each([
        'append',
        'filter',
        'addClass',
        'remove',
        'data',
        'get',
        'has'
    ], function (i, name) {
        can[name] = function (wrapped) {
            return wrapped[name].apply(wrapped, can.makeArray(arguments).slice(1));
        };
    });
    var oldClean = $.cleanData;
    $.cleanData = function (elems) {
        $.each(elems, function (i, elem) {
            if (elem) {
                can.trigger(elem, 'removed', [], false);
            }
        });
        oldClean(elems);
    };
    var oldDomManip = $.fn.domManip, cbIndex;
    $.fn.domManip = function (args, cb1, cb2) {
        for (var i = 1; i < arguments.length; i++) {
            if (typeof arguments[i] === 'function') {
                cbIndex = i;
                break;
            }
        }
        return oldDomManip.apply(this, arguments);
    };
    $(document.createElement('div')).append(document.createElement('div'));
    var getChildNodes = function (node) {
        var childNodes = node.childNodes;
        if ('length' in childNodes) {
            return can.makeArray(childNodes);
        } else {
            var cur = node.firstChild;
            var nodes = [];
            while (cur) {
                nodes.push(cur);
                cur = cur.nextSibling;
            }
            return nodes;
        }
    };
    if (cbIndex === undefined) {
        $.fn.domManip = oldDomManip;
        can.each([
            'after',
            'prepend',
            'before',
            'append',
            'replaceWith'
        ], function (name) {
            var original = $.fn[name];
            $.fn[name] = function () {
                var elems = [], args = can.makeArray(arguments);
                if (args[0] != null) {
                    if (typeof args[0] === 'string') {
                        args[0] = can.buildFragment(args[0]);
                    }
                    if (args[0].nodeType === 11) {
                        elems = getChildNodes(args[0]);
                    } else if (can.isArrayLike(args[0])) {
                        elems = can.makeArray(args[0]);
                    } else {
                        elems = [args[0]];
                    }
                }
                var ret = original.apply(this, args);
                can.inserted(elems);
                return ret;
            };
        });
    } else {
        $.fn.domManip = cbIndex === 2 ? function (args, table, callback) {
            return oldDomManip.call(this, args, table, function (elem) {
                var elems;
                if (elem.nodeType === 11) {
                    elems = can.makeArray(can.childNodes(elem));
                }
                var ret = callback.apply(this, arguments);
                can.inserted(elems ? elems : [elem]);
                return ret;
            });
        } : function (args, callback) {
            return oldDomManip.call(this, args, function (elem) {
                var elems;
                if (elem.nodeType === 11) {
                    elems = can.makeArray(can.childNodes(elem));
                }
                var ret = callback.apply(this, arguments);
                can.inserted(elems ? elems : [elem]);
                return ret;
            });
        };
    }
    var oldAttr = $.attr;
    $.attr = function (el, attrName) {
        if (can.isDOM(el) && can.attr.MutationObserver) {
            return oldAttr.apply(this, arguments);
        } else {
            var oldValue, newValue;
            if (arguments.length >= 3) {
                oldValue = oldAttr.call(this, el, attrName);
            }
            var res = oldAttr.apply(this, arguments);
            if (arguments.length >= 3) {
                newValue = oldAttr.call(this, el, attrName);
            }
            if (newValue !== oldValue) {
                can.attr.trigger(el, attrName, oldValue);
            }
            return res;
        }
    };
    var oldRemove = $.removeAttr;
    $.removeAttr = function (el, attrName) {
        if (can.isDOM(el) && can.attr.MutationObserver) {
            return oldRemove.apply(this, arguments);
        } else {
            var oldValue = oldAttr.call(this, el, attrName), res = oldRemove.apply(this, arguments);
            if (oldValue != null) {
                can.attr.trigger(el, attrName, oldValue);
            }
            return res;
        }
    };
    $.event.special.attributes = {
        setup: function () {
            if (can.isDOM(this) && can.attr.MutationObserver) {
                var self = this;
                var observer = new can.attr.MutationObserver(function (mutations) {
                    mutations.forEach(function (mutation) {
                        var copy = can.simpleExtend({}, mutation);
                        can.trigger(self, copy, []);
                    });
                });
                observer.observe(this, {
                    attributes: true,
                    attributeOldValue: true
                });
                can.data(can.$(this), 'canAttributesObserver', observer);
            } else {
                can.data(can.$(this), 'canHasAttributesBindings', true);
            }
        },
        teardown: function () {
            if (can.isDOM(this) && can.attr.MutationObserver) {
                can.data(can.$(this), 'canAttributesObserver').disconnect();
                $.removeData(this, 'canAttributesObserver');
            } else {
                $.removeData(this, 'canHasAttributesBindings');
            }
        }
    };
    $.event.special.inserted = {};
    $.event.special.removed = {};
    return can;
});
/*can/util/util*/
define('can/util/util', ['can/util/jquery/jquery'], function (can) {
    return can;
});
/*can/util/array/makeArray*/
define('can/util/array/makeArray', [], function(){ return {}; });
/*can/util/domless/domless*/
define('can/util/domless/domless', [], function(){ return {}; });
/*can/util/bind/bind*/
define('can/util/bind/bind', ['can/util/util'], function (can) {
    can.bindAndSetup = function () {
        can.addEvent.apply(this, arguments);
        if (!this.__inSetup) {
            if (!this._bindings) {
                this._bindings = 1;
                if (this._bindsetup) {
                    this._bindsetup();
                }
            } else {
                this._bindings++;
            }
        }
        return this;
    };
    can.unbindAndTeardown = function (event, handler) {
        if (!this.__bindEvents) {
            return this;
        }
        var handlers = this.__bindEvents[event] || [];
        var handlerCount = handlers.length;
        can.removeEvent.apply(this, arguments);
        if (this._bindings === null) {
            this._bindings = 0;
        } else {
            this._bindings = this._bindings - (handlerCount - handlers.length);
        }
        if (!this._bindings && this._bindteardown) {
            this._bindteardown();
        }
        return this;
    };
    return can;
});
/*can/map/bubble*/
define('can/map/bubble', ['can/util/util'], function (can) {
    var bubble = can.bubble = {
        bind: function (parent, eventName) {
            if (!parent.__inSetup) {
                var bubbleEvents = bubble.events(parent, eventName), len = bubbleEvents.length, bubbleEvent;
                if (!parent._bubbleBindings) {
                    parent._bubbleBindings = {};
                }
                for (var i = 0; i < len; i++) {
                    bubbleEvent = bubbleEvents[i];
                    if (!parent._bubbleBindings[bubbleEvent]) {
                        parent._bubbleBindings[bubbleEvent] = 1;
                        bubble.childrenOf(parent, bubbleEvent);
                    } else {
                        parent._bubbleBindings[bubbleEvent]++;
                    }
                }
            }
        },
        unbind: function (parent, eventName) {
            var bubbleEvents = bubble.events(parent, eventName), len = bubbleEvents.length, bubbleEvent;
            for (var i = 0; i < len; i++) {
                bubbleEvent = bubbleEvents[i];
                if (parent._bubbleBindings) {
                    parent._bubbleBindings[bubbleEvent]--;
                }
                if (parent._bubbleBindings && !parent._bubbleBindings[bubbleEvent]) {
                    delete parent._bubbleBindings[bubbleEvent];
                    bubble.teardownChildrenFrom(parent, bubbleEvent);
                    if (can.isEmptyObject(parent._bubbleBindings)) {
                        delete parent._bubbleBindings;
                    }
                }
            }
        },
        add: function (parent, child, prop) {
            if (child instanceof can.Map && parent._bubbleBindings) {
                for (var eventName in parent._bubbleBindings) {
                    if (parent._bubbleBindings[eventName]) {
                        bubble.teardownFromParent(parent, child, eventName);
                        bubble.toParent(child, parent, prop, eventName);
                    }
                }
            }
        },
        addMany: function (parent, children) {
            for (var i = 0, len = children.length; i < len; i++) {
                bubble.add(parent, children[i], i);
            }
        },
        remove: function (parent, child) {
            if (child instanceof can.Map && parent._bubbleBindings) {
                for (var eventName in parent._bubbleBindings) {
                    if (parent._bubbleBindings[eventName]) {
                        bubble.teardownFromParent(parent, child, eventName);
                    }
                }
            }
        },
        removeMany: function (parent, children) {
            for (var i = 0, len = children.length; i < len; i++) {
                bubble.remove(parent, children[i]);
            }
        },
        set: function (parent, prop, value, current) {
            if (can.isMapLike(value)) {
                bubble.add(parent, value, prop);
            }
            if (can.isMapLike(current)) {
                bubble.remove(parent, current);
            }
            return value;
        },
        events: function (map, boundEventName) {
            return map.constructor._bubbleRule(boundEventName, map);
        },
        toParent: function (child, parent, prop, eventName) {
            can.listenTo.call(parent, child, eventName, function () {
                var args = can.makeArray(arguments), ev = args.shift();
                args[0] = (can.List && parent instanceof can.List ? parent.indexOf(child) : prop) + (args[0] ? '.' + args[0] : '');
                ev.triggeredNS = ev.triggeredNS || {};
                if (ev.triggeredNS[parent._cid]) {
                    return;
                }
                ev.triggeredNS[parent._cid] = true;
                can.trigger(parent, ev, args);
                if (eventName === 'change') {
                    can.trigger(parent, args[0], [
                        args[2],
                        args[3]
                    ]);
                }
            });
        },
        childrenOf: function (parent, eventName) {
            parent._each(function (child, prop) {
                if (child && child.bind) {
                    bubble.toParent(child, parent, prop, eventName);
                }
            });
        },
        teardownFromParent: function (parent, child, eventName) {
            if (child && child.unbind) {
                can.stopListening.call(parent, child, eventName);
            }
        },
        teardownChildrenFrom: function (parent, eventName) {
            parent._each(function (child) {
                bubble.teardownFromParent(parent, child, eventName);
            });
        },
        isBubbling: function (parent, eventName) {
            return parent._bubbleBindings && parent._bubbleBindings[eventName];
        }
    };
    return bubble;
});
/*can/util/object/isplain/isplain*/
define('can/util/object/isplain/isplain', ['can/util/can'], function (can) {
    var core_hasOwn = Object.prototype.hasOwnProperty, isWindow = function (obj) {
            return obj !== null && obj == obj.window;
        }, isPlainObject = function (obj) {
            if (!obj || typeof obj !== 'object' || obj.nodeType || isWindow(obj)) {
                return false;
            }
            try {
                if (obj.constructor && !core_hasOwn.call(obj, 'constructor') && !core_hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
                    return false;
                }
            } catch (e) {
                return false;
            }
            var key;
            for (key in obj) {
            }
            return key === undefined || core_hasOwn.call(obj, key);
        };
    can.isPlainObject = isPlainObject;
    return can;
});
/*can/map/map_helpers*/
define('can/map/map_helpers', [
    'can/util/util',
    'can/util/object/isplain/isplain'
], function (can) {
    var mapHelpers = {
        attrParts: function (attr, keepKey) {
            if (keepKey) {
                return [attr];
            }
            return typeof attr === 'object' ? attr : ('' + attr).split('.');
        },
        canMakeObserve: function (obj) {
            return obj && !can.isPromise(obj) && (can.isArray(obj) || can.isPlainObject(obj));
        },
        serialize: function () {
            var serializeMap = null;
            return function (map, how, where) {
                var cid = can.cid(map), firstSerialize = false;
                if (!serializeMap) {
                    firstSerialize = true;
                    serializeMap = {
                        attr: {},
                        serialize: {}
                    };
                }
                serializeMap[how][cid] = where;
                map.each(function (val, name) {
                    var result, isObservable = can.isMapLike(val), serialized = isObservable && serializeMap[how][can.cid(val)];
                    if (serialized) {
                        result = serialized;
                    } else {
                        if (map['___' + how]) {
                            result = map['___' + how](name, val);
                        } else {
                            result = mapHelpers.getValue(map, name, val, how);
                        }
                    }
                    if (result !== undefined) {
                        where[name] = result;
                    }
                });
                if (firstSerialize) {
                    serializeMap = null;
                }
                return where;
            };
        }(),
        getValue: function (map, name, val, how) {
            if (can.isMapLike(val)) {
                return val[how]();
            } else {
                return val;
            }
        },
        define: null,
        addComputedAttr: function (map, attrName, compute) {
            map._computedAttrs[attrName] = {
                compute: compute,
                count: 0,
                handler: function (ev, newVal, oldVal) {
                    map._triggerChange(attrName, 'set', newVal, oldVal, ev.batchNum);
                }
            };
        },
        addToMap: function addToMap(obj, instance) {
            var teardown;
            if (!madeMap) {
                teardown = teardownMap;
                madeMap = {};
            }
            var hasCid = obj._cid;
            var cid = can.cid(obj);
            if (!madeMap[cid]) {
                madeMap[cid] = {
                    obj: obj,
                    instance: instance,
                    added: !hasCid
                };
            }
            return teardown;
        },
        getMapFromObject: function (obj) {
            return madeMap && madeMap[obj._cid] && madeMap[obj._cid].instance;
        },
        twoLevelDeepExtend: function (destination, source) {
            for (var prop in source) {
                destination[prop] = destination[prop] || {};
                can.simpleExtend(destination[prop], source[prop]);
            }
        }
    };
    var madeMap = null;
    var teardownMap = function () {
        for (var cid in madeMap) {
            if (madeMap[cid].added) {
                delete madeMap[cid].obj._cid;
            }
        }
        madeMap = null;
    };
    return mapHelpers;
});
/*can/util/string/string*/
define('can/util/string/string', ['can/util/util'], function (can) {
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strReplacer = /\{([^\}]+)\}/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, getNext = function (obj, prop, add) {
            var result = obj[prop];
            if (result === undefined && add === true) {
                result = obj[prop] = {};
            }
            return result;
        }, isContainer = function (current) {
            return /^f|^o/.test(typeof current);
        }, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        };
    can.extend(can, {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        getObject: function (name, roots, add) {
            var parts = name ? name.split('.') : [], length = parts.length, current, r = 0, i, container, rootsLength;
            roots = can.isArray(roots) ? roots : [roots || window];
            rootsLength = roots.length;
            if (!length) {
                return roots[0];
            }
            for (r; r < rootsLength; r++) {
                current = roots[r];
                container = undefined;
                for (i = 0; i < length && isContainer(current); i++) {
                    container = current;
                    current = getNext(container, parts[i]);
                }
                if (container !== undefined && current !== undefined) {
                    break;
                }
            }
            if (add === false && current !== undefined) {
                delete container[parts[i - 1]];
            }
            if (add === true && current === undefined) {
                current = roots[0];
                for (i = 0; i < length && isContainer(current); i++) {
                    current = getNext(current, parts[i], true);
                }
            }
            return current;
        },
        capitalize: function (s, cache) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str, offset) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        sub: function (str, data, remove) {
            var obs = [];
            str = str || '';
            obs.push(str.replace(strReplacer, function (whole, inside) {
                var ob = can.getObject(inside, data, remove === true ? false : undefined);
                if (ob === undefined || ob === null) {
                    obs = null;
                    return '';
                }
                if (isContainer(ob) && obs) {
                    obs.push(ob);
                    return '';
                }
                return '' + ob;
            }));
            return obs === null ? obs : obs.length <= 1 ? obs[0] : obs;
        },
        replacer: strReplacer,
        undHash: strUndHash
    });
    return can;
});
/*can/construct/construct*/
define('can/construct/construct', ['can/util/string/string'], function (can) {
    var initializing = 0;
    var canGetDescriptor;
    try {
        Object.getOwnPropertyDescriptor({});
        canGetDescriptor = true;
    } catch (e) {
        canGetDescriptor = false;
    }
    var getDescriptor = function (newProps, name) {
            var descriptor = Object.getOwnPropertyDescriptor(newProps, name);
            if (descriptor && (descriptor.get || descriptor.set)) {
                return descriptor;
            }
            return null;
        }, inheritGetterSetter = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            var descriptor;
            for (var name in newProps) {
                if (descriptor = getDescriptor(newProps, name)) {
                    this._defineProperty(addTo, oldProps, name, descriptor);
                } else {
                    can.Construct._overwrite(addTo, oldProps, name, newProps[name]);
                }
            }
        }, simpleInherit = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            for (var name in newProps) {
                can.Construct._overwrite(addTo, oldProps, name, newProps[name]);
            }
        };
    can.Construct = function () {
        if (arguments.length) {
            return can.Construct.extend.apply(can.Construct, arguments);
        }
    };
    can.extend(can.Construct, {
        constructorExtends: true,
        newInstance: function () {
            var inst = this.instance(), args;
            if (inst.setup) {
                inst.__inSetup = true;
                args = inst.setup.apply(inst, arguments);
                delete inst.__inSetup;
            }
            if (inst.init) {
                inst.init.apply(inst, args || arguments);
            }
            return inst;
        },
        _inherit: canGetDescriptor ? inheritGetterSetter : simpleInherit,
        _defineProperty: function (what, oldProps, propName, descriptor) {
            Object.defineProperty(what, propName, descriptor);
        },
        _overwrite: function (what, oldProps, propName, val) {
            what[propName] = val;
        },
        setup: function (base, fullName) {
            this.defaults = can.extend(true, {}, base.defaults, this.defaults);
        },
        instance: function () {
            initializing = 1;
            var inst = new this();
            initializing = 0;
            return inst;
        },
        extend: function (name, staticProperties, instanceProperties) {
            var fullName = name, klass = staticProperties, proto = instanceProperties;
            if (typeof fullName !== 'string') {
                proto = klass;
                klass = fullName;
                fullName = null;
            }
            if (!proto) {
                proto = klass;
                klass = null;
            }
            proto = proto || {};
            var _super_class = this, _super = this.prototype, Constructor, parts, current, _fullName, _shortName, propName, shortName, namespace, prototype;
            prototype = this.instance();
            can.Construct._inherit(proto, _super, prototype);
            if (fullName) {
                parts = fullName.split('.');
                shortName = parts.pop();
            } else if (klass && klass.shortName) {
                shortName = klass.shortName;
            } else if (this.shortName) {
                shortName = this.shortName;
            }
            if (typeof constructorName === 'undefined') {
                Constructor = function () {
                    return init.apply(this, arguments);
                };
            }
            function init() {
                if (!initializing) {
                    return this.constructor !== Constructor && arguments.length && Constructor.constructorExtends ? Constructor.extend.apply(Constructor, arguments) : Constructor.newInstance.apply(Constructor, arguments);
                }
            }
            for (propName in _super_class) {
                if (_super_class.hasOwnProperty(propName)) {
                    Constructor[propName] = _super_class[propName];
                }
            }
            can.Construct._inherit(klass, _super_class, Constructor);
            if (fullName) {
                current = can.getObject(parts.join('.'), window, true);
                namespace = current;
                _fullName = can.underscore(fullName.replace(/\./g, '_'));
                _shortName = can.underscore(shortName);
                current[shortName] = Constructor;
            }
            can.extend(Constructor, {
                constructor: Constructor,
                prototype: prototype,
                namespace: namespace,
                _shortName: _shortName,
                fullName: fullName,
                _fullName: _fullName
            });
            if (shortName !== undefined) {
                Constructor.shortName = shortName;
            }
            Constructor.prototype.constructor = Constructor;
            var t = [_super_class].concat(can.makeArray(arguments)), args = Constructor.setup.apply(Constructor, t);
            if (Constructor.init) {
                Constructor.init.apply(Constructor, args || t);
            }
            return Constructor;
        }
    });
    can.Construct.prototype.setup = function () {
    };
    can.Construct.prototype.init = function () {
    };
    return can.Construct;
});
/*can/util/batch/batch*/
define('can/util/batch/batch', ['can/util/can'], function (can) {
    var batchNum = 1, transactions = 0, dispatchingBatch = null, collectingBatch = null, batches = [], dispatchingBatches = false;
    can.batch = {
        start: function (batchStopHandler) {
            transactions++;
            if (transactions === 1) {
                var batch = {
                    events: [],
                    callbacks: [],
                    number: batchNum++
                };
                batches.push(batch);
                if (batchStopHandler) {
                    batch.callbacks.push(batchStopHandler);
                }
                collectingBatch = batch;
            }
        },
        stop: function (force, callStart) {
            if (force) {
                transactions = 0;
            } else {
                transactions--;
            }
            if (transactions === 0) {
                collectingBatch = null;
                var batch;
                if (dispatchingBatches === false) {
                    dispatchingBatches = true;
                    var callbacks = [], i;
                    while (batch = batches.shift()) {
                        var events = batch.events;
                        callbacks.push.apply(callbacks, batch.callbacks);
                        dispatchingBatch = batch;
                        can.batch.batchNum = batch.number;
                        var len;
                        if (callStart) {
                            can.batch.start();
                        }
                        for (i = 0, len = events.length; i < len; i++) {
                            can.dispatch.apply(events[i][0], events[i][1]);
                        }
                        can.batch._onDispatchedEvents(batch.number);
                        dispatchingBatch = null;
                        can.batch.batchNum = undefined;
                    }
                    for (i = callbacks.length - 1; i >= 0; i--) {
                        callbacks[i]();
                    }
                    dispatchingBatches = false;
                }
            }
        },
        _onDispatchedEvents: function () {
        },
        trigger: function (item, event, args) {
            if (!item.__inSetup) {
                event = typeof event === 'string' ? { type: event } : event;
                if (collectingBatch) {
                    event.batchNum = collectingBatch.number;
                    collectingBatch.events.push([
                        item,
                        [
                            event,
                            args
                        ]
                    ]);
                } else if (event.batchNum) {
                    can.dispatch.call(item, event, args);
                } else if (batches.length) {
                    can.batch.start();
                    event.batchNum = collectingBatch.number;
                    collectingBatch.events.push([
                        item,
                        [
                            event,
                            args
                        ]
                    ]);
                    can.batch.stop();
                } else {
                    can.dispatch.call(item, event, args);
                }
            }
        },
        afterPreviousEvents: function (handler) {
            var batch = can.last(batches);
            if (batch) {
                var obj = {};
                can.bind.call(obj, 'ready', handler);
                batch.events.push([
                    obj,
                    [
                        { type: 'ready' },
                        []
                    ]
                ]);
            } else {
                handler({});
            }
        },
        after: function (handler) {
            var batch = collectingBatch || dispatchingBatch;
            if (batch) {
                batch.callbacks.push(handler);
            } else {
                handler({});
            }
        }
    };
});
/*can/compute/get_value_and_bind*/
define('can/compute/get_value_and_bind', ['can/util/util'], function (can) {
    function ObservedInfo(func, context, compute) {
        this.newObserved = {};
        this.oldObserved = null;
        this.func = func;
        this.context = context;
        this.compute = compute;
        this.onDependencyChange = can.proxy(this.onDependencyChange, this);
        this.depth = null;
        this.childDepths = {};
        this.ignore = 0;
        this.inBatch = false;
        this.ready = false;
        compute.observedInfo = this;
        this.setReady = can.proxy(this._setReady, this);
    }
    can.simpleExtend(ObservedInfo.prototype, {
        getPrimaryDepth: function () {
            return this.compute._primaryDepth;
        },
        _setReady: function () {
            this.ready = true;
        },
        getDepth: function () {
            if (this.depth !== null) {
                return this.depth;
            } else {
                return this.depth = this._getDepth();
            }
        },
        _getDepth: function () {
            var max = 0, childDepths = this.childDepths;
            for (var cid in childDepths) {
                if (childDepths[cid] > max) {
                    max = childDepths[cid];
                }
            }
            return max + 1;
        },
        addEdge: function (objEv) {
            objEv.obj.bind(objEv.event, this.onDependencyChange);
            if (objEv.obj.observedInfo) {
                this.childDepths[objEv.obj._cid] = objEv.obj.observedInfo.getDepth();
                this.depth = null;
            }
        },
        removeEdge: function (objEv) {
            objEv.obj.unbind(objEv.event, this.onDependencyChange);
            if (objEv.obj.observedInfo) {
                delete this.childDepths[objEv.obj._cid];
                this.depth = null;
            }
        },
        dependencyChange: function (ev) {
            if (this.bound && this.ready) {
                if (ev.batchNum !== undefined) {
                    if (ev.batchNum !== this.batchNum) {
                        ObservedInfo.registerUpdate(this);
                        this.batchNum = ev.batchNum;
                    }
                } else {
                    this.updateCompute(ev.batchNum);
                }
            }
        },
        onDependencyChange: function (ev, newVal, oldVal) {
            this.dependencyChange(ev, newVal, oldVal);
        },
        updateCompute: function (batchNum) {
            if (this.bound) {
                var oldValue = this.value;
                this.getValueAndBind();
                this.compute.updater(this.value, oldValue, batchNum);
            }
        },
        getValueAndBind: function () {
            this.bound = true;
            this.oldObserved = this.newObserved || {};
            this.ignore = 0;
            this.newObserved = {};
            this.ready = false;
            observedInfoStack.push(this);
            this.value = this.func.call(this.context);
            observedInfoStack.pop();
            this.updateBindings();
            can.batch.afterPreviousEvents(this.setReady);
        },
        updateBindings: function () {
            var newObserved = this.newObserved, oldObserved = this.oldObserved, name, obEv;
            for (name in newObserved) {
                obEv = newObserved[name];
                if (!oldObserved[name]) {
                    this.addEdge(obEv);
                } else {
                    oldObserved[name] = null;
                }
            }
            for (name in oldObserved) {
                obEv = oldObserved[name];
                if (obEv) {
                    this.removeEdge(obEv);
                }
            }
        },
        teardown: function () {
            this.bound = false;
            for (var name in this.newObserved) {
                var ob = this.newObserved[name];
                this.removeEdge(ob);
            }
            this.newObserved = {};
        }
    });
    var updateOrder = [], curPrimaryDepth = Infinity, maxPrimaryDepth = 0, currentBatchNum;
    ObservedInfo.registerUpdate = function (observeInfo, batchNum) {
        var depth = observeInfo.getDepth() - 1;
        var primaryDepth = observeInfo.getPrimaryDepth();
        curPrimaryDepth = Math.min(primaryDepth, curPrimaryDepth);
        maxPrimaryDepth = Math.max(primaryDepth, maxPrimaryDepth);
        var primary = updateOrder[primaryDepth] || (updateOrder[primaryDepth] = {
            observeInfos: [],
            current: Infinity,
            max: 0
        });
        var objs = primary.observeInfos[depth] || (primary.observeInfos[depth] = []);
        objs.push(observeInfo);
        primary.current = Math.min(depth, primary.current);
        primary.max = Math.max(depth, primary.max);
    };
    ObservedInfo.updateUntil = function (primaryDepth, depth) {
        var cur;
        while (true) {
            if (curPrimaryDepth <= maxPrimaryDepth && curPrimaryDepth <= primaryDepth) {
                var primary = updateOrder[curPrimaryDepth];
                if (primary && primary.current <= primary.max) {
                    if (primary.current > depth) {
                        return;
                    }
                    var last = primary.observeInfos[primary.current];
                    if (last && (cur = last.pop())) {
                        cur.updateCompute(currentBatchNum);
                    } else {
                        primary.current++;
                    }
                } else {
                    curPrimaryDepth++;
                }
            } else {
                return;
            }
        }
    };
    ObservedInfo.batchEnd = function (batchNum) {
        var cur;
        currentBatchNum = batchNum;
        while (true) {
            if (curPrimaryDepth <= maxPrimaryDepth) {
                var primary = updateOrder[curPrimaryDepth];
                if (primary && primary.current <= primary.max) {
                    var last = primary.observeInfos[primary.current];
                    if (last && (cur = last.pop())) {
                        cur.updateCompute(batchNum);
                    } else {
                        primary.current++;
                    }
                } else {
                    curPrimaryDepth++;
                }
            } else {
                updateOrder = [];
                curPrimaryDepth = Infinity;
                maxPrimaryDepth = 0;
                return;
            }
        }
    };
    var observedInfoStack = [];
    can.__observe = function (obj, event) {
        var top = observedInfoStack[observedInfoStack.length - 1];
        if (top && !top.ignore) {
            var evStr = event + '', name = obj._cid + '|' + evStr;
            if (top.traps) {
                top.traps.push({
                    obj: obj,
                    event: evStr,
                    name: name
                });
            } else if (!top.newObserved[name]) {
                top.newObserved[name] = {
                    obj: obj,
                    event: evStr
                };
            }
        }
    };
    can.__reading = can.__observe;
    can.__trapObserves = function () {
        if (observedInfoStack.length) {
            var top = observedInfoStack[observedInfoStack.length - 1];
            var traps = top.traps = [];
            return function () {
                top.traps = null;
                return traps;
            };
        } else {
            return function () {
                return [];
            };
        }
    };
    can.__observes = function (observes) {
        var top = observedInfoStack[observedInfoStack.length - 1];
        if (top) {
            for (var i = 0, len = observes.length; i < len; i++) {
                var trap = observes[i], name = trap.name;
                if (!top.newObserved[name]) {
                    top.newObserved[name] = trap;
                }
            }
        }
    };
    can.__isRecordingObserves = function () {
        var len = observedInfoStack.length, last = observedInfoStack[len - 1];
        return len && last.ignore === 0 && last;
    };
    can.__notObserve = function (fn) {
        return function () {
            if (observedInfoStack.length) {
                var top = observedInfoStack[observedInfoStack.length - 1];
                top.ignore++;
                var res = fn.apply(this, arguments);
                top.ignore--;
                return res;
            } else {
                return fn.apply(this, arguments);
            }
        };
    };
    can.batch._onDispatchedEvents = ObservedInfo.batchEnd;
    return ObservedInfo;
});
/*can/map/map*/
define('can/map/map', [
    'can/util/util',
    'can/util/bind/bind',
    './bubble',
    './map_helpers',
    'can/construct/construct',
    'can/util/batch/batch',
    'can/compute/get_value_and_bind'
], function (can, bind, bubble, mapHelpers) {
    var unobservable = { 'constructor': true };
    var Map = can.Map = can.Construct.extend({
        setup: function (baseMap) {
            can.Construct.setup.apply(this, arguments);
            this._computedPropertyNames = [];
            if (can.Map) {
                if (!this.defaults) {
                    this.defaults = {};
                }
                for (var prop in this.prototype) {
                    if (prop !== 'define' && prop !== 'constructor' && (typeof this.prototype[prop] !== 'function' || this.prototype[prop].prototype instanceof can.Construct)) {
                        this.defaults[prop] = this.prototype[prop];
                    } else if (this.prototype[prop].isComputed) {
                        this._computedPropertyNames.push(prop);
                    }
                }
                if (mapHelpers.define) {
                    mapHelpers.define(this, baseMap.prototype.define);
                }
            }
            if (can.List && !(this.prototype instanceof can.List)) {
                this.List = Map.List.extend({ Map: this }, {});
            }
        },
        shortName: 'Map',
        _bubbleRule: function (eventName) {
            return eventName === 'change' || eventName.indexOf('.') >= 0 ? ['change'] : [];
        },
        bind: can.bindAndSetup,
        unbind: can.unbindAndTeardown,
        id: 'id',
        keys: function (map) {
            var keys = [];
            can.__observe(map, '__keys');
            for (var keyName in map._data) {
                keys.push(keyName);
            }
            return keys;
        }
    }, {
        setup: function (obj) {
            if (obj instanceof can.Map) {
                obj = obj.serialize();
            }
            this._data = {};
            can.cid(this, '.map');
            this._setupComputedProperties();
            var teardownMapping = obj && mapHelpers.addToMap(obj, this);
            var defaultValues = this._setupDefaults(obj);
            var data = can.extend(can.extend(true, {}, defaultValues), obj);
            this.attr(data);
            if (teardownMapping) {
                teardownMapping();
            }
        },
        _setupComputedProperties: function () {
            this._computedAttrs = {};
            var computes = this.constructor._computedPropertyNames;
            for (var i = 0, len = computes.length; i < len; i++) {
                var attrName = computes[i];
                mapHelpers.addComputedAttr(this, attrName, this[attrName].clone(this));
            }
        },
        _setupDefaults: function () {
            return this.constructor.defaults || {};
        },
        attr: function (attr, val) {
            var type = typeof attr;
            if (attr === undefined) {
                return this._getAttrs();
            } else if (type !== 'string' && type !== 'number') {
                return this._setAttrs(attr, val);
            } else if (arguments.length === 1) {
                return this._get(attr + '');
            } else {
                this._set(attr + '', val);
                return this;
            }
        },
        _get: function (attr) {
            var dotIndex = attr.indexOf('.');
            if (dotIndex >= 0) {
                var value = this.___get(attr);
                if (value !== undefined) {
                    can.__observe(this, attr);
                    return value;
                }
                var first = attr.substr(0, dotIndex), second = attr.substr(dotIndex + 1);
                var current = this.__get(first);
                return current && current._get ? current._get(second) : undefined;
            } else {
                return this.__get(attr);
            }
        },
        __get: function (attr) {
            if (!unobservable[attr] && !this._computedAttrs[attr]) {
                can.__observe(this, attr);
            }
            return this.___get(attr);
        },
        ___get: function (attr) {
            if (attr !== undefined) {
                var computedAttr = this._computedAttrs[attr];
                if (computedAttr && computedAttr.compute) {
                    return computedAttr.compute();
                } else {
                    return this._data.hasOwnProperty(attr) ? this._data[attr] : undefined;
                }
            } else {
                return this._data;
            }
        },
        _set: function (attr, value, keepKey) {
            var dotIndex = attr.indexOf('.'), current;
            if (dotIndex >= 0 && !keepKey) {
                var first = attr.substr(0, dotIndex), second = attr.substr(dotIndex + 1);
                current = this.__inSetup ? undefined : this.___get(first);
                if (can.isMapLike(current)) {
                    current._set(second, value);
                } else {
                    throw new Error('can.Map: Object does not exist');
                }
            } else {
                current = this.__inSetup ? undefined : this.___get(attr);
                if (this.__convert) {
                    value = this.__convert(attr, value);
                }
                this.__set(attr, this.__type(value, attr), current);
            }
        },
        __type: function (value, prop) {
            if (typeof value === 'object' && !(value instanceof can.Map) && mapHelpers.canMakeObserve(value)) {
                var cached = mapHelpers.getMapFromObject(value);
                if (cached) {
                    return cached;
                }
                if (can.isArray(value)) {
                    var List = can.List;
                    return new List(value);
                } else {
                    var Map = this.constructor.Map || can.Map;
                    return new Map(value);
                }
            }
            return value;
        },
        __set: function (prop, value, current) {
            if (value !== current) {
                var computedAttr = this._computedAttrs[prop];
                var changeType = computedAttr || current !== undefined || this.___get().hasOwnProperty(prop) ? 'set' : 'add';
                this.___set(prop, typeof value === 'object' ? bubble.set(this, prop, value, current) : value);
                if (!computedAttr || !computedAttr.count) {
                    this._triggerChange(prop, changeType, value, current);
                }
                if (typeof current === 'object') {
                    bubble.teardownFromParent(this, current);
                }
            }
        },
        ___set: function (prop, val) {
            var computedAttr = this._computedAttrs[prop];
            if (computedAttr && computedAttr.compute) {
                computedAttr.compute(val);
            } else {
                this._data[prop] = val;
            }
            if (typeof this.constructor.prototype[prop] !== 'function' && !computedAttr) {
                this[prop] = val;
            }
        },
        removeAttr: function (attr) {
            return this._remove(attr);
        },
        _remove: function (attr) {
            var parts = mapHelpers.attrParts(attr), prop = parts.shift(), current = this.___get(prop);
            if (parts.length && current) {
                return current.removeAttr(parts);
            } else {
                if (typeof attr === 'string' && !!~attr.indexOf('.')) {
                    prop = attr;
                }
                this.__remove(prop, current);
                return current;
            }
        },
        __remove: function (prop, current) {
            if (prop in this._data) {
                this.___remove(prop);
                this._triggerChange(prop, 'remove', undefined, current);
            }
        },
        ___remove: function (prop) {
            delete this._data[prop];
            if (!(prop in this.constructor.prototype)) {
                delete this[prop];
            }
        },
        ___serialize: function (name, val) {
            return mapHelpers.getValue(this, name, val, 'serialize');
        },
        _getAttrs: function () {
            return mapHelpers.serialize(this, 'attr', {});
        },
        _setAttrs: function (props, remove) {
            props = can.simpleExtend({}, props);
            var prop, self = this, newVal;
            can.batch.start();
            this._each(function (curVal, prop) {
                if (prop === '_cid') {
                    return;
                }
                newVal = props[prop];
                if (newVal === undefined) {
                    if (remove) {
                        self.removeAttr(prop);
                    }
                    return;
                }
                if (self.__convert) {
                    newVal = self.__convert(prop, newVal);
                }
                if (can.isMapLike(curVal) && mapHelpers.canMakeObserve(newVal)) {
                    curVal.attr(newVal, remove);
                } else if (curVal !== newVal) {
                    self.__set(prop, self.__type(newVal, prop), curVal);
                }
                delete props[prop];
            });
            for (prop in props) {
                if (prop !== '_cid') {
                    newVal = props[prop];
                    this._set(prop, newVal, true);
                }
            }
            can.batch.stop();
            return this;
        },
        serialize: function () {
            return mapHelpers.serialize(this, 'serialize', {});
        },
        _triggerChange: function (attr, how, newVal, oldVal, batchNum) {
            if (bubble.isBubbling(this, 'change')) {
                can.batch.trigger(this, {
                    type: 'change',
                    target: this,
                    batchNum: batchNum
                }, [
                    attr,
                    how,
                    newVal,
                    oldVal
                ]);
            }
            can.batch.trigger(this, {
                type: attr,
                target: this,
                batchNum: batchNum
            }, [
                newVal,
                oldVal
            ]);
            if (how === 'remove' || how === 'add') {
                can.batch.trigger(this, {
                    type: '__keys',
                    target: this,
                    batchNum: batchNum
                });
            }
        },
        _bindsetup: function () {
        },
        _bindteardown: function () {
        },
        one: can.one,
        bind: function (eventName, handler) {
            var computedBinding = this._computedAttrs && this._computedAttrs[eventName];
            if (computedBinding && computedBinding.compute) {
                if (!computedBinding.count) {
                    computedBinding.count = 1;
                    computedBinding.compute.bind('change', computedBinding.handler);
                } else {
                    computedBinding.count++;
                }
            }
            bubble.bind(this, eventName);
            return can.bindAndSetup.apply(this, arguments);
        },
        unbind: function (eventName, handler) {
            var computedBinding = this._computedAttrs && this._computedAttrs[eventName];
            if (computedBinding) {
                if (computedBinding.count === 1) {
                    computedBinding.count = 0;
                    computedBinding.compute.unbind('change', computedBinding.handler);
                } else {
                    computedBinding.count--;
                }
            }
            bubble.unbind(this, eventName);
            return can.unbindAndTeardown.apply(this, arguments);
        },
        compute: function (prop) {
            if (can.isFunction(this.constructor.prototype[prop])) {
                return can.compute(this[prop], this);
            } else {
                var reads = can.compute.read.reads(prop), last = reads.length - 1;
                return can.compute(function (newVal) {
                    if (arguments.length) {
                        can.compute.read(this, reads.slice(0, last)).value.attr(reads[last].key, newVal);
                    } else {
                        return can.compute.read(this, reads, { args: [] }).value;
                    }
                }, this);
            }
        },
        each: function () {
            return can.each.apply(undefined, [this].concat(can.makeArray(arguments)));
        },
        _each: function (callback) {
            var data = this.___get();
            for (var prop in data) {
                if (data.hasOwnProperty(prop)) {
                    callback(data[prop], prop);
                }
            }
        },
        dispatch: can.dispatch
    });
    Map.prototype.on = Map.prototype.bind;
    Map.prototype.off = Map.prototype.unbind;
    Map.on = Map.bind;
    Map.off = Map.unbind;
    return Map;
});
/*can/list/list*/
define('can/list/list', [
    'can/util/util',
    'can/map/map',
    'can/map/bubble',
    'can/map/map_helpers'
], function (can, Map, bubble, mapHelpers) {
    var splice = [].splice, spliceRemovesProps = function () {
            var obj = {
                0: 'a',
                length: 1
            };
            splice.call(obj, 0, 1);
            return !obj[0];
        }();
    var list = Map.extend({ Map: Map }, {
            setup: function (instances, options) {
                this.length = 0;
                can.cid(this, '.map');
                this._setupComputedProperties();
                instances = instances || [];
                var teardownMapping;
                if (can.isPromise(instances)) {
                    this.replace(instances);
                } else {
                    teardownMapping = instances.length && mapHelpers.addToMap(instances, this);
                    this.push.apply(this, can.makeArray(instances || []));
                }
                if (teardownMapping) {
                    teardownMapping();
                }
                can.simpleExtend(this, options);
            },
            _triggerChange: function (attr, how, newVal, oldVal) {
                Map.prototype._triggerChange.apply(this, arguments);
                var index = +attr;
                if (!~('' + attr).indexOf('.') && !isNaN(index)) {
                    if (how === 'add') {
                        can.batch.trigger(this, how, [
                            newVal,
                            index
                        ]);
                        can.batch.trigger(this, 'length', [this.length]);
                    } else if (how === 'remove') {
                        can.batch.trigger(this, how, [
                            oldVal,
                            index
                        ]);
                        can.batch.trigger(this, 'length', [this.length]);
                    } else {
                        can.batch.trigger(this, how, [
                            newVal,
                            index
                        ]);
                    }
                }
            },
            ___get: function (attr) {
                if (attr) {
                    var computedAttr = this._computedAttrs[attr];
                    if (computedAttr && computedAttr.compute) {
                        return computedAttr.compute();
                    } else {
                        return this[attr];
                    }
                } else {
                    return this;
                }
            },
            __set: function (prop, value, current) {
                prop = isNaN(+prop) || prop % 1 ? prop : +prop;
                if (typeof prop === 'number' && prop > this.length - 1) {
                    var newArr = new Array(prop + 1 - this.length);
                    newArr[newArr.length - 1] = value;
                    this.push.apply(this, newArr);
                    return newArr;
                }
                return can.Map.prototype.__set.call(this, '' + prop, value, current);
            },
            ___set: function (attr, val) {
                this[attr] = val;
                if (+attr >= this.length) {
                    this.length = +attr + 1;
                }
            },
            __remove: function (prop, current) {
                if (isNaN(+prop)) {
                    delete this[prop];
                    this._triggerChange(prop, 'remove', undefined, current);
                } else {
                    this.splice(prop, 1);
                }
            },
            _each: function (callback) {
                var data = this.___get();
                for (var i = 0; i < data.length; i++) {
                    callback(data[i], i);
                }
            },
            serialize: function () {
                return mapHelpers.serialize(this, 'serialize', []);
            },
            splice: function (index, howMany) {
                var args = can.makeArray(arguments), added = [], i, len, listIndex, allSame = args.length > 2;
                index = index || 0;
                for (i = 0, len = args.length - 2; i < len; i++) {
                    listIndex = i + 2;
                    args[listIndex] = this.__type(args[listIndex], listIndex);
                    added.push(args[listIndex]);
                    if (this[i + index] !== args[listIndex]) {
                        allSame = false;
                    }
                }
                if (allSame && this.length <= added.length) {
                    return added;
                }
                if (howMany === undefined) {
                    howMany = args[1] = this.length - index;
                }
                var removed = splice.apply(this, args);
                if (!spliceRemovesProps) {
                    for (i = this.length; i < removed.length + this.length; i++) {
                        delete this[i];
                    }
                }
                can.batch.start();
                if (howMany > 0) {
                    bubble.removeMany(this, removed);
                    this._triggerChange('' + index, 'remove', undefined, removed);
                }
                if (args.length > 2) {
                    bubble.addMany(this, added);
                    this._triggerChange('' + index, 'add', added, removed);
                }
                can.batch.stop();
                return removed;
            },
            _getAttrs: function () {
                return mapHelpers.serialize(this, 'attr', []);
            },
            _setAttrs: function (items, remove) {
                items = can.makeArray(items);
                can.batch.start();
                this._updateAttrs(items, remove);
                can.batch.stop();
            },
            _updateAttrs: function (items, remove) {
                var len = Math.min(items.length, this.length);
                for (var prop = 0; prop < len; prop++) {
                    var curVal = this[prop], newVal = items[prop];
                    if (can.isMapLike(curVal) && mapHelpers.canMakeObserve(newVal)) {
                        curVal.attr(newVal, remove);
                    } else if (curVal !== newVal) {
                        this._set(prop + '', newVal);
                    } else {
                    }
                }
                if (items.length > this.length) {
                    this.push.apply(this, items.slice(this.length));
                } else if (items.length < this.length && remove) {
                    this.splice(items.length);
                }
            }
        }), getArgs = function (args) {
            return args[0] && can.isArray(args[0]) ? args[0] : can.makeArray(args);
        };
    can.each({
        push: 'length',
        unshift: 0
    }, function (where, name) {
        var orig = [][name];
        list.prototype[name] = function () {
            can.batch.start();
            var args = [], len = where ? this.length : 0, i = arguments.length, res, val;
            while (i--) {
                val = arguments[i];
                args[i] = bubble.set(this, i, this.__type(val, i));
            }
            res = orig.apply(this, args);
            if (!this.comparator || args.length) {
                this._triggerChange('' + len, 'add', args, undefined);
            }
            can.batch.stop();
            return res;
        };
    });
    can.each({
        pop: 'length',
        shift: 0
    }, function (where, name) {
        list.prototype[name] = function () {
            if (!this.length) {
                return undefined;
            }
            var args = getArgs(arguments), len = where && this.length ? this.length - 1 : 0;
            var res = [][name].apply(this, args);
            can.batch.start();
            this._triggerChange('' + len, 'remove', undefined, [res]);
            if (res && res.unbind) {
                bubble.remove(this, res);
            }
            can.batch.stop();
            return res;
        };
    });
    can.extend(list.prototype, {
        indexOf: function (item, fromIndex) {
            can.__observe(this, 'length');
            return can.inArray(item, this, fromIndex);
        },
        join: function () {
            can.__observe(this, 'length');
            return [].join.apply(this, arguments);
        },
        reverse: function () {
            var list = [].reverse.call(can.makeArray(this));
            return this.replace(list);
        },
        slice: function () {
            can.__observe(this, 'length');
            var temp = Array.prototype.slice.apply(this, arguments);
            return new this.constructor(temp);
        },
        concat: function () {
            var args = [];
            can.each(can.makeArray(arguments), function (arg, i) {
                args[i] = arg instanceof can.List ? arg.serialize() : arg;
            });
            return new this.constructor(Array.prototype.concat.apply(this.serialize(), args));
        },
        forEach: function (cb, thisarg) {
            return can.each(this, cb, thisarg || this);
        },
        replace: function (newList) {
            if (can.isPromise(newList)) {
                if (this._promise) {
                    this._promise.__isCurrentPromise = false;
                }
                var promise = this._promise = newList;
                promise.__isCurrentPromise = true;
                var self = this;
                newList.then(function (newList) {
                    if (promise.__isCurrentPromise) {
                        self.replace(newList);
                    }
                });
            } else {
                this.splice.apply(this, [
                    0,
                    this.length
                ].concat(can.makeArray(newList || [])));
            }
            return this;
        },
        filter: function (callback, thisArg) {
            var filteredList = new this.constructor(), self = this, filtered;
            this.each(function (item, index, list) {
                filtered = callback.call(thisArg || self, item, index, self);
                if (filtered) {
                    filteredList.push(item);
                }
            });
            return filteredList;
        },
        map: function (callback, thisArg) {
            var filteredList = new can.List(), self = this;
            this.each(function (item, index, list) {
                var mapped = callback.call(thisArg || self, item, index, self);
                filteredList.push(mapped);
            });
            return filteredList;
        }
    });
    can.List = Map.List = list;
    return can.List;
});
/*can/util/string/deparam/deparam*/
define('can/util/string/deparam/deparam', [
    'can/util/util',
    'can/util/string/string'
], function (can) {
    var digitTest = /^\d+$/, keyBreaker = /([^\[\]]+)|(\[\])/g, paramTest = /([^?#]*)(#.*)?$/, prep = function (str) {
            return decodeURIComponent(str.replace(/\+/g, ' '));
        };
    can.extend(can, {
        deparam: function (params) {
            var data = {}, pairs, lastPart;
            if (params && paramTest.test(params)) {
                pairs = params.split('&');
                can.each(pairs, function (pair) {
                    var parts = pair.split('='), key = prep(parts.shift()), value = prep(parts.join('=')), current = data;
                    if (key) {
                        parts = key.match(keyBreaker);
                        for (var j = 0, l = parts.length - 1; j < l; j++) {
                            if (!current[parts[j]]) {
                                current[parts[j]] = digitTest.test(parts[j + 1]) || parts[j + 1] === '[]' ? [] : {};
                            }
                            current = current[parts[j]];
                        }
                        lastPart = parts.pop();
                        if (lastPart === '[]') {
                            current.push(value);
                        } else {
                            current[lastPart] = value;
                        }
                    }
                });
            }
            return data;
        }
    });
    return can;
});
/*can/route/route*/
define('can/route/route', [
    'can/util/util',
    'can/map/map',
    'can/list/list',
    'can/util/string/deparam/deparam'
], function (can) {
    var matcher = /\:([\w\.]+)/g, paramsMatcher = /^(?:&[^=]+=[^&]*)+/, makeProps = function (props) {
            var tags = [];
            can.each(props, function (val, name) {
                tags.push((name === 'className' ? 'class' : name) + '="' + (name === 'href' ? val : can.esc(val)) + '"');
            });
            return tags.join(' ');
        }, matchesData = function (route, data) {
            var count = 0, i = 0, defaults = {};
            for (var name in route.defaults) {
                if (route.defaults[name] === data[name]) {
                    defaults[name] = 1;
                    count++;
                }
            }
            for (; i < route.names.length; i++) {
                if (!data.hasOwnProperty(route.names[i])) {
                    return -1;
                }
                if (!defaults[route.names[i]]) {
                    count++;
                }
            }
            return count;
        }, location = window.location, wrapQuote = function (str) {
            return (str + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, '\\$1');
        }, each = can.each, extend = can.extend, definedToString = function (obj) {
            return obj.toString.toString() !== Object.prototype.toString.toString();
        }, stringify = function (obj) {
            if (obj && typeof obj === 'object' && !definedToString(obj)) {
                if (obj instanceof can.Map) {
                    obj = obj;
                } else {
                    obj = can.isFunction(obj.slice) ? obj.slice() : can.extend({}, obj);
                }
                can.each(obj, function (val, prop) {
                    obj[prop] = stringify(val);
                });
            } else if (obj !== undefined && obj !== null && can.isFunction(obj.toString)) {
                obj = obj.toString();
            }
            return obj;
        }, removeBackslash = function (str) {
            return str.replace(/\\/g, '');
        }, timer, curParams, lastHash, changingData, changedAttrs = [], onRouteDataChange = function (ev, attr, how, newval) {
            changingData = 1;
            changedAttrs.push(attr);
            clearTimeout(timer);
            timer = setTimeout(function () {
                changingData = 0;
                var serialized = can.route.data.serialize(), path = can.route.param(serialized, true);
                can.route._call('setURL', path, changedAttrs);
                can.batch.trigger(eventsObject, '__url', [
                    path,
                    lastHash
                ]);
                lastHash = path;
                changedAttrs = [];
            }, 10);
        }, eventsObject = can.extend({}, can.event), stringCoercingMapDecorator = function (map) {
            var attrSuper = map.attr;
            map.attr = function (prop, val) {
                var serializable = this.define === undefined || this.define[prop] === undefined || !!this.define[prop].serialize, args;
                if (serializable) {
                    args = stringify(Array.apply(null, arguments));
                } else {
                    args = arguments;
                }
                return attrSuper.apply(this, args);
            };
            return map;
        };
    can.route = function (url, defaults) {
        var root = can.route._call('root');
        if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
            url = url.substr(1);
        }
        defaults = defaults || {};
        var names = [], res, test = '', lastIndex = matcher.lastIndex = 0, next, querySeparator = can.route._call('querySeparator'), matchSlashes = can.route._call('matchSlashes');
        while (res = matcher.exec(url)) {
            names.push(res[1]);
            test += removeBackslash(url.substring(lastIndex, matcher.lastIndex - res[0].length));
            next = '\\' + (removeBackslash(url.substr(matcher.lastIndex, 1)) || querySeparator + (matchSlashes ? '' : '|/'));
            test += '([^' + next + ']' + (defaults[res[1]] ? '*' : '+') + ')';
            lastIndex = matcher.lastIndex;
        }
        test += url.substr(lastIndex).replace('\\', '');
        can.route.routes[url] = {
            test: new RegExp('^' + test + '($|' + wrapQuote(querySeparator) + ')'),
            route: url,
            names: names,
            defaults: defaults,
            length: url.split('/').length
        };
        return can.route;
    };
    extend(can.route, {
        param: function (data, _setRoute) {
            var route, matches = 0, matchCount, routeName = data.route, propCount = 0;
            delete data.route;
            each(data, function () {
                propCount++;
            });
            each(can.route.routes, function (temp, name) {
                matchCount = matchesData(temp, data);
                if (matchCount > matches) {
                    route = temp;
                    matches = matchCount;
                }
                if (matchCount >= propCount) {
                    return false;
                }
            });
            if (can.route.routes[routeName] && matchesData(can.route.routes[routeName], data) === matches) {
                route = can.route.routes[routeName];
            }
            if (route) {
                var cpy = extend({}, data), res = route.route.replace(matcher, function (whole, name) {
                        delete cpy[name];
                        return data[name] === route.defaults[name] ? '' : encodeURIComponent(data[name]);
                    }).replace('\\', ''), after;
                each(route.defaults, function (val, name) {
                    if (cpy[name] === val) {
                        delete cpy[name];
                    }
                });
                after = can.param(cpy);
                if (_setRoute) {
                    can.route.attr('route', route.route);
                }
                return res + (after ? can.route._call('querySeparator') + after : '');
            }
            return can.isEmptyObject(data) ? '' : can.route._call('querySeparator') + can.param(data);
        },
        deparam: function (url) {
            var root = can.route._call('root');
            if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
                url = url.substr(1);
            }
            var route = { length: -1 }, querySeparator = can.route._call('querySeparator'), paramsMatcher = can.route._call('paramsMatcher');
            each(can.route.routes, function (temp, name) {
                if (temp.test.test(url) && temp.length > route.length) {
                    route = temp;
                }
            });
            if (route.length > -1) {
                var parts = url.match(route.test), start = parts.shift(), remainder = url.substr(start.length - (parts[parts.length - 1] === querySeparator ? 1 : 0)), obj = remainder && paramsMatcher.test(remainder) ? can.deparam(remainder.slice(1)) : {};
                obj = extend(true, {}, route.defaults, obj);
                each(parts, function (part, i) {
                    if (part && part !== querySeparator) {
                        obj[route.names[i]] = decodeURIComponent(part);
                    }
                });
                obj.route = route.route;
                return obj;
            }
            if (url.charAt(0) !== querySeparator) {
                url = querySeparator + url;
            }
            return paramsMatcher.test(url) ? can.deparam(url.slice(1)) : {};
        },
        data: stringCoercingMapDecorator(new can.Map({})),
        map: function (data) {
            var appState;
            if (data.prototype instanceof can.Map) {
                appState = new data();
            } else {
                appState = data;
            }
            can.route.data = stringCoercingMapDecorator(appState);
        },
        routes: {},
        ready: function (val) {
            if (val !== true) {
                can.route._setup();
                if (can.isBrowserWindow || can.isWebWorker) {
                    can.route.setState();
                }
            }
            return can.route;
        },
        url: function (options, merge) {
            if (merge) {
                can.__observe(eventsObject, '__url');
                options = can.extend({}, can.route.deparam(can.route._call('matchingPartOfURL')), options);
            }
            return can.route._call('root') + can.route.param(options);
        },
        link: function (name, options, props, merge) {
            return '<a ' + makeProps(extend({ href: can.route.url(options, merge) }, props)) + '>' + name + '</a>';
        },
        current: function (options) {
            can.__observe(eventsObject, '__url');
            return this._call('matchingPartOfURL') === can.route.param(options);
        },
        bindings: {
            hashchange: {
                paramsMatcher: paramsMatcher,
                querySeparator: '&',
                matchSlashes: false,
                bind: function () {
                    can.bind.call(window, 'hashchange', setState);
                },
                unbind: function () {
                    can.unbind.call(window, 'hashchange', setState);
                },
                matchingPartOfURL: function () {
                    var loc = can.route.location || location;
                    return loc.href.split(/#!?/)[1] || '';
                },
                setURL: function (path) {
                    if (location.hash !== '#' + path) {
                        location.hash = '!' + path;
                    }
                    return path;
                },
                root: '#!'
            }
        },
        defaultBinding: 'hashchange',
        currentBinding: null,
        _setup: function () {
            if (!can.route.currentBinding) {
                can.route._call('bind');
                can.route.bind('change', onRouteDataChange);
                can.route.currentBinding = can.route.defaultBinding;
            }
        },
        _teardown: function () {
            if (can.route.currentBinding) {
                can.route._call('unbind');
                can.route.unbind('change', onRouteDataChange);
                can.route.currentBinding = null;
            }
            clearTimeout(timer);
            changingData = 0;
        },
        _call: function () {
            var args = can.makeArray(arguments), prop = args.shift(), binding = can.route.bindings[can.route.currentBinding || can.route.defaultBinding], method = binding[prop];
            if (method.apply) {
                return method.apply(binding, args);
            } else {
                return method;
            }
        }
    });
    each([
        'bind',
        'unbind',
        'on',
        'off',
        'delegate',
        'undelegate',
        'removeAttr',
        'compute',
        '_get',
        '___get',
        'each'
    ], function (name) {
        can.route[name] = function () {
            if (!can.route.data[name]) {
                return;
            }
            return can.route.data[name].apply(can.route.data, arguments);
        };
    });
    can.route.attr = function () {
        return can.route.data.attr.apply(can.route.data, arguments);
    };
    can.route.batch = can.batch;
    var setState = can.route.setState = function () {
        var hash = can.route._call('matchingPartOfURL');
        var oldParams = curParams;
        curParams = can.route.deparam(hash);
        if (!changingData || hash !== lastHash) {
            can.route.batch.start();
            recursiveClean(oldParams, curParams, can.route.data);
            can.route.attr(curParams);
            can.route.batch.trigger(eventsObject, '__url', [
                hash,
                lastHash
            ]);
            can.route.batch.stop();
        }
    };
    var recursiveClean = function (old, cur, data) {
        for (var attr in old) {
            if (cur[attr] === undefined) {
                data.removeAttr(attr);
            } else if (Object.prototype.toString.call(old[attr]) === '[object Object]') {
                recursiveClean(old[attr], cur[attr], data.attr(attr));
            }
        }
    };
    return can.route;
});
/*can/control/control*/
define('can/control/control', [
    'can/util/util',
    'can/construct/construct'
], function (can) {
    var bind = function (el, ev, callback) {
            can.bind.call(el, ev, callback);
            return function () {
                can.unbind.call(el, ev, callback);
            };
        }, isFunction = can.isFunction, extend = can.extend, each = can.each, slice = [].slice, paramReplacer = /\{([^\}]+)\}/g, special = can.getObject('$.event.special', [can]) || {}, delegate = function (el, selector, ev, callback) {
            can.delegate.call(el, selector, ev, callback);
            return function () {
                can.undelegate.call(el, selector, ev, callback);
            };
        }, binder = function (el, ev, callback, selector) {
            return selector ? delegate(el, can.trim(selector), ev, callback) : bind(el, ev, callback);
        }, basicProcessor;
    var Control = can.Control = can.Construct({
        setup: function () {
            can.Construct.setup.apply(this, arguments);
            if (can.Control) {
                var control = this, funcName;
                control.actions = {};
                for (funcName in control.prototype) {
                    if (control._isAction(funcName)) {
                        control.actions[funcName] = control._action(funcName);
                    }
                }
            }
        },
        _shifter: function (context, name) {
            var method = typeof name === 'string' ? context[name] : name;
            if (!isFunction(method)) {
                method = context[method];
            }
            return function () {
                context.called = name;
                return method.apply(context, [this.nodeName ? can.$(this) : this].concat(slice.call(arguments, 0)));
            };
        },
        _isAction: function (methodName) {
            var val = this.prototype[methodName], type = typeof val;
            return methodName !== 'constructor' && (type === 'function' || type === 'string' && isFunction(this.prototype[val])) && !!(special[methodName] || processors[methodName] || /[^\w]/.test(methodName));
        },
        _action: function (methodName, options) {
            paramReplacer.lastIndex = 0;
            if (options || !paramReplacer.test(methodName)) {
                var convertedName = options ? can.sub(methodName, this._lookup(options)) : methodName;
                if (!convertedName) {
                    return null;
                }
                var arr = can.isArray(convertedName), name = arr ? convertedName[1] : convertedName, parts = name.split(/\s+/g), event = parts.pop();
                return {
                    processor: processors[event] || basicProcessor,
                    parts: [
                        name,
                        parts.join(' '),
                        event
                    ],
                    delegate: arr ? convertedName[0] : undefined
                };
            }
        },
        _lookup: function (options) {
            return [
                options,
                window
            ];
        },
        processors: {},
        defaults: {}
    }, {
        setup: function (element, options) {
            var cls = this.constructor, pluginname = cls.pluginName || cls._fullName, arr;
            this.element = can.$(element);
            if (pluginname && pluginname !== 'can_control') {
                this.element.addClass(pluginname);
            }
            arr = can.data(this.element, 'controls');
            if (!arr) {
                arr = [];
                can.data(this.element, 'controls', arr);
            }
            arr.push(this);
            this.options = extend({}, cls.defaults, options);
            this.on();
            return [
                this.element,
                this.options
            ];
        },
        on: function (el, selector, eventName, func) {
            if (!el) {
                this.off();
                var cls = this.constructor, bindings = this._bindings, actions = cls.actions, element = this.element, destroyCB = can.Control._shifter(this, 'destroy'), funcName, ready;
                for (funcName in actions) {
                    if (actions.hasOwnProperty(funcName)) {
                        ready = actions[funcName] || cls._action(funcName, this.options, this);
                        if (ready) {
                            bindings.control[funcName] = ready.processor(ready.delegate || element, ready.parts[2], ready.parts[1], funcName, this);
                        }
                    }
                }
                can.bind.call(element, 'removed', destroyCB);
                bindings.user.push(function (el) {
                    can.unbind.call(el, 'removed', destroyCB);
                });
                return bindings.user.length;
            }
            if (typeof el === 'string') {
                func = eventName;
                eventName = selector;
                selector = el;
                el = this.element;
            }
            if (func === undefined) {
                func = eventName;
                eventName = selector;
                selector = null;
            }
            if (typeof func === 'string') {
                func = can.Control._shifter(this, func);
            }
            this._bindings.user.push(binder(el, eventName, func, selector));
            return this._bindings.user.length;
        },
        off: function () {
            var el = this.element[0], bindings = this._bindings;
            if (bindings) {
                each(bindings.user || [], function (value) {
                    value(el);
                });
                each(bindings.control || {}, function (value) {
                    value(el);
                });
            }
            this._bindings = {
                user: [],
                control: {}
            };
        },
        destroy: function () {
            if (this.element === null) {
                return;
            }
            var Class = this.constructor, pluginName = Class.pluginName || Class._fullName, controls;
            this.off();
            if (pluginName && pluginName !== 'can_control') {
                this.element.removeClass(pluginName);
            }
            controls = can.data(this.element, 'controls');
            controls.splice(can.inArray(this, controls), 1);
            can.trigger(this, 'destroyed');
            this.element = null;
        }
    });
    var processors = can.Control.processors;
    basicProcessor = function (el, event, selector, methodName, control) {
        return binder(el, event, can.Control._shifter(control, methodName), selector);
    };
    each([
        'change',
        'click',
        'contextmenu',
        'dblclick',
        'keydown',
        'keyup',
        'keypress',
        'mousedown',
        'mousemove',
        'mouseout',
        'mouseover',
        'mouseup',
        'reset',
        'resize',
        'scroll',
        'select',
        'submit',
        'focusin',
        'focusout',
        'mouseenter',
        'mouseleave',
        'touchstart',
        'touchmove',
        'touchcancel',
        'touchend',
        'touchleave',
        'inserted',
        'removed',
        'dragstart',
        'dragenter',
        'dragover',
        'dragleave',
        'drag',
        'drop',
        'dragend'
    ], function (v) {
        processors[v] = basicProcessor;
    });
    return Control;
});
/*can/control/route/route*/
define('can/control/route/route', [
    'can/util/util',
    'can/route/route',
    'can/control/control'
], function (can) {
    can.Control.processors.route = function (el, event, selector, funcName, controller) {
        selector = selector || '';
        if (!can.route.routes[selector]) {
            if (selector[0] === '/') {
                selector = selector.substring(1);
            }
            can.route(selector);
        }
        var batchNum, check = function (ev, attr, how) {
                if (can.route.attr('route') === selector && (ev.batchNum === undefined || ev.batchNum !== batchNum)) {
                    batchNum = ev.batchNum;
                    var d = can.route.attr();
                    delete d.route;
                    if (can.isFunction(controller[funcName])) {
                        controller[funcName](d);
                    } else {
                        controller[controller[funcName]](d);
                    }
                }
            };
        can.route.bind('change', check);
        return function () {
            can.route.unbind('change', check);
        };
    };
    return can;
});
/*can/model/model*/
define('can/model/model', [
    'can/util/util',
    'can/map/map',
    'can/list/list'
], function (can) {
    var pipe = function (def, thisArg, func) {
            var d = new can.Deferred();
            def.then(function () {
                var args = can.makeArray(arguments), success = true;
                try {
                    args[0] = func.apply(thisArg, args);
                } catch (e) {
                    success = false;
                    d.rejectWith(d, [e].concat(args));
                }
                if (success) {
                    d.resolveWith(d, args);
                }
            }, function () {
                d.rejectWith(this, arguments);
            });
            if (typeof def.abort === 'function') {
                d.abort = function () {
                    return def.abort();
                };
            }
            return d;
        }, modelNum = 0, getId = function (inst) {
            can.__observe(inst, inst.constructor.id);
            return inst.___get(inst.constructor.id);
        }, ajax = function (ajaxOb, data, type, dataType, success, error) {
            var params = {};
            if (typeof ajaxOb === 'string') {
                var parts = ajaxOb.split(/\s+/);
                params.url = parts.pop();
                if (parts.length) {
                    params.type = parts.pop();
                }
            } else {
                can.extend(params, ajaxOb);
            }
            params.data = typeof data === 'object' && !can.isArray(data) ? can.extend(params.data || {}, data) : data;
            params.url = can.sub(params.url, params.data, true);
            return can.ajax(can.extend({
                type: type || 'post',
                dataType: dataType || 'json',
                success: success,
                error: error
            }, params));
        }, makeRequest = function (modelObj, type, success, error, method) {
            var args;
            if (can.isArray(modelObj)) {
                args = modelObj[1];
                modelObj = modelObj[0];
            } else {
                args = modelObj.serialize();
            }
            args = [args];
            var deferred, model = modelObj.constructor, jqXHR;
            if (type === 'update' || type === 'destroy') {
                args.unshift(getId(modelObj));
            }
            jqXHR = model[type].apply(model, args);
            deferred = pipe(jqXHR, modelObj, function (data) {
                modelObj[method || type + 'd'](data, jqXHR);
                return modelObj;
            });
            if (jqXHR.abort) {
                deferred.abort = function () {
                    jqXHR.abort();
                };
            }
            deferred.then(success, error);
            return deferred;
        }, converters = {
            models: function (instancesRawData, oldList, xhr) {
                can.Model._reqs++;
                if (!instancesRawData) {
                    return;
                }
                if (instancesRawData instanceof this.List) {
                    return instancesRawData;
                }
                var self = this, tmp = [], ListClass = self.List || ML, modelList = oldList instanceof can.List ? oldList : new ListClass(), rawDataIsList = instancesRawData instanceof ML, raw = rawDataIsList ? instancesRawData.serialize() : instancesRawData;
                raw = self.parseModels(raw, xhr);
                if (raw.data) {
                    instancesRawData = raw;
                    raw = raw.data;
                }
                if (typeof raw === 'undefined' || !can.isArray(raw)) {
                    throw new Error('Could not get any raw data while converting using .models');
                }
                if (modelList.length) {
                    modelList.splice(0);
                }
                can.each(raw, function (rawPart) {
                    tmp.push(self.model(rawPart, xhr));
                });
                modelList.push.apply(modelList, tmp);
                if (!can.isArray(instancesRawData)) {
                    can.each(instancesRawData, function (val, prop) {
                        if (prop !== 'data') {
                            modelList.attr(prop, val);
                        }
                    });
                }
                setTimeout(can.proxy(this._clean, this), 1);
                return modelList;
            },
            model: function (attributes, oldModel, xhr) {
                if (!attributes) {
                    return;
                }
                if (typeof attributes.serialize === 'function') {
                    attributes = attributes.serialize();
                } else {
                    attributes = this.parseModel(attributes, xhr);
                }
                var id = attributes[this.id];
                if ((id || id === 0) && this.store[id]) {
                    oldModel = this.store[id];
                }
                var model = oldModel && can.isFunction(oldModel.attr) ? oldModel.attr(attributes, this.removeAttr || false) : new this(attributes);
                return model;
            }
        }, makeParser = {
            parseModel: function (prop) {
                return function (attributes) {
                    return prop ? can.getObject(prop, attributes) : attributes;
                };
            },
            parseModels: function (prop) {
                return function (attributes) {
                    if (can.isArray(attributes)) {
                        return attributes;
                    }
                    prop = prop || 'data';
                    var result = can.getObject(prop, attributes);
                    if (!can.isArray(result)) {
                        throw new Error('Could not get any raw data while converting using .models');
                    }
                    return result;
                };
            }
        }, ajaxMethods = {
            create: {
                url: '_shortName',
                type: 'post'
            },
            update: {
                data: function (id, attrs) {
                    attrs = attrs || {};
                    var identity = this.id;
                    if (attrs[identity] && attrs[identity] !== id) {
                        attrs['new' + can.capitalize(id)] = attrs[identity];
                        delete attrs[identity];
                    }
                    attrs[identity] = id;
                    return attrs;
                },
                type: 'put'
            },
            destroy: {
                type: 'delete',
                data: function (id, attrs) {
                    attrs = attrs || {};
                    attrs.id = attrs[this.id] = id;
                    return attrs;
                }
            },
            findAll: { url: '_shortName' },
            findOne: {}
        }, ajaxMaker = function (ajaxMethod, str) {
            return function (data) {
                data = ajaxMethod.data ? ajaxMethod.data.apply(this, arguments) : data;
                return ajax(str || this[ajaxMethod.url || '_url'], data, ajaxMethod.type || 'get');
            };
        }, createURLFromResource = function (model, name) {
            if (!model.resource) {
                return;
            }
            var resource = model.resource.replace(/\/+$/, '');
            if (name === 'findAll' || name === 'create') {
                return resource;
            } else {
                return resource + '/{' + model.id + '}';
            }
        };
    can.Model = can.Map.extend({
        fullName: 'can.Model',
        _reqs: 0,
        setup: function (base, fullName, staticProps, protoProps) {
            if (typeof fullName !== 'string') {
                protoProps = staticProps;
                staticProps = fullName;
            }
            if (!protoProps) {
                protoProps = staticProps;
            }
            this.store = {};
            can.Map.setup.apply(this, arguments);
            if (!can.Model) {
                return;
            }
            if (staticProps && staticProps.List) {
                this.List = staticProps.List;
                this.List.Map = this;
            } else {
                this.List = base.List.extend({ Map: this }, {});
            }
            var self = this, clean = can.proxy(this._clean, self);
            can.each(ajaxMethods, function (method, name) {
                if (staticProps && staticProps[name] && (typeof staticProps[name] === 'string' || typeof staticProps[name] === 'object')) {
                    self[name] = ajaxMaker(method, staticProps[name]);
                } else if (staticProps && staticProps.resource && !can.isFunction(staticProps[name])) {
                    self[name] = ajaxMaker(method, createURLFromResource(self, name));
                }
                if (self['make' + can.capitalize(name)]) {
                    var newMethod = self['make' + can.capitalize(name)](self[name]);
                    can.Construct._overwrite(self, base, name, function () {
                        can.Model._reqs++;
                        var def = newMethod.apply(this, arguments);
                        var then = def.then(clean, clean);
                        then.abort = def.abort;
                        return then;
                    });
                }
            });
            var hasCustomConverter = {};
            can.each(converters, function (converter, name) {
                var parseName = 'parse' + can.capitalize(name), dataProperty = staticProps && staticProps[name] || self[name];
                if (typeof dataProperty === 'string') {
                    self[parseName] = dataProperty;
                    can.Construct._overwrite(self, base, name, converter);
                } else if (staticProps && staticProps[name]) {
                    hasCustomConverter[parseName] = true;
                }
            });
            can.each(makeParser, function (maker, parseName) {
                var prop = staticProps && staticProps[parseName] || self[parseName];
                if (typeof prop === 'string') {
                    can.Construct._overwrite(self, base, parseName, maker(prop));
                } else if ((!staticProps || !can.isFunction(staticProps[parseName])) && !self[parseName]) {
                    var madeParser = maker();
                    madeParser.useModelConverter = hasCustomConverter[parseName];
                    can.Construct._overwrite(self, base, parseName, madeParser);
                }
            });
            if (self.fullName === 'can.Model' || !self.fullName) {
                self.fullName = 'Model' + ++modelNum;
            }
            can.Model._reqs = 0;
            this._url = this._shortName + '/{' + this.id + '}';
        },
        _ajax: ajaxMaker,
        _makeRequest: makeRequest,
        _clean: function () {
            can.Model._reqs--;
            if (!can.Model._reqs) {
                for (var id in this.store) {
                    if (!this.store[id]._bindings) {
                        delete this.store[id];
                    }
                }
            }
            return arguments[0];
        },
        models: converters.models,
        model: converters.model
    }, {
        setup: function (attrs) {
            var id = attrs && attrs[this.constructor.id];
            if (can.Model._reqs && id != null) {
                this.constructor.store[id] = this;
            }
            can.Map.prototype.setup.apply(this, arguments);
        },
        isNew: function () {
            var id = getId(this);
            return !(id || id === 0);
        },
        save: function (success, error) {
            return makeRequest(this, this.isNew() ? 'create' : 'update', success, error);
        },
        destroy: function (success, error) {
            if (this.isNew()) {
                var self = this;
                var def = can.Deferred();
                def.then(success, error);
                return def.done(function (data) {
                    self.destroyed(data);
                }).resolve(self);
            }
            return makeRequest(this, 'destroy', success, error, 'destroyed');
        },
        _bindsetup: function () {
            var modelInstance = this.___get(this.constructor.id);
            if (modelInstance != null) {
                this.constructor.store[modelInstance] = this;
            }
            return can.Map.prototype._bindsetup.apply(this, arguments);
        },
        _bindteardown: function () {
            delete this.constructor.store[getId(this)];
            return can.Map.prototype._bindteardown.apply(this, arguments);
        },
        ___set: function (prop, val) {
            can.Map.prototype.___set.call(this, prop, val);
            if (prop === this.constructor.id && this._bindings) {
                this.constructor.store[getId(this)] = this;
            }
        }
    });
    var makeGetterHandler = function (name) {
            return function (data, readyState, xhr) {
                return this[name](data, null, xhr);
            };
        }, createUpdateDestroyHandler = function (data) {
            if (this.parseModel.useModelConverter) {
                return this.model(data);
            }
            return this.parseModel(data);
        };
    var responseHandlers = {
        makeFindAll: makeGetterHandler('models'),
        makeFindOne: makeGetterHandler('model'),
        makeCreate: createUpdateDestroyHandler,
        makeUpdate: createUpdateDestroyHandler,
        makeDestroy: createUpdateDestroyHandler
    };
    can.each(responseHandlers, function (method, name) {
        can.Model[name] = function (oldMethod) {
            return function () {
                var args = can.makeArray(arguments), oldArgs = can.isFunction(args[1]) ? args.splice(0, 1) : args.splice(0, 2), def = pipe(oldMethod.apply(this, oldArgs), this, method);
                def.then(args[0], args[1]);
                return def;
            };
        };
    });
    can.each([
        'created',
        'updated',
        'destroyed'
    ], function (funcName) {
        can.Model.prototype[funcName] = function (attrs) {
            var self = this, constructor = self.constructor;
            if (attrs && typeof attrs === 'object') {
                this.attr(can.isFunction(attrs.attr) ? attrs.attr() : attrs);
            }
            can.dispatch.call(this, {
                type: funcName,
                target: this
            }, []);
            can.dispatch.call(constructor, funcName, [this]);
        };
    });
    var ML = can.Model.List = can.List.extend({
        _bubbleRule: function (eventName, list) {
            var bubbleRules = can.List._bubbleRule(eventName, list);
            bubbleRules.push('destroyed');
            return bubbleRules;
        }
    }, {
        setup: function (params) {
            if (can.isPlainObject(params) && !can.isArray(params)) {
                can.List.prototype.setup.apply(this);
                this.replace(can.isPromise(params) ? params : this.constructor.Map.findAll(params));
            } else {
                can.List.prototype.setup.apply(this, arguments);
            }
            this.bind('destroyed', can.proxy(this._destroyed, this));
        },
        _destroyed: function (ev, attr) {
            if (/\w+/.test(attr)) {
                var index;
                while ((index = this.indexOf(ev.target)) > -1) {
                    this.splice(index, 1);
                }
            }
        }
    });
    return can.Model;
});
/*can/compute/read*/
define('can/compute/read', ['can/util/util'], function (can) {
    var read = function (parent, reads, options) {
        options = options || {};
        var state = { foundObservable: false };
        var cur = readValue(parent, 0, reads, options, state), type, prev, readLength = reads.length, i = 0;
        while (i < readLength) {
            prev = cur;
            for (var r = 0, readersLength = read.propertyReaders.length; r < readersLength; r++) {
                var reader = read.propertyReaders[r];
                if (reader.test(cur)) {
                    cur = reader.read(cur, reads[i], i, options, state);
                    break;
                }
            }
            i = i + 1;
            cur = readValue(cur, i, reads, options, state, prev);
            type = typeof cur;
            if (i < reads.length && (cur === null || type !== 'function' && type !== 'object')) {
                if (options.earlyExit) {
                    options.earlyExit(prev, i - 1, cur);
                }
                return {
                    value: undefined,
                    parent: prev
                };
            }
        }
        if (cur === undefined) {
            if (options.earlyExit) {
                options.earlyExit(prev, i - 1);
            }
        }
        return {
            value: cur,
            parent: prev
        };
    };
    var isAt = function (index, reads) {
        var prevRead = reads[index - 1];
        return prevRead && prevRead.at;
    };
    var readValue = function (value, index, reads, options, state, prev) {
        var usedValueReader;
        do {
            usedValueReader = false;
            for (var i = 0, len = read.valueReaders.length; i < len; i++) {
                if (read.valueReaders[i].test(value, index, reads, options)) {
                    value = read.valueReaders[i].read(value, index, reads, options, state, prev);
                }
            }
        } while (usedValueReader);
        return value;
    };
    read.valueReaders = [
        {
            name: 'compute',
            test: function (value, i, reads, options) {
                return value && value.isComputed && !isAt(i, reads);
            },
            read: function (value, i, reads, options, state) {
                if (options.readCompute === false && i === reads.length) {
                    return value;
                }
                if (!state.foundObservable && options.foundObservable) {
                    options.foundObservable(value, i);
                    state.foundObservable = true;
                }
                return value instanceof can.Compute ? value.get() : value();
            }
        },
        {
            name: 'function',
            test: function (value, i, reads, options) {
                var type = typeof value;
                return type === 'function' && !value.isComputed && !(can.Construct && value.prototype instanceof can.Construct) && !(can.route && value === can.route);
            },
            read: function (value, i, reads, options, state, prev) {
                if (isAt(i, reads)) {
                    return i === reads.length ? can.proxy(value, prev) : value;
                } else if (options.callMethodsOnObservables && can.isMapLike(prev)) {
                    return value.apply(prev, options.args || []);
                } else if (options.isArgument && i === reads.length) {
                    return options.proxyMethods !== false ? can.proxy(value, prev) : value;
                }
                return value.apply(prev, options.args || []);
            }
        }
    ];
    read.propertyReaders = [
        {
            name: 'map',
            test: can.isMapLike,
            read: function (value, prop, index, options, state) {
                if (!state.foundObservable && options.foundObservable) {
                    options.foundObservable(value, index);
                    state.foundObservable = true;
                }
                var res = value.attr(prop.key);
                if (res !== undefined) {
                    return res;
                } else {
                    return value[prop.key];
                }
            }
        },
        {
            name: 'promise',
            test: function (value) {
                return can.isPromise(value);
            },
            read: function (value, prop, index, options, state) {
                if (!state.foundObservable && options.foundObservable) {
                    options.foundObservable(value, index);
                    state.foundObservable = true;
                }
                var observeData = value.__observeData;
                if (!value.__observeData) {
                    observeData = value.__observeData = {
                        isPending: true,
                        state: 'pending',
                        isResolved: false,
                        isRejected: false,
                        value: undefined,
                        reason: undefined
                    };
                    can.cid(observeData);
                    can.simpleExtend(observeData, can.event);
                    value.then(function (value) {
                        observeData.isPending = false;
                        observeData.isResolved = true;
                        observeData.value = value;
                        observeData.state = 'resolved';
                        observeData.dispatch('state', [
                            'resolved',
                            'pending'
                        ]);
                    }, function (reason) {
                        observeData.isPending = false;
                        observeData.isRejected = true;
                        observeData.reason = reason;
                        observeData.state = 'rejected';
                        observeData.dispatch('state', [
                            'rejected',
                            'pending'
                        ]);
                    });
                }
                can.__observe(observeData, 'state');
                return prop.key in observeData ? observeData[prop.key] : value[prop.key];
            }
        },
        {
            name: 'object',
            test: function () {
                return true;
            },
            read: function (value, prop) {
                if (value == null) {
                    return undefined;
                } else {
                    if (prop.key in value) {
                        return value[prop.key];
                    } else if (prop.at && specialRead[prop.key] && '@' + prop.key in value) {
                        prop.at = false;
                        return value['@' + prop.key];
                    }
                }
            }
        }
    ];
    var specialRead = {
        index: true,
        key: true,
        event: true,
        element: true,
        viewModel: true
    };
    read.write = function (parent, key, value, options) {
        options = options || {};
        if (can.isMapLike(parent)) {
            if (!options.isArgument && parent._data && parent._data[key] && parent._data[key].isComputed) {
                return parent._data[key](value);
            } else {
                return parent.attr(key, value);
            }
        }
        if (parent[key] && parent[key].isComputed) {
            return parent[key](value);
        }
        if (typeof parent === 'object') {
            parent[key] = value;
        }
    };
    read.reads = function (key) {
        var keys = [];
        var last = 0;
        var at = false;
        if (key.charAt(0) === '@') {
            last = 1;
            at = true;
        }
        var keyToAdd = '';
        for (var i = last; i < key.length; i++) {
            var character = key.charAt(i);
            if (character === '.' || character === '@') {
                if (key.charAt(i - 1) !== '\\') {
                    keys.push({
                        key: keyToAdd,
                        at: at
                    });
                    at = character === '@';
                    keyToAdd = '';
                } else {
                    keyToAdd = keyToAdd.substr(0, keyToAdd.length - 1) + '.';
                }
            } else {
                keyToAdd += character;
            }
        }
        keys.push({
            key: keyToAdd,
            at: at
        });
        return keys;
    };
    return read;
});
/*can/compute/proto_compute*/
define('can/compute/proto_compute', [
    'can/util/util',
    'can/util/bind/bind',
    'can/compute/read',
    'can/compute/get_value_and_bind',
    'can/util/batch/batch'
], function (can, bind, read, ObservedInfo) {
    can.Compute = function (getterSetter, context, eventName, bindOnce) {
        can.cid(this, 'compute');
        var args = [];
        for (var i = 0, arglen = arguments.length; i < arglen; i++) {
            args[i] = arguments[i];
        }
        var contextType = typeof args[1];
        if (typeof args[0] === 'function') {
            this._setupGetterSetterFn(args[0], args[1], args[2], args[3]);
        } else if (args[1]) {
            if (contextType === 'string') {
                this._setupProperty(args[0], args[1], args[2]);
            } else if (contextType === 'function') {
                this._setupSetter(args[0], args[1], args[2]);
            } else {
                if (args[1] && args[1].fn) {
                    this._setupAsyncCompute(args[0], args[1]);
                } else {
                    this._setupSettings(args[0], args[1]);
                }
            }
        } else {
            this._setupSimpleValue(args[0]);
        }
        this._args = args;
        this._primaryDepth = 0;
        this.isComputed = true;
    };
    can.simpleExtend(can.Compute.prototype, {
        setPrimaryDepth: function (depth) {
            this._primaryDepth = depth;
        },
        _setupGetterSetterFn: function (getterSetter, context, eventName) {
            this._set = context ? can.proxy(getterSetter, context) : getterSetter;
            this._get = context ? can.proxy(getterSetter, context) : getterSetter;
            this._canObserve = eventName === false ? false : true;
            var handlers = setupComputeHandlers(this, getterSetter, context || this);
            can.simpleExtend(this, handlers);
        },
        _setupProperty: function (target, propertyName, eventName) {
            var isObserve = can.isMapLike(target), self = this, handler;
            if (isObserve) {
                handler = function (ev, newVal, oldVal) {
                    self.updater(newVal, oldVal, ev.batchNum);
                };
                this.hasDependencies = true;
                this._get = function () {
                    return target.attr(propertyName);
                };
                this._set = function (val) {
                    target.attr(propertyName, val);
                };
            } else {
                handler = function () {
                    self.updater(self._get(), self.value);
                };
                this._get = function () {
                    return can.getObject(propertyName, [target]);
                };
                this._set = function (value) {
                    var properties = propertyName.split('.'), leafPropertyName = properties.pop(), targetProperty = can.getObject(properties.join('.'), [target]);
                    targetProperty[leafPropertyName] = value;
                };
            }
            this._on = function (update) {
                can.bind.call(target, eventName || propertyName, handler);
                this.value = this._get();
            };
            this._off = function () {
                return can.unbind.call(target, eventName || propertyName, handler);
            };
        },
        _setupSetter: function (initialValue, setter, eventName) {
            this.value = initialValue;
            this._set = setter;
            can.simpleExtend(this, eventName);
        },
        _setupSettings: function (initialValue, settings) {
            this.value = initialValue;
            this._set = settings.set || this._set;
            this._get = settings.get || this._get;
            if (!settings.__selfUpdater) {
                var self = this, oldUpdater = this.updater;
                this.updater = function () {
                    oldUpdater.call(self, self._get(), self.value);
                };
            }
            this._on = settings.on ? settings.on : this._on;
            this._off = settings.off ? settings.off : this._off;
        },
        _setupAsyncCompute: function (initialValue, settings) {
            var self = this;
            this.value = initialValue;
            this._setUpdates = true;
            this.lastSetValue = new can.Compute(initialValue);
            this._set = function (newVal) {
                if (newVal === self.lastSetValue.get()) {
                    return this.value;
                }
                return self.lastSetValue.set(newVal);
            };
            this._get = function () {
                return getter.call(settings.context, self.lastSetValue.get());
            };
            var getter = settings.fn, bindings;
            if (getter.length === 0) {
                bindings = setupComputeHandlers(this, getter, settings.context);
            } else if (getter.length === 1) {
                bindings = setupComputeHandlers(this, function () {
                    return getter.call(settings.context, self.lastSetValue.get());
                }, settings);
            } else {
                var oldUpdater = this.updater, setValue = function (newVal) {
                        oldUpdater.call(self, newVal, self.value);
                    };
                this.updater = function (newVal) {
                    oldUpdater.call(self, newVal, self.value);
                };
                bindings = setupComputeHandlers(this, function () {
                    var res = getter.call(settings.context, self.lastSetValue.get(), setValue);
                    return res !== undefined ? res : this.value;
                }, this);
            }
            can.simpleExtend(this, bindings);
        },
        _setupSimpleValue: function (initialValue) {
            this.value = initialValue;
        },
        _bindsetup: can.__notObserve(function () {
            this.bound = true;
            this._on(this.updater);
        }),
        _bindteardown: function () {
            this._off(this.updater);
            this.bound = false;
        },
        bind: can.bindAndSetup,
        unbind: can.unbindAndTeardown,
        clone: function (context) {
            if (context && typeof this._args[0] === 'function') {
                this._args[1] = context;
            } else if (context) {
                this._args[2] = context;
            }
            return new can.Compute(this._args[0], this._args[1], this._args[2], this._args[3]);
        },
        _on: can.k,
        _off: can.k,
        get: function () {
            var recordingObservation = can.__isRecordingObserves();
            if (recordingObservation && this._canObserve !== false) {
                can.__observe(this, 'change');
                if (!this.bound) {
                    can.Compute.temporarilyBind(this);
                }
            }
            if (this.bound) {
                if (recordingObservation && this.getDepth && this.getDepth() >= recordingObservation.getDepth()) {
                    ObservedInfo.updateUntil(this.getPrimaryDepth(), this.getDepth());
                }
                return this.value;
            } else {
                return this._get();
            }
        },
        _get: function () {
            return this.value;
        },
        set: function (newVal) {
            var old = this.value;
            var setVal = this._set(newVal, old);
            if (this._setUpdates) {
                return this.value;
            }
            if (this.hasDependencies) {
                return this._get();
            }
            if (setVal === undefined) {
                this.value = this._get();
            } else {
                this.value = setVal;
            }
            updateOnChange(this, this.value, old);
            return this.value;
        },
        _set: function (newVal) {
            return this.value = newVal;
        },
        updater: function (newVal, oldVal, batchNum) {
            this.value = newVal;
            updateOnChange(this, newVal, oldVal, batchNum);
        },
        toFunction: function () {
            return can.proxy(this._computeFn, this);
        },
        _computeFn: function (newVal) {
            if (arguments.length) {
                return this.set(newVal);
            }
            return this.get();
        }
    });
    var updateOnChange = function (compute, newValue, oldValue, batchNum) {
        var valueChanged = newValue !== oldValue && !(newValue !== newValue && oldValue !== oldValue);
        if (valueChanged) {
            can.batch.trigger(compute, {
                type: 'change',
                batchNum: batchNum
            }, [
                newValue,
                oldValue
            ]);
        }
    };
    var setupComputeHandlers = function (compute, func, context) {
        var readInfo = new ObservedInfo(func, context, compute);
        return {
            readInfo: readInfo,
            _on: function () {
                readInfo.getValueAndBind();
                compute.value = readInfo.value;
                compute.hasDependencies = !can.isEmptyObject(readInfo.newObserved);
            },
            _off: function () {
                readInfo.teardown();
            },
            getDepth: function () {
                return readInfo.getDepth();
            },
            getPrimaryDepth: function () {
                return readInfo.getPrimaryDepth();
            }
        };
    };
    can.Compute.temporarilyBind = function (compute) {
        var computeInstance = compute.computeInstance || compute;
        computeInstance.bind('change', can.k);
        if (!computes) {
            computes = [];
            setTimeout(unbindComputes, 10);
        }
        computes.push(computeInstance);
    };
    var computes, unbindComputes = function () {
            for (var i = 0, len = computes.length; i < len; i++) {
                computes[i].unbind('change', can.k);
            }
            computes = null;
        };
    can.Compute.async = function (initialValue, asyncComputer, context) {
        return new can.Compute(initialValue, {
            fn: asyncComputer,
            context: context
        });
    };
    can.Compute.truthy = function (compute) {
        return new can.Compute(function () {
            var res = compute.get();
            if (typeof res === 'function') {
                res = res.get();
            }
            return !!res;
        });
    };
    can.Compute.read = read;
    can.Compute.set = read.write;
    return can.Compute;
});
/*can/compute/compute*/
define('can/compute/compute', [
    'can/util/util',
    'can/util/bind/bind',
    'can/util/batch/batch',
    'can/compute/proto_compute'
], function (can, bind) {
    can.compute = function (getterSetter, context, eventName, bindOnce) {
        var internalCompute = new can.Compute(getterSetter, context, eventName, bindOnce);
        var bind = internalCompute.bind;
        var unbind = internalCompute.unbind;
        var compute = function (val) {
            if (arguments.length) {
                return internalCompute.set(val);
            }
            return internalCompute.get();
        };
        var cid = can.cid(compute, 'compute');
        var handlerKey = '__handler' + cid;
        compute.bind = function (ev, handler) {
            var computeHandler = handler && handler[handlerKey];
            if (handler && !computeHandler) {
                computeHandler = handler[handlerKey] = function () {
                    handler.apply(compute, arguments);
                };
            }
            return bind.call(internalCompute, ev, computeHandler);
        };
        compute.unbind = function (ev, handler) {
            var computeHandler = handler && handler[handlerKey];
            if (computeHandler) {
                delete handler[handlerKey];
                return internalCompute.unbind(ev, computeHandler);
            }
            return unbind.apply(internalCompute, arguments);
        };
        compute.isComputed = internalCompute.isComputed;
        compute.clone = function (ctx) {
            if (typeof getterSetter === 'function') {
                context = ctx;
            }
            return can.compute(getterSetter, context, ctx, bindOnce);
        };
        compute.computeInstance = internalCompute;
        return compute;
    };
    can.compute.truthy = function (compute) {
        return can.compute(function () {
            var res = compute();
            if (typeof res === 'function') {
                res = res();
            }
            return !!res;
        });
    };
    can.compute.async = function (initialValue, asyncComputer, context) {
        return can.compute(initialValue, {
            fn: asyncComputer,
            context: context
        });
    };
    can.compute.read = can.Compute.read;
    can.compute.set = can.Compute.set;
    can.compute.temporarilyBind = can.Compute.temporarilyBind;
    return can.compute;
});
/*can/map/define/define*/
define('can/map/define/define', [
    'can/util/util',
    'can/map/map_helpers',
    'can/map/map',
    'can/compute/compute'
], function (can, mapHelpers) {
    if (!can.define) {
        var define = can.define = {};
        var getPropDefineBehavior = function (behavior, attr, define) {
            var prop, defaultProp;
            if (define) {
                prop = define[attr];
                defaultProp = define['*'];
                if (prop && prop[behavior] !== undefined) {
                    return prop[behavior];
                } else if (defaultProp && defaultProp[behavior] !== undefined) {
                    return defaultProp[behavior];
                }
            }
        };
        mapHelpers.define = function (Map, baseDefine) {
            var definitions = Map.prototype.define;
            if (baseDefine) {
                var defines = can.simpleExtend({}, baseDefine);
                mapHelpers.twoLevelDeepExtend(defines, definitions);
                can.simpleExtend(definitions, defines);
            }
            Map.defaultGenerators = {};
            for (var prop in definitions) {
                var type = definitions[prop].type;
                if (typeof type === 'string') {
                    if (typeof define.types[type] === 'object') {
                        delete definitions[prop].type;
                        can.extend(definitions[prop], define.types[type]);
                    }
                }
                if ('value' in definitions[prop]) {
                    if (typeof definitions[prop].value === 'function') {
                        Map.defaultGenerators[prop] = definitions[prop].value;
                    } else {
                        Map.defaults[prop] = definitions[prop].value;
                    }
                }
                if (typeof definitions[prop].Value === 'function') {
                    (function (Constructor) {
                        Map.defaultGenerators[prop] = function () {
                            return new Constructor();
                        };
                    }(definitions[prop].Value));
                }
            }
        };
        var oldSetupDefaults = can.Map.prototype._setupDefaults;
        can.Map.prototype._setupDefaults = function (obj) {
            var defaults = can.extend({}, oldSetupDefaults.call(this)), propsCommittedToAttr = {}, Map = this.constructor, originalGet = this._get;
            this._get = function (originalProp) {
                var prop = originalProp.indexOf('.') !== -1 ? originalProp.substr(0, originalProp.indexOf('.')) : originalProp;
                if (prop in defaults && !(prop in propsCommittedToAttr)) {
                    this.attr(prop, defaults[prop]);
                    propsCommittedToAttr[prop] = true;
                }
                return originalGet.apply(this, arguments);
            };
            for (var prop in Map.defaultGenerators) {
                if (!obj || !(prop in obj)) {
                    defaults[prop] = Map.defaultGenerators[prop].call(this);
                }
            }
            delete this._get;
            return defaults;
        };
        var proto = can.Map.prototype, oldSet = proto.__set;
        proto.__set = function (prop, value, current, success, error) {
            var errorCallback = function (errors) {
                    var stub = error && error.call(self, errors);
                    if (stub !== false) {
                        can.trigger(self, 'error', [
                            prop,
                            errors
                        ], true);
                    }
                    return false;
                }, self = this, setter = getPropDefineBehavior('set', prop, this.define), getter = getPropDefineBehavior('get', prop, this.define);
            if (setter) {
                can.batch.start();
                var setterCalled = false, setValue = setter.call(this, value, function (value) {
                        if (getter) {
                            self[prop](value);
                        } else {
                            oldSet.call(self, prop, value, current, success, errorCallback);
                        }
                        setterCalled = true;
                    }, errorCallback, getter ? this._computedAttrs[prop].compute.computeInstance.lastSetValue.get() : current);
                if (getter) {
                    if (setValue !== undefined && !setterCalled && setter.length >= 1) {
                        this._computedAttrs[prop].compute(setValue);
                    }
                    can.batch.stop();
                    return;
                } else if (setValue === undefined && !setterCalled && setter.length >= 1) {
                    can.batch.stop();
                    return;
                } else {
                    if (!setterCalled) {
                        oldSet.call(self, prop, setter.length === 0 && setValue === undefined ? value : setValue, current, success, errorCallback);
                    }
                    can.batch.stop();
                    return this;
                }
            } else {
                oldSet.call(self, prop, value, current, success, errorCallback);
            }
            return this;
        };
        define.types = {
            'date': function (str) {
                var type = typeof str;
                if (type === 'string') {
                    str = Date.parse(str);
                    return isNaN(str) ? null : new Date(str);
                } else if (type === 'number') {
                    return new Date(str);
                } else {
                    return str;
                }
            },
            'number': function (val) {
                if (val == null) {
                    return val;
                }
                return +val;
            },
            'boolean': function (val) {
                if (val === 'false' || val === '0' || !val) {
                    return false;
                }
                return true;
            },
            'htmlbool': function (val) {
                return typeof val === 'string' || !!val;
            },
            '*': function (val) {
                return val;
            },
            'string': function (val) {
                if (val == null) {
                    return val;
                }
                return '' + val;
            },
            'compute': {
                set: function (newValue, setVal, setErr, oldValue) {
                    if (newValue && newValue.isComputed) {
                        return newValue;
                    }
                    if (oldValue && oldValue.isComputed) {
                        oldValue(newValue);
                        return oldValue;
                    }
                    return newValue;
                },
                get: function (value) {
                    return value && value.isComputed ? value() : value;
                }
            }
        };
        var oldType = proto.__type;
        proto.__type = function (value, prop) {
            var type = getPropDefineBehavior('type', prop, this.define), Type = getPropDefineBehavior('Type', prop, this.define), newValue = value;
            if (typeof type === 'string') {
                type = define.types[type];
            }
            if (type || Type) {
                if (type) {
                    newValue = type.call(this, newValue, prop);
                }
                if (Type && !(newValue instanceof Type)) {
                    newValue = new Type(newValue);
                }
                return newValue;
            } else if (can.isPlainObject(newValue) && newValue.define) {
                newValue = can.Map.extend(newValue);
                newValue = new newValue();
            }
            return oldType.call(this, newValue, prop);
        };
        var oldRemove = proto.__remove;
        proto.__remove = function (prop, current) {
            var remove = getPropDefineBehavior('remove', prop, this.define), res;
            if (remove) {
                can.batch.start();
                res = remove.call(this, current);
                if (res === false) {
                    can.batch.stop();
                    return;
                } else {
                    res = oldRemove.call(this, prop, current);
                    can.batch.stop();
                    return res;
                }
            }
            return oldRemove.call(this, prop, current);
        };
        var oldSetupComputes = proto._setupComputedProperties;
        proto._setupComputedProperties = function () {
            oldSetupComputes.apply(this, arguments);
            for (var attr in this.define) {
                var def = this.define[attr], get = def.get;
                if (get) {
                    mapHelpers.addComputedAttr(this, attr, can.compute.async(undefined, get, this));
                }
            }
        };
        var oldSingleSerialize = proto.___serialize;
        proto.___serialize = function (name, val) {
            return serializeProp(this, name, val);
        };
        var serializeProp = function (map, attr, val) {
            var serializer = attr === '*' ? false : getPropDefineBehavior('serialize', attr, map.define);
            if (serializer === undefined) {
                return oldSingleSerialize.call(map, attr, val);
            } else if (serializer !== false) {
                return typeof serializer === 'function' ? serializer.call(map, val, attr) : oldSingleSerialize.call(map, attr, val);
            }
        };
        var oldSerialize = proto.serialize;
        proto.serialize = function (property) {
            var serialized = oldSerialize.apply(this, arguments);
            if (property) {
                return serialized;
            }
            var serializer, val;
            for (var attr in this.define) {
                if (!(attr in serialized)) {
                    serializer = this.define && this.define[attr] && this.define[attr].serialize;
                    if (serializer) {
                        val = serializeProp(this, attr, this.attr(attr));
                        if (val !== undefined) {
                            serialized[attr] = val;
                        }
                    }
                }
            }
            return serialized;
        };
    }
    return can.define;
});
/*can/view/scope/compute_data*/
define('can/view/scope/compute_data', [
    'can/util/util',
    'can/compute/compute',
    'can/compute/get_value_and_bind'
], function (can, compute, ObservedInfo) {
    var isFastPath = function (computeData) {
        return computeData.reads && computeData.reads.length === 1 && computeData.root instanceof can.Map && !can.isFunction(computeData.root[computeData.reads[0].key]);
    };
    var scopeReader = function (scope, key, options, computeData, newVal) {
        if (arguments.length > 4) {
            var root = computeData.root || computeData.setRoot;
            if (root) {
                if (root.isComputed) {
                    root(newVal);
                } else if (computeData.reads.length) {
                    var last = computeData.reads.length - 1;
                    var obj = computeData.reads.length ? can.compute.read(root, computeData.reads.slice(0, last)).value : root;
                    can.compute.set(obj, computeData.reads[last].key, newVal, options);
                }
            } else {
            }
        } else {
            if (computeData.root) {
                return can.compute.read(computeData.root, computeData.reads, options).value;
            }
            var data = scope.read(key, options);
            computeData.scope = data.scope;
            computeData.initialValue = data.value;
            computeData.reads = data.reads;
            computeData.root = data.rootObserve;
            computeData.setRoot = data.setRoot;
            return data.value;
        }
    };
    return function (scope, key, options) {
        options = options || { args: [] };
        var computeData = {}, scopeRead = function (newVal) {
                if (arguments.length) {
                    return scopeReader(scope, key, options, computeData, newVal);
                } else {
                    return scopeReader(scope, key, options, computeData);
                }
            }, compute = can.compute(undefined, {
                on: function () {
                    readInfo.getValueAndBind();
                    if (isFastPath(computeData)) {
                        readInfo.dependencyChange = function (ev, newVal) {
                            if (typeof newVal !== 'function') {
                                this.newVal = newVal;
                            } else {
                                readInfo.dependencyChange = ObservedInfo.prototype.dependencyChange;
                                readInfo.getValueAndBind = ObservedInfo.prototype.getValueAndBind;
                            }
                            return ObservedInfo.prototype.dependencyChange.call(this, ev);
                        };
                        readInfo.getValueAndBind = function () {
                            this.value = this.newVal;
                        };
                    }
                    compute.computeInstance.value = readInfo.value;
                    compute.computeInstance.hasDependencies = !can.isEmptyObject(readInfo.newObserved);
                },
                off: function () {
                    readInfo.dependencyChange = ObservedInfo.prototype.dependencyChange;
                    readInfo.getValueAndBind = ObservedInfo.prototype.getValueAndBind;
                    readInfo.teardown();
                },
                set: scopeRead,
                get: scopeRead,
                __selfUpdater: true
            }), readInfo = new ObservedInfo(scopeRead, null, compute.computeInstance);
        computeData.compute = compute;
        return computeData;
    };
});
/*can/view/view*/
define('can/view/view', ['can/util/util'], function (can) {
    var isFunction = can.isFunction, makeArray = can.makeArray, hookupId = 1;
    var makeRenderer = function (textRenderer) {
        var renderer = function () {
            return $view.frag(textRenderer.apply(this, arguments));
        };
        renderer.render = function () {
            return textRenderer.apply(textRenderer, arguments);
        };
        return renderer;
    };
    var checkText = function (text, url) {
        if (!text.length) {
            throw new Error('can.view: No template or empty template:' + url);
        }
    };
    var getRenderer = function (obj, async) {
        if (isFunction(obj)) {
            var def = can.Deferred();
            return def.resolve(obj);
        }
        var url = typeof obj === 'string' ? obj : obj.url, suffix = obj.engine && '.' + obj.engine || url.match(/\.[\w\d]+$/), type, el, id;
        if (url.match(/^#/)) {
            url = url.substr(1);
        }
        if (el = document.getElementById(url)) {
            suffix = '.' + el.type.match(/\/(x\-)?(.+)/)[2];
        }
        if (!suffix && !$view.cached[url]) {
            url += suffix = $view.ext;
        }
        if (can.isArray(suffix)) {
            suffix = suffix[0];
        }
        id = $view.toId(url);
        if (url.match(/^\/\//)) {
            url = url.substr(2);
            url = !window.steal ? url : steal.config().root.mapJoin('' + steal.id(url));
        }
        if (window.require) {
            if (require.toUrl) {
                url = require.toUrl(url);
            }
        }
        type = $view.types[suffix];
        if ($view.cached[id]) {
            return $view.cached[id];
        } else if (el) {
            return $view.registerView(id, el.innerHTML, type);
        } else {
            var d = new can.Deferred();
            can.ajax({
                async: async,
                url: url,
                dataType: 'text',
                error: function (jqXHR) {
                    checkText('', url);
                    d.reject(jqXHR);
                },
                success: function (text) {
                    checkText(text, url);
                    $view.registerView(id, text, type, d);
                }
            });
            return d;
        }
    };
    var getDeferreds = function (data) {
        var deferreds = [];
        if (can.isPromise(data)) {
            return [data];
        } else {
            for (var prop in data) {
                if (can.isPromise(data[prop])) {
                    deferreds.push(data[prop]);
                }
            }
        }
        return deferreds;
    };
    var usefulPart = function (resolved) {
        return can.isArray(resolved) && resolved[1] === 'success' ? resolved[0] : resolved;
    };
    var $view = can.view = can.template = function (view, data, helpers, callback) {
        if (isFunction(helpers)) {
            callback = helpers;
            helpers = undefined;
        }
        return $view.renderAs('fragment', view, data, helpers, callback);
    };
    can.extend($view, {
        frag: function (result, parentNode) {
            return $view.hookup($view.fragment(result), parentNode);
        },
        fragment: function (result) {
            return can.frag(result, document);
        },
        toId: function (src) {
            return can.map(src.toString().split(/\/|\./g), function (part) {
                if (part) {
                    return part;
                }
            }).join('_');
        },
        toStr: function (txt) {
            return txt == null ? '' : '' + txt;
        },
        hookup: function (fragment, parentNode) {
            var hookupEls = [], id, func;
            can.each(fragment.childNodes ? can.makeArray(fragment.childNodes) : fragment, function (node) {
                if (node.nodeType === 1) {
                    hookupEls.push(node);
                    hookupEls.push.apply(hookupEls, can.makeArray(node.getElementsByTagName('*')));
                }
            });
            can.each(hookupEls, function (el) {
                if (el.getAttribute && (id = el.getAttribute('data-view-id')) && (func = $view.hookups[id])) {
                    func(el, parentNode, id);
                    delete $view.hookups[id];
                    el.removeAttribute('data-view-id');
                }
            });
            return fragment;
        },
        hookups: {},
        hook: function (cb) {
            $view.hookups[++hookupId] = cb;
            return ' data-view-id=\'' + hookupId + '\'';
        },
        cached: {},
        cachedRenderers: {},
        cache: true,
        register: function (info) {
            this.types['.' + info.suffix] = info;
            can[info.suffix] = $view[info.suffix] = function (id, text) {
                var renderer, renderFunc;
                if (!text) {
                    renderFunc = function () {
                        if (!renderer) {
                            if (info.fragRenderer) {
                                renderer = info.fragRenderer(null, id);
                            } else {
                                renderer = makeRenderer(info.renderer(null, id));
                            }
                        }
                        return renderer.apply(this, arguments);
                    };
                    renderFunc.render = function () {
                        var textRenderer = info.renderer(null, id);
                        return textRenderer.apply(textRenderer, arguments);
                    };
                    return renderFunc;
                }
                var registeredRenderer = function () {
                    if (!renderer) {
                        if (info.fragRenderer) {
                            renderer = info.fragRenderer(id, text);
                        } else {
                            renderer = info.renderer(id, text);
                        }
                    }
                    return renderer.apply(this, arguments);
                };
                if (info.fragRenderer) {
                    return $view.preload(id, registeredRenderer);
                } else {
                    return $view.preloadStringRenderer(id, registeredRenderer);
                }
            };
        },
        types: {},
        ext: '.ejs',
        registerScript: function (type, id, src) {
            return 'can.view.preloadStringRenderer(\'' + id + '\',' + $view.types['.' + type].script(id, src) + ');';
        },
        preload: function (id, renderer) {
            var def = $view.cached[id] = new can.Deferred().resolve(function (data, helpers) {
                return renderer.call(data, data, helpers);
            });
            def.__view_id = id;
            $view.cachedRenderers[id] = renderer;
            return renderer;
        },
        preloadStringRenderer: function (id, stringRenderer) {
            return this.preload(id, makeRenderer(stringRenderer));
        },
        render: function (view, data, helpers, callback, nodelist) {
            return can.view.renderAs('string', view, data, helpers, callback, nodelist);
        },
        renderTo: function (format, renderer, data, helpers, nodelist) {
            return (format === 'string' && renderer.render ? renderer.render : renderer)(data, helpers, nodelist);
        },
        renderAs: function (format, view, data, helpers, callback, nodelist) {
            if (callback !== undefined && typeof callback.expression === 'string') {
                nodelist = callback;
                callback = undefined;
            }
            if (isFunction(helpers)) {
                callback = helpers;
                helpers = undefined;
            }
            var deferreds = getDeferreds(data);
            var deferred, dataCopy, async, response;
            if (deferreds.length) {
                deferred = new can.Deferred();
                dataCopy = can.extend({}, data);
                deferreds.push(getRenderer(view, true));
                can.when.apply(can, deferreds).then(function (resolved) {
                    var objs = makeArray(arguments), renderer = objs.pop(), result;
                    if (can.isPromise(data)) {
                        dataCopy = usefulPart(resolved);
                    } else {
                        for (var prop in data) {
                            if (can.isPromise(data[prop])) {
                                dataCopy[prop] = usefulPart(objs.shift());
                            }
                        }
                    }
                    result = can.view.renderTo(format, renderer, dataCopy, helpers, nodelist);
                    deferred.resolve(result, dataCopy);
                    if (callback) {
                        callback(result, dataCopy);
                    }
                }, function () {
                    deferred.reject.apply(deferred, arguments);
                });
                return deferred;
            } else {
                async = isFunction(callback);
                deferred = can.__notObserve(getRenderer)(view, async);
                if (async) {
                    response = deferred;
                    deferred.then(function (renderer) {
                        callback(data ? can.view.renderTo(format, renderer, data, helpers, nodelist) : renderer);
                    });
                } else {
                    if (deferred.state() === 'resolved' && deferred.__view_id) {
                        var currentRenderer = $view.cachedRenderers[deferred.__view_id];
                        return data ? can.view.renderTo(format, currentRenderer, data, helpers, nodelist) : currentRenderer;
                    } else {
                        deferred.then(function (renderer) {
                            response = data ? can.view.renderTo(format, renderer, data, helpers, nodelist) : renderer;
                        });
                    }
                }
                return response;
            }
        },
        registerView: function (id, text, type, def) {
            var info = typeof type === 'object' ? type : $view.types[type || $view.ext], renderer;
            if (info.fragRenderer) {
                renderer = info.fragRenderer(id, text);
            } else {
                renderer = makeRenderer(info.renderer(id, text));
            }
            def = def || new can.Deferred();
            if ($view.cache) {
                $view.cached[id] = def;
                def.__view_id = id;
                $view.cachedRenderers[id] = renderer;
            }
            return def.resolve(renderer);
        },
        simpleHelper: function (fn) {
            return function () {
                var realArgs = [];
                var fnArgs = arguments;
                can.each(fnArgs, function (val, i) {
                    if (i <= fnArgs.length) {
                        while (val && val.isComputed) {
                            val = val();
                        }
                        realArgs.push(val);
                    }
                });
                return fn.apply(this, realArgs);
            };
        }
    });
    return can;
});
/*can/view/scope/scope*/
define('can/view/scope/scope', [
    'can/util/util',
    'can/view/scope/compute_data',
    'can/construct/construct',
    'can/map/map',
    'can/list/list',
    'can/view/view',
    'can/compute/compute'
], function (can, makeComputeData) {
    function Scope(context, parent, meta) {
        this._context = context;
        this._parent = parent;
        this._meta = meta || {};
        this.__cache = {};
    }
    can.simpleExtend(Scope, {
        read: can.compute.read,
        Refs: can.Map.extend({ shortName: 'ReferenceMap' }, {}),
        refsScope: function () {
            return new can.view.Scope(new this.Refs());
        }
    });
    can.simpleExtend(Scope.prototype, {
        add: function (context, meta) {
            if (context !== this._context) {
                return new this.constructor(context, this, meta);
            } else {
                return this;
            }
        },
        read: function (attr, options) {
            if (attr === '%root') {
                return { value: this.getRoot() };
            }
            var isInCurrentContext = attr.substr(0, 2) === './', isInParentContext = attr.substr(0, 3) === '../', isCurrentContext = attr === '.' || attr === 'this', isParentContext = attr === '..', isContextBased = isInCurrentContext || isInParentContext || isCurrentContext || isParentContext;
            if (isContextBased && this._meta.notContext) {
                return this._parent.read(attr, options);
            }
            var currentScopeOnly;
            if (isInCurrentContext) {
                currentScopeOnly = true;
                attr = attr.substr(2);
            } else if (isInParentContext || isParentContext) {
                var parent = this._parent;
                while (parent._meta.notContext) {
                    parent = parent._parent;
                }
                if (isParentContext) {
                    return { value: parent._context };
                }
                return parent.read(attr.substr(3) || '.', options);
            } else if (isCurrentContext) {
                return { value: this._context };
            }
            var keyReads = can.compute.read.reads(attr);
            if (keyReads[0].key.charAt(0) === '*') {
                return this.getRefs()._read(keyReads, options, true);
            } else {
                return this._read(keyReads, options, currentScopeOnly);
            }
        },
        _read: function (keyReads, options, currentScopeOnly) {
            var currentScope = this, currentContext, undefinedObserves = [], currentObserve, currentReads, setObserveDepth = -1, currentSetReads, currentSetObserve, readOptions = can.simpleExtend({
                    foundObservable: function (observe, nameIndex) {
                        currentObserve = observe;
                        currentReads = keyReads.slice(nameIndex);
                    },
                    earlyExit: function (parentValue, nameIndex) {
                        if (nameIndex > setObserveDepth) {
                            currentSetObserve = currentObserve;
                            currentSetReads = currentReads;
                            setObserveDepth = nameIndex;
                        }
                    }
                }, options);
            while (currentScope) {
                currentContext = currentScope._context;
                if (currentContext !== null && (typeof currentContext === 'object' || typeof currentContext === 'function')) {
                    var getObserves = can.__trapObserves();
                    var data = can.compute.read(currentContext, keyReads, readOptions);
                    var observes = getObserves();
                    if (data.value !== undefined) {
                        can.__observes(observes);
                        return {
                            scope: currentScope,
                            rootObserve: currentObserve,
                            value: data.value,
                            reads: currentReads
                        };
                    } else {
                        undefinedObserves.push.apply(undefinedObserves, observes);
                    }
                }
                if (currentScopeOnly) {
                    currentScope = null;
                } else {
                    currentScope = currentScope._parent;
                }
            }
            can.__observes(undefinedObserves);
            return {
                setRoot: currentSetObserve,
                reads: currentSetReads,
                value: undefined
            };
        },
        get: can.__notObserve(function (key, options) {
            options = can.simpleExtend({ isArgument: true }, options);
            var res = this.read(key, options);
            return res.value;
        }),
        getScope: function (tester) {
            var scope = this;
            while (scope) {
                if (tester(scope)) {
                    return scope;
                }
                scope = scope._parent;
            }
        },
        getContext: function (tester) {
            var res = this.getScope(tester);
            return res && res._context;
        },
        getRefs: function () {
            return this.getScope(function (scope) {
                return scope._context instanceof Scope.Refs;
            });
        },
        getRoot: function () {
            var cur = this, child = this;
            while (cur._parent) {
                child = cur;
                cur = cur._parent;
            }
            if (cur._context instanceof Scope.Refs) {
                cur = child;
            }
            return cur._context;
        },
        set: function (key, value, options) {
            var dotIndex = key.lastIndexOf('.'), slashIndex = key.lastIndexOf('/'), contextPath, propName;
            if (slashIndex > dotIndex) {
                contextPath = key.substring(0, slashIndex);
                propName = key.substring(slashIndex + 1, key.length);
            } else {
                if (dotIndex !== -1) {
                    contextPath = key.substring(0, dotIndex);
                    propName = key.substring(dotIndex + 1, key.length);
                } else {
                    contextPath = '.';
                    propName = key;
                }
            }
            if (key.charAt(0) === '*') {
                can.compute.set(this.getRefs()._context, key, value, options);
            } else {
                var context = this.read(contextPath, options).value;
                can.compute.set(context, propName, value, options);
            }
        },
        attr: can.__notObserve(function (key, value, options) {
            options = can.simpleExtend({ isArgument: true }, options);
            if (arguments.length === 2) {
                return this.set(key, value, options);
            } else {
                return this.get(key, options);
            }
        }),
        computeData: function (key, options) {
            return makeComputeData(this, key, options);
        },
        compute: function (key, options) {
            return this.computeData(key, options).compute;
        },
        cloneFromRef: function () {
            var contexts = [];
            var scope = this, context, parent;
            while (scope) {
                context = scope._context;
                if (context instanceof Scope.Refs) {
                    parent = scope._parent;
                    break;
                }
                contexts.unshift(context);
                scope = scope._parent;
            }
            if (parent) {
                can.each(contexts, function (context) {
                    parent = parent.add(context);
                });
                return parent;
            } else {
                return this;
            }
        }
    });
    can.view.Scope = Scope;
    function Options(data, parent, meta) {
        if (!data.helpers && !data.partials && !data.tags) {
            data = { helpers: data };
        }
        Scope.call(this, data, parent, meta);
    }
    Options.prototype = new Scope();
    Options.prototype.constructor = Options;
    can.view.Options = Options;
    return Scope;
});
/*can/view/elements*/
define('can/view/elements', [
    'can/util/util',
    'can/view/view'
], function (can) {
    var doc = typeof document !== 'undefined' ? document : null;
    var selectsCommentNodes = doc && function () {
        return can.$(document.createComment('~')).length === 1;
    }();
    var elements = {
        tagToContentPropMap: {
            option: doc && 'textContent' in document.createElement('option') ? 'textContent' : 'innerText',
            textarea: 'value'
        },
        attrMap: can.attr.map,
        attrReg: /([^\s=]+)[\s]*=[\s]*/,
        defaultValue: can.attr.defaultValue,
        tagMap: {
            '': 'span',
            colgroup: 'col',
            table: 'tbody',
            tr: 'td',
            ol: 'li',
            ul: 'li',
            tbody: 'tr',
            thead: 'tr',
            tfoot: 'tr',
            select: 'option',
            optgroup: 'option'
        },
        reverseTagMap: {
            col: 'colgroup',
            tr: 'tbody',
            option: 'select',
            td: 'tr',
            th: 'tr',
            li: 'ul'
        },
        selfClosingTags: { col: true },
        getParentNode: function (el, defaultParentNode) {
            return defaultParentNode && el.parentNode.nodeType === 11 ? defaultParentNode : el.parentNode;
        },
        setAttr: can.attr.set,
        getAttr: can.attr.get,
        removeAttr: can.attr.remove,
        contentText: function (text) {
            if (typeof text === 'string') {
                return text;
            }
            if (!text && text !== 0) {
                return '';
            }
            return '' + text;
        },
        after: function (oldElements, newFrag) {
            var last = oldElements[oldElements.length - 1];
            if (last.nextSibling) {
                can.insertBefore(last.parentNode, newFrag, last.nextSibling, can.document);
            } else {
                can.appendChild(last.parentNode, newFrag, can.document);
            }
        },
        replace: function (oldElements, newFrag) {
            var selectedValue, parentNode = oldElements[0].parentNode;
            if (parentNode.nodeName.toUpperCase() === 'SELECT' && parentNode.selectedIndex >= 0) {
                selectedValue = parentNode.value;
            }
            elements.after(oldElements, newFrag);
            if (can.remove(can.$(oldElements)).length < oldElements.length && !selectsCommentNodes) {
                can.each(oldElements, function (el) {
                    if (el.nodeType === 8) {
                        el.parentNode.removeChild(el);
                    }
                });
            }
            if (selectedValue !== undefined) {
                parentNode.value = selectedValue;
            }
        }
    };
    can.view.elements = elements;
    return elements;
});
/*can/view/callbacks/callbacks*/
define('can/view/callbacks/callbacks', [
    'can/util/util',
    'can/view/view'
], function (can) {
    var attr = can.view.attr = function (attributeName, attrHandler) {
        if (attrHandler) {
            if (typeof attributeName === 'string') {
                attributes[attributeName] = attrHandler;
            } else {
                regExpAttributes.push({
                    match: attributeName,
                    handler: attrHandler
                });
            }
        } else {
            var cb = attributes[attributeName];
            if (!cb) {
                for (var i = 0, len = regExpAttributes.length; i < len; i++) {
                    var attrMatcher = regExpAttributes[i];
                    if (attrMatcher.match.test(attributeName)) {
                        cb = attrMatcher.handler;
                        break;
                    }
                }
            }
            return cb;
        }
    };
    var attributes = {}, regExpAttributes = [], automaticCustomElementCharacters = /[-\:]/;
    var tag = can.view.tag = function (tagName, tagHandler) {
        if (tagHandler) {
            if (can.global.html5) {
                can.global.html5.elements += ' ' + tagName;
                can.global.html5.shivDocument();
            }
            tags[tagName.toLowerCase()] = tagHandler;
        } else {
            var cb = tags[tagName.toLowerCase()];
            if (!cb && automaticCustomElementCharacters.test(tagName)) {
                cb = function () {
                };
            }
            return cb;
        }
    };
    var tags = {};
    can.view.callbacks = {
        _tags: tags,
        _attributes: attributes,
        _regExpAttributes: regExpAttributes,
        tag: tag,
        attr: attr,
        tagHandler: function (el, tagName, tagData) {
            var helperTagCallback = tagData.options.get('tags.' + tagName, { proxyMethods: false }), tagCallback = helperTagCallback || tags[tagName];
            var scope = tagData.scope, res;
            if (tagCallback) {
                res = can.__notObserve(tagCallback)(el, tagData);
            } else {
                res = scope;
            }
            if (res && tagData.subtemplate) {
                if (scope !== res) {
                    scope = scope.add(res);
                }
                var result = tagData.subtemplate(scope, tagData.options);
                var frag = typeof result === 'string' ? can.view.frag(result) : result;
                can.appendChild(el, frag);
            }
        }
    };
    return can.view.callbacks;
});
/*can/view/scanner*/
define('can/view/scanner', [
    'can/view/view',
    './elements',
    'can/view/callbacks/callbacks'
], function (can, elements, viewCallbacks) {
    var newLine = /(\r|\n)+/g, notEndTag = /\//, clean = function (content) {
            return content.split('\\').join('\\\\').split('\n').join('\\n').split('"').join('\\"').split('\t').join('\\t');
        }, getTag = function (tagName, tokens, i) {
            if (tagName) {
                return tagName;
            } else {
                while (i < tokens.length) {
                    if (tokens[i] === '<' && !notEndTag.test(tokens[i + 1])) {
                        return elements.reverseTagMap[tokens[i + 1]] || 'span';
                    }
                    i++;
                }
            }
            return '';
        }, bracketNum = function (content) {
            return --content.split('{').length - --content.split('}').length;
        }, myEval = function (script) {
            eval(script);
        }, attrReg = /([^\s]+)[\s]*=[\s]*$/, startTxt = 'var ___v1ew = [];', finishTxt = 'return ___v1ew.join(\'\')', put_cmd = '___v1ew.push(\n', insert_cmd = put_cmd, htmlTag = null, quote = null, beforeQuote = null, rescan = null, getAttrName = function () {
            var matches = beforeQuote.match(attrReg);
            return matches && matches[1];
        }, status = function () {
            return quote ? '\'' + getAttrName() + '\'' : htmlTag ? 1 : 0;
        }, top = function (stack) {
            return stack[stack.length - 1];
        }, Scanner;
    can.view.Scanner = Scanner = function (options) {
        can.extend(this, {
            text: {},
            tokens: []
        }, options);
        this.text.options = this.text.options || '';
        this.tokenReg = [];
        this.tokenSimple = {
            '<': '<',
            '>': '>',
            '"': '"',
            '\'': '\''
        };
        this.tokenComplex = [];
        this.tokenMap = {};
        for (var i = 0, token; token = this.tokens[i]; i++) {
            if (token[2]) {
                this.tokenReg.push(token[2]);
                this.tokenComplex.push({
                    abbr: token[1],
                    re: new RegExp(token[2]),
                    rescan: token[3]
                });
            } else {
                this.tokenReg.push(token[1]);
                this.tokenSimple[token[1]] = token[0];
            }
            this.tokenMap[token[0]] = token[1];
        }
        this.tokenReg = new RegExp('(' + this.tokenReg.slice(0).concat([
            '<',
            '>',
            '"',
            '\''
        ]).join('|') + ')', 'g');
    };
    Scanner.prototype = {
        helpers: [],
        scan: function (source, name) {
            var tokens = [], last = 0, simple = this.tokenSimple, complex = this.tokenComplex;
            source = source.replace(newLine, '\n');
            if (this.transform) {
                source = this.transform(source);
            }
            source.replace(this.tokenReg, function (whole, part) {
                var offset = arguments[arguments.length - 2];
                if (offset > last) {
                    tokens.push(source.substring(last, offset));
                }
                if (simple[whole]) {
                    tokens.push(whole);
                } else {
                    for (var i = 0, token; token = complex[i]; i++) {
                        if (token.re.test(whole)) {
                            tokens.push(token.abbr);
                            if (token.rescan) {
                                tokens.push(token.rescan(part));
                            }
                            break;
                        }
                    }
                }
                last = offset + part.length;
            });
            if (last < source.length) {
                tokens.push(source.substr(last));
            }
            var content = '', buff = [startTxt + (this.text.start || '')], put = function (content, bonus) {
                    buff.push(put_cmd, '"', clean(content), '"' + (bonus || '') + ');');
                }, endStack = [], lastToken, startTag = null, magicInTag = false, specialStates = {
                    attributeHookups: [],
                    tagHookups: [],
                    lastTagHookup: ''
                }, popTagHookup = function () {
                    specialStates.lastTagHookup = specialStates.tagHookups.pop() + specialStates.tagHookups.length;
                }, tagName = '', tagNames = [], popTagName = false, bracketCount, specialAttribute = false, i = 0, token, tmap = this.tokenMap, attrName;
            htmlTag = quote = beforeQuote = null;
            for (; (token = tokens[i++]) !== undefined;) {
                if (startTag === null) {
                    switch (token) {
                    case tmap.left:
                    case tmap.escapeLeft:
                    case tmap.returnLeft:
                        magicInTag = htmlTag && 1;
                    case tmap.commentLeft:
                        startTag = token;
                        if (content.length) {
                            put(content);
                        }
                        content = '';
                        break;
                    case tmap.escapeFull:
                        magicInTag = htmlTag && 1;
                        rescan = 1;
                        startTag = tmap.escapeLeft;
                        if (content.length) {
                            put(content);
                        }
                        rescan = tokens[i++];
                        content = rescan.content || rescan;
                        if (rescan.before) {
                            put(rescan.before);
                        }
                        tokens.splice(i, 0, tmap.right);
                        break;
                    case tmap.commentFull:
                        break;
                    case tmap.templateLeft:
                        content += tmap.left;
                        break;
                    case '<':
                        if (tokens[i].indexOf('!--') !== 0) {
                            htmlTag = 1;
                            magicInTag = 0;
                        }
                        content += token;
                        break;
                    case '>':
                        htmlTag = 0;
                        var emptyElement = content.substr(content.length - 1) === '/' || content.substr(content.length - 2) === '--', attrs = '';
                        if (specialStates.attributeHookups.length) {
                            attrs = 'attrs: [\'' + specialStates.attributeHookups.join('\',\'') + '\'], ';
                            specialStates.attributeHookups = [];
                        }
                        if (tagName + specialStates.tagHookups.length !== specialStates.lastTagHookup && tagName === top(specialStates.tagHookups)) {
                            if (emptyElement) {
                                content = content.substr(0, content.length - 1);
                            }
                            buff.push(put_cmd, '"', clean(content), '"', ',can.view.pending({tagName:\'' + tagName + '\',' + attrs + 'scope: ' + (this.text.scope || 'this') + this.text.options);
                            if (emptyElement) {
                                buff.push('}));');
                                content = '/>';
                                popTagHookup();
                            } else if (tokens[i] === '<' && tokens[i + 1] === '/' + tagName) {
                                buff.push('}));');
                                content = token;
                                popTagHookup();
                            } else {
                                buff.push(',subtemplate: function(' + this.text.argNames + '){\n' + startTxt + (this.text.start || ''));
                                content = '';
                            }
                        } else if (magicInTag || !popTagName && elements.tagToContentPropMap[tagNames[tagNames.length - 1]] || attrs) {
                            var pendingPart = ',can.view.pending({' + attrs + 'scope: ' + (this.text.scope || 'this') + this.text.options + '}),"';
                            if (emptyElement) {
                                put(content.substr(0, content.length - 1), pendingPart + '/>"');
                            } else {
                                put(content, pendingPart + '>"');
                            }
                            content = '';
                            magicInTag = 0;
                        } else {
                            content += token;
                        }
                        if (emptyElement || popTagName) {
                            tagNames.pop();
                            tagName = tagNames[tagNames.length - 1];
                            popTagName = false;
                        }
                        specialStates.attributeHookups = [];
                        break;
                    case '\'':
                    case '"':
                        if (htmlTag) {
                            if (quote && quote === token) {
                                quote = null;
                                var attr = getAttrName();
                                if (viewCallbacks.attr(attr)) {
                                    specialStates.attributeHookups.push(attr);
                                }
                                if (specialAttribute) {
                                    content += token;
                                    put(content);
                                    buff.push(finishTxt, '}));\n');
                                    content = '';
                                    specialAttribute = false;
                                    break;
                                }
                            } else if (quote === null) {
                                quote = token;
                                beforeQuote = lastToken;
                                attrName = getAttrName();
                                if (tagName === 'img' && attrName === 'src' || attrName === 'style') {
                                    put(content.replace(attrReg, ''));
                                    content = '';
                                    specialAttribute = true;
                                    buff.push(insert_cmd, 'can.view.txt(2,\'' + getTag(tagName, tokens, i) + '\',' + status() + ',this,function(){', startTxt);
                                    put(attrName + '=' + token);
                                    break;
                                }
                            }
                        }
                    default:
                        if (lastToken === '<') {
                            tagName = token.substr(0, 3) === '!--' ? '!--' : token.split(/\s/)[0];
                            var isClosingTag = false, cleanedTagName;
                            if (tagName.indexOf('/') === 0) {
                                isClosingTag = true;
                                cleanedTagName = tagName.substr(1);
                            }
                            if (isClosingTag) {
                                if (top(tagNames) === cleanedTagName) {
                                    tagName = cleanedTagName;
                                    popTagName = true;
                                }
                                if (top(specialStates.tagHookups) === cleanedTagName) {
                                    put(content.substr(0, content.length - 1));
                                    buff.push(finishTxt + '}}) );');
                                    content = '><';
                                    popTagHookup();
                                }
                            } else {
                                if (tagName.lastIndexOf('/') === tagName.length - 1) {
                                    tagName = tagName.substr(0, tagName.length - 1);
                                }
                                if (tagName !== '!--' && viewCallbacks.tag(tagName)) {
                                    if (tagName === 'content' && elements.tagMap[top(tagNames)]) {
                                        token = token.replace('content', elements.tagMap[top(tagNames)]);
                                    }
                                    specialStates.tagHookups.push(tagName);
                                }
                                tagNames.push(tagName);
                            }
                        }
                        content += token;
                        break;
                    }
                } else {
                    switch (token) {
                    case tmap.right:
                    case tmap.returnRight:
                        switch (startTag) {
                        case tmap.left:
                            bracketCount = bracketNum(content);
                            if (bracketCount === 1) {
                                buff.push(insert_cmd, 'can.view.txt(0,\'' + getTag(tagName, tokens, i) + '\',' + status() + ',this,function(){', startTxt, content);
                                endStack.push({
                                    before: '',
                                    after: finishTxt + '}));\n'
                                });
                            } else {
                                last = endStack.length && bracketCount === -1 ? endStack.pop() : { after: ';' };
                                if (last.before) {
                                    buff.push(last.before);
                                }
                                buff.push(content, ';', last.after);
                            }
                            break;
                        case tmap.escapeLeft:
                        case tmap.returnLeft:
                            bracketCount = bracketNum(content);
                            if (bracketCount) {
                                endStack.push({
                                    before: finishTxt,
                                    after: '}));\n'
                                });
                            }
                            var escaped = startTag === tmap.escapeLeft ? 1 : 0, commands = {
                                    insert: insert_cmd,
                                    tagName: getTag(tagName, tokens, i),
                                    status: status(),
                                    specialAttribute: specialAttribute
                                };
                            for (var ii = 0; ii < this.helpers.length; ii++) {
                                var helper = this.helpers[ii];
                                if (helper.name.test(content)) {
                                    content = helper.fn(content, commands);
                                    if (helper.name.source === /^>[\s]*\w*/.source) {
                                        escaped = 0;
                                    }
                                    break;
                                }
                            }
                            if (typeof content === 'object') {
                                if (content.startTxt && content.end && specialAttribute) {
                                    buff.push(insert_cmd, 'can.view.toStr( ', content.content, '() ) );');
                                } else {
                                    if (content.startTxt) {
                                        buff.push(insert_cmd, 'can.view.txt(\n' + (typeof status() === 'string' || (content.escaped != null ? content.escaped : escaped)) + ',\n\'' + tagName + '\',\n' + status() + ',\nthis,\n');
                                    } else if (content.startOnlyTxt) {
                                        buff.push(insert_cmd, 'can.view.onlytxt(this,\n');
                                    }
                                    buff.push(content.content);
                                    if (content.end) {
                                        buff.push('));');
                                    }
                                }
                            } else if (specialAttribute) {
                                buff.push(insert_cmd, content, ');');
                            } else {
                                buff.push(insert_cmd, 'can.view.txt(\n' + (typeof status() === 'string' || escaped) + ',\n\'' + tagName + '\',\n' + status() + ',\nthis,\nfunction(){ ' + (this.text.escape || '') + 'return ', content, bracketCount ? startTxt : '}));\n');
                            }
                            if (rescan && rescan.after && rescan.after.length) {
                                put(rescan.after.length);
                                rescan = null;
                            }
                            break;
                        }
                        startTag = null;
                        content = '';
                        break;
                    case tmap.templateLeft:
                        content += tmap.left;
                        break;
                    default:
                        content += token;
                        break;
                    }
                }
                lastToken = token;
            }
            if (content.length) {
                put(content);
            }
            buff.push(';');
            var template = buff.join(''), out = { out: (this.text.outStart || '') + template + ' ' + finishTxt + (this.text.outEnd || '') };
            myEval.call(out, 'this.fn = (function(' + this.text.argNames + '){' + out.out + '});\r\n//# sourceURL=' + name + '.js');
            return out;
        }
    };
    can.view.pending = function (viewData) {
        var hooks = can.view.getHooks();
        return can.view.hook(function (el) {
            can.each(hooks, function (fn) {
                fn(el);
            });
            viewData.templateType = 'legacy';
            if (viewData.tagName) {
                viewCallbacks.tagHandler(el, viewData.tagName, viewData);
            }
            can.each(viewData && viewData.attrs || [], function (attributeName) {
                viewData.attributeName = attributeName;
                var callback = viewCallbacks.attr(attributeName);
                if (callback) {
                    callback(el, viewData);
                }
            });
        });
    };
    can.view.tag('content', function (el, tagData) {
        return tagData.scope;
    });
    can.view.Scanner = Scanner;
    return Scanner;
});
/*can/view/node_lists/node_lists*/
define('can/view/node_lists/node_lists', [
    'can/util/util',
    'can/view/elements'
], function (can) {
    var canExpando = true;
    try {
        document.createTextNode('')._ = 0;
    } catch (ex) {
        canExpando = false;
    }
    var nodeMap = {}, textNodeMap = {}, expando = 'ejs_' + Math.random(), _id = 0, id = function (node, localMap) {
            var _textNodeMap = localMap || textNodeMap;
            var id = readId(node, _textNodeMap);
            if (id) {
                return id;
            } else {
                if (canExpando || node.nodeType !== 3) {
                    ++_id;
                    return node[expando] = (node.nodeName ? 'element_' : 'obj_') + _id;
                } else {
                    ++_id;
                    _textNodeMap['text_' + _id] = node;
                    return 'text_' + _id;
                }
            }
        }, readId = function (node, textNodeMap) {
            if (canExpando || node.nodeType !== 3) {
                return node[expando];
            } else {
                for (var textNodeID in textNodeMap) {
                    if (textNodeMap[textNodeID] === node) {
                        return textNodeID;
                    }
                }
            }
        }, splice = [].splice, push = [].push, itemsInChildListTree = function (list) {
            var count = 0;
            for (var i = 0, len = list.length; i < len; i++) {
                var item = list[i];
                if (item.nodeType) {
                    count++;
                } else {
                    count += itemsInChildListTree(item);
                }
            }
            return count;
        }, replacementMap = function (replacements, idMap) {
            var map = {};
            for (var i = 0, len = replacements.length; i < len; i++) {
                var node = nodeLists.first(replacements[i]);
                map[id(node, idMap)] = replacements[i];
            }
            return map;
        }, addUnfoundAsDeepChildren = function (list, rMap, foundIds) {
            for (var repId in rMap) {
                if (!foundIds[repId]) {
                    list.newDeepChildren.push(rMap[repId]);
                }
            }
        };
    var nodeLists = {
        id: id,
        update: function (nodeList, newNodes) {
            var oldNodes = nodeLists.unregisterChildren(nodeList);
            newNodes = can.makeArray(newNodes);
            var oldListLength = nodeList.length;
            splice.apply(nodeList, [
                0,
                oldListLength
            ].concat(newNodes));
            if (nodeList.replacements) {
                nodeLists.nestReplacements(nodeList);
                nodeList.deepChildren = nodeList.newDeepChildren;
                nodeList.newDeepChildren = [];
            } else {
                nodeLists.nestList(nodeList);
            }
            return oldNodes;
        },
        nestReplacements: function (list) {
            var index = 0, idMap = {}, rMap = replacementMap(list.replacements, idMap), rCount = list.replacements.length, foundIds = {};
            while (index < list.length && rCount) {
                var node = list[index], nodeId = readId(node, idMap), replacement = rMap[nodeId];
                if (replacement) {
                    list.splice(index, itemsInChildListTree(replacement), replacement);
                    foundIds[nodeId] = true;
                    rCount--;
                }
                index++;
            }
            if (rCount) {
                addUnfoundAsDeepChildren(list, rMap, foundIds);
            }
            list.replacements = [];
        },
        nestList: function (list) {
            var index = 0;
            while (index < list.length) {
                var node = list[index], childNodeList = nodeMap[id(node)];
                if (childNodeList) {
                    if (childNodeList !== list) {
                        list.splice(index, itemsInChildListTree(childNodeList), childNodeList);
                    }
                } else {
                    nodeMap[id(node)] = list;
                }
                index++;
            }
        },
        last: function (nodeList) {
            var last = nodeList[nodeList.length - 1];
            if (last.nodeType) {
                return last;
            } else {
                return nodeLists.last(last);
            }
        },
        first: function (nodeList) {
            var first = nodeList[0];
            if (first.nodeType) {
                return first;
            } else {
                return nodeLists.first(first);
            }
        },
        flatten: function (nodeList) {
            var items = [];
            for (var i = 0; i < nodeList.length; i++) {
                var item = nodeList[i];
                if (item.nodeType) {
                    items.push(item);
                } else {
                    items.push.apply(items, nodeLists.flatten(item));
                }
            }
            return items;
        },
        register: function (nodeList, unregistered, parent, directlyNested) {
            can.cid(nodeList);
            nodeList.unregistered = unregistered;
            nodeList.parentList = parent;
            nodeList.nesting = parent && typeof parent.nesting !== 'undefined' ? parent.nesting + 1 : 0;
            if (parent) {
                nodeList.deepChildren = [];
                nodeList.newDeepChildren = [];
                nodeList.replacements = [];
                if (parent !== true) {
                    if (directlyNested) {
                        parent.replacements.push(nodeList);
                    } else {
                        parent.newDeepChildren.push(nodeList);
                    }
                }
            } else {
                nodeLists.nestList(nodeList);
            }
            return nodeList;
        },
        unregisterChildren: function (nodeList) {
            var nodes = [];
            can.each(nodeList, function (node) {
                if (node.nodeType) {
                    if (!nodeList.replacements) {
                        delete nodeMap[id(node)];
                    }
                    nodes.push(node);
                } else {
                    push.apply(nodes, nodeLists.unregister(node, true));
                }
            });
            can.each(nodeList.deepChildren, function (nodeList) {
                nodeLists.unregister(nodeList, true);
            });
            return nodes;
        },
        unregister: function (nodeList, isChild) {
            var nodes = nodeLists.unregisterChildren(nodeList, true);
            if (nodeList.unregistered) {
                var unregisteredCallback = nodeList.unregistered;
                nodeList.replacements = nodeList.unregistered = null;
                if (!isChild) {
                    var deepChildren = nodeList.parentList && nodeList.parentList.deepChildren;
                    if (deepChildren) {
                        var index = deepChildren.indexOf(nodeList);
                        if (index !== -1) {
                            deepChildren.splice(index, 1);
                        }
                    }
                }
                unregisteredCallback();
            }
            return nodes;
        },
        nodeMap: nodeMap
    };
    can.view.nodeLists = nodeLists;
    return nodeLists;
});
/*can/view/parser/parser*/
define('can/view/parser/parser', [], function () {
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    function handleIntermediate(intermediate, handler) {
        for (var i = 0, len = intermediate.length; i < len; i++) {
            var item = intermediate[i];
            handler[item.tokenType].apply(handler, item.args);
        }
        return intermediate;
    }
    var alphaNumeric = 'A-Za-z0-9', alphaNumericHU = '-:_' + alphaNumeric, attributeNames = '[^=>\\s\\/]+', spaceEQspace = '\\s*=\\s*', singleCurly = '\\{[^\\}\\{]\\}', doubleCurly = '\\{\\{[^\\}]\\}\\}\\}?', attributeEqAndValue = '(?:' + spaceEQspace + '(?:' + '(?:' + doubleCurly + ')|(?:' + singleCurly + ')|(?:"[^"]*")|(?:\'[^\']*\')|[^>\\s]+))?', matchStash = '\\{\\{[^\\}]*\\}\\}\\}?', stash = '\\{\\{([^\\}]*)\\}\\}\\}?', startTag = new RegExp('^<([' + alphaNumeric + '][' + alphaNumericHU + ']*)' + '(' + '(?:\\s*' + '(?:(?:' + '(?:' + attributeNames + ')?' + attributeEqAndValue + ')|' + '(?:' + matchStash + ')+)' + ')*' + ')\\s*(\\/?)>'), endTag = new RegExp('^<\\/([' + alphaNumericHU + ']+)[^>]*>'), mustache = new RegExp(stash, 'g'), txtBreak = /<|\{\{/, space = /\s/;
    var empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');
    var block = makeMap('a,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video');
    var inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var');
    var caseMatters = makeMap('altGlyph,altGlyphDef,altGlyphItem,animateColor,animateMotion,animateTransform,clipPath,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,foreignObject,glyphRef,linearGradient,radialGradient,textPath');
    var closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');
    var special = makeMap('script');
    var tokenTypes = 'start,end,close,attrStart,attrEnd,attrValue,chars,comment,special,done'.split(',');
    var fn = function () {
    };
    var HTMLParser = function (html, handler, returnIntermediate) {
        if (typeof html === 'object') {
            return handleIntermediate(html, handler);
        }
        var intermediate = [];
        handler = handler || {};
        if (returnIntermediate) {
            each(tokenTypes, function (name) {
                var callback = handler[name] || fn;
                handler[name] = function () {
                    if (callback.apply(this, arguments) !== false) {
                        intermediate.push({
                            tokenType: name,
                            args: [].slice.call(arguments, 0)
                        });
                    }
                };
            });
        }
        function parseStartTag(tag, tagName, rest, unary) {
            tagName = caseMatters[tagName] ? tagName : tagName.toLowerCase();
            if (block[tagName] && !inline[tagName]) {
                var last = stack.last();
                while (last && inline[last] && !block[last]) {
                    parseEndTag('', last);
                    last = stack.last();
                }
            }
            if (closeSelf[tagName] && stack.last() === tagName) {
                parseEndTag('', tagName);
            }
            unary = empty[tagName] || !!unary;
            handler.start(tagName, unary);
            if (!unary) {
                stack.push(tagName);
            }
            HTMLParser.parseAttrs(rest, handler);
            handler.end(tagName, unary);
        }
        function parseEndTag(tag, tagName) {
            var pos;
            if (!tagName) {
                pos = 0;
            } else {
                tagName = caseMatters[tagName] ? tagName : tagName.toLowerCase();
                for (pos = stack.length - 1; pos >= 0; pos--) {
                    if (stack[pos] === tagName) {
                        break;
                    }
                }
            }
            if (pos >= 0) {
                for (var i = stack.length - 1; i >= pos; i--) {
                    if (handler.close) {
                        handler.close(stack[i]);
                    }
                }
                stack.length = pos;
            }
        }
        function parseMustache(mustache, inside) {
            if (handler.special) {
                handler.special(inside);
            }
        }
        var callChars = function () {
            if (charsText) {
                if (handler.chars) {
                    handler.chars(charsText);
                }
            }
            charsText = '';
        };
        var index, chars, match, stack = [], last = html, charsText = '';
        stack.last = function () {
            return this[this.length - 1];
        };
        while (html) {
            chars = true;
            if (!stack.last() || !special[stack.last()]) {
                if (html.indexOf('<!--') === 0) {
                    index = html.indexOf('-->');
                    if (index >= 0) {
                        callChars();
                        if (handler.comment) {
                            handler.comment(html.substring(4, index));
                        }
                        html = html.substring(index + 3);
                        chars = false;
                    }
                } else if (html.indexOf('</') === 0) {
                    match = html.match(endTag);
                    if (match) {
                        callChars();
                        html = html.substring(match[0].length);
                        match[0].replace(endTag, parseEndTag);
                        chars = false;
                    }
                } else if (html.indexOf('<') === 0) {
                    match = html.match(startTag);
                    if (match) {
                        callChars();
                        html = html.substring(match[0].length);
                        match[0].replace(startTag, parseStartTag);
                        chars = false;
                    }
                } else if (html.indexOf('{{') === 0) {
                    match = html.match(mustache);
                    if (match) {
                        callChars();
                        html = html.substring(match[0].length);
                        match[0].replace(mustache, parseMustache);
                    }
                }
                if (chars) {
                    index = html.search(txtBreak);
                    if (index === 0 && html === last) {
                        charsText += html.charAt(0);
                        html = html.substr(1);
                        index = html.search(txtBreak);
                    }
                    var text = index < 0 ? html : html.substring(0, index);
                    html = index < 0 ? '' : html.substring(index);
                    if (text) {
                        charsText += text;
                    }
                }
            } else {
                html = html.replace(new RegExp('([\\s\\S]*?)</' + stack.last() + '[^>]*>'), function (all, text) {
                    text = text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g, '$1$2');
                    if (handler.chars) {
                        handler.chars(text);
                    }
                    return '';
                });
                parseEndTag('', stack.last());
            }
            if (html === last) {
                throw new Error('Parse Error: ' + html);
            }
            last = html;
        }
        callChars();
        parseEndTag();
        handler.done();
        return intermediate;
    };
    var callAttrStart = function (state, curIndex, handler, rest) {
        state.attrStart = rest.substring(typeof state.nameStart === 'number' ? state.nameStart : curIndex, curIndex);
        handler.attrStart(state.attrStart);
        state.inName = false;
    };
    var callAttrEnd = function (state, curIndex, handler, rest) {
        if (state.valueStart !== undefined && state.valueStart < curIndex) {
            handler.attrValue(rest.substring(state.valueStart, curIndex));
        } else if (!state.inValue) {
        }
        handler.attrEnd(state.attrStart);
        state.attrStart = undefined;
        state.valueStart = undefined;
        state.inValue = false;
        state.inName = false;
        state.lookingForEq = false;
        state.inQuote = false;
        state.lookingForName = true;
    };
    HTMLParser.parseAttrs = function (rest, handler) {
        if (!rest) {
            return;
        }
        var i = 0;
        var curIndex;
        var state = {
            inDoubleCurly: false,
            inName: false,
            nameStart: undefined,
            inValue: false,
            valueStart: undefined,
            inQuote: false,
            attrStart: undefined,
            lookingForName: true,
            lookingForValue: false,
            lookingForEq: false
        };
        while (i < rest.length) {
            curIndex = i;
            var cur = rest.charAt(i);
            var next = rest.charAt(i + 1);
            var nextNext = rest.charAt(i + 2);
            i++;
            if (cur === '{' && next === '{') {
                if (state.inValue && curIndex > state.valueStart) {
                    handler.attrValue(rest.substring(state.valueStart, curIndex));
                } else if (state.inName && state.nameStart < curIndex) {
                    callAttrStart(state, curIndex, handler, rest);
                    callAttrEnd(state, curIndex, handler, rest);
                } else if (state.lookingForValue) {
                    state.inValue = true;
                } else if (state.lookingForEq && state.attrStart) {
                    callAttrEnd(state, curIndex, handler, rest);
                }
                state.inDoubleCurly = true;
                state.doubleCurlyStart = curIndex + 2;
                i++;
            } else if (state.inDoubleCurly) {
                if (cur === '}' && next === '}') {
                    var isTriple = nextNext === '}' ? 1 : 0;
                    handler.special(rest.substring(state.doubleCurlyStart, curIndex));
                    state.inDoubleCurly = false;
                    if (state.inValue) {
                        state.valueStart = curIndex + 2 + isTriple;
                    }
                    i += 1 + isTriple;
                }
            } else if (state.inValue) {
                if (state.inQuote) {
                    if (cur === state.inQuote) {
                        callAttrEnd(state, curIndex, handler, rest);
                    }
                } else if (space.test(cur)) {
                    callAttrEnd(state, curIndex, handler, rest);
                }
            } else if (cur === '=' && (state.lookingForEq || state.lookingForName || state.inName)) {
                if (!state.attrStart) {
                    callAttrStart(state, curIndex, handler, rest);
                }
                state.lookingForValue = true;
                state.lookingForEq = false;
                state.lookingForName = false;
            } else if (state.inName) {
                if (space.test(cur)) {
                    callAttrStart(state, curIndex, handler, rest);
                    state.lookingForEq = true;
                }
            } else if (state.lookingForName) {
                if (!space.test(cur)) {
                    if (state.attrStart) {
                        callAttrEnd(state, curIndex, handler, rest);
                    }
                    state.nameStart = curIndex;
                    state.inName = true;
                }
            } else if (state.lookingForValue) {
                if (!space.test(cur)) {
                    state.lookingForValue = false;
                    state.inValue = true;
                    if (cur === '\'' || cur === '"') {
                        state.inQuote = cur;
                        state.valueStart = curIndex + 1;
                    } else {
                        state.valueStart = curIndex;
                    }
                }
            }
        }
        if (state.inName) {
            callAttrStart(state, curIndex + 1, handler, rest);
            callAttrEnd(state, curIndex + 1, handler, rest);
        } else if (state.lookingForEq) {
            callAttrEnd(state, curIndex + 1, handler, rest);
        } else if (state.inValue) {
            callAttrEnd(state, curIndex + 1, handler, rest);
        }
    };
    return HTMLParser;
});
/*can/util/array/diff*/
define('can/util/array/diff', [], function () {
    var slice = [].slice;
    return function (oldList, newList) {
        var oldIndex = 0, newIndex = 0, oldLength = oldList.length, newLength = newList.length, patches = [];
        while (oldIndex < oldLength && newIndex < newLength) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (oldItem === newItem) {
                oldIndex++;
                newIndex++;
                continue;
            }
            if (newIndex + 1 < newLength && newList[newIndex + 1] === oldItem) {
                patches.push({
                    index: newIndex,
                    deleteCount: 0,
                    insert: [newList[newIndex]]
                });
                oldIndex++;
                newIndex += 2;
                continue;
            } else if (oldIndex + 1 < oldLength && oldList[oldIndex + 1] === newItem) {
                patches.push({
                    index: newIndex,
                    deleteCount: 1,
                    insert: []
                });
                oldIndex += 2;
                newIndex++;
                continue;
            } else {
                patches.push({
                    index: newIndex,
                    deleteCount: oldLength - oldIndex,
                    insert: slice.call(newList, newIndex)
                });
                return patches;
            }
        }
        if (newIndex === newLength && oldIndex === oldLength) {
            return patches;
        }
        patches.push({
            index: newIndex,
            deleteCount: oldLength - oldIndex,
            insert: slice.call(newList, newIndex)
        });
        return patches;
    };
});
/*can/view/live/live*/
define('can/view/live/live', [
    'can/util/util',
    'can/view/elements',
    'can/view/view',
    'can/view/node_lists/node_lists',
    'can/view/parser/parser',
    'can/util/array/diff'
], function (can, elements, view, nodeLists, parser, diff) {
    elements = elements || can.view.elements;
    nodeLists = nodeLists || can.view.NodeLists;
    parser = parser || can.view.parser;
    var setup = function (el, bind, unbind) {
            var tornDown = false, teardown = function () {
                    if (!tornDown) {
                        tornDown = true;
                        unbind(data);
                        can.unbind.call(el, 'removed', teardown);
                    }
                    return true;
                }, data = {
                    teardownCheck: function (parent) {
                        return parent ? false : teardown();
                    }
                };
            can.bind.call(el, 'removed', teardown);
            bind(data);
            return data;
        }, getChildNodes = function (node) {
            var childNodes = node.childNodes;
            if ('length' in childNodes) {
                return childNodes;
            } else {
                var cur = node.firstChild;
                var nodes = [];
                while (cur) {
                    nodes.push(cur);
                    cur = cur.nextSibling;
                }
                return nodes;
            }
        }, listen = function (el, compute, change) {
            return setup(el, function () {
                compute.computeInstance.bind('change', change);
            }, function (data) {
                compute.computeInstance.unbind('change', change);
                if (data.nodeList) {
                    nodeLists.unregister(data.nodeList);
                }
            });
        }, getAttributeParts = function (newVal) {
            var attrs = {}, attr;
            parser.parseAttrs(newVal, {
                attrStart: function (name) {
                    attrs[name] = '';
                    attr = name;
                },
                attrValue: function (value) {
                    attrs[attr] += value;
                },
                attrEnd: function () {
                }
            });
            return attrs;
        }, splice = [].splice, isNode = function (obj) {
            return obj && obj.nodeType;
        }, addTextNodeIfNoChildren = function (frag) {
            if (!frag.firstChild) {
                frag.appendChild(frag.ownerDocument.createTextNode(''));
            }
        }, getLiveFragment = function (itemHTML) {
            var gotText = typeof itemHTML === 'string', itemFrag = can.frag(itemHTML);
            return gotText ? can.view.hookup(itemFrag) : itemFrag;
        }, renderAndAddToNodeLists = function (newNodeLists, parentNodeList, render, context, args) {
            var itemNodeList = [];
            if (parentNodeList) {
                nodeLists.register(itemNodeList, null, true, true);
                itemNodeList.parentList = parentNodeList;
                itemNodeList.expression = '#each SUBEXPRESSION';
            }
            var itemHTML = render.apply(context, args.concat([itemNodeList])), itemFrag = getLiveFragment(itemHTML);
            var childNodes = can.makeArray(getChildNodes(itemFrag));
            if (parentNodeList) {
                nodeLists.update(itemNodeList, childNodes);
                newNodeLists.push(itemNodeList);
            } else {
                newNodeLists.push(nodeLists.register(childNodes));
            }
            return itemFrag;
        }, removeFromNodeList = function (masterNodeList, index, length) {
            var removedMappings = masterNodeList.splice(index + 1, length), itemsToRemove = [];
            can.each(removedMappings, function (nodeList) {
                var nodesToRemove = nodeLists.unregister(nodeList);
                [].push.apply(itemsToRemove, nodesToRemove);
            });
            return itemsToRemove;
        }, addFalseyIfEmpty = function (list, falseyRender, masterNodeList, nodeList) {
            if (falseyRender && list.length === 0) {
                var falseyNodeLists = [];
                var falseyFrag = renderAndAddToNodeLists(falseyNodeLists, nodeList, falseyRender, list, [list]);
                elements.after([masterNodeList[0]], falseyFrag);
                masterNodeList.push(falseyNodeLists[0]);
            }
        }, childMutationCallbacks = {};
    var live = {
        registerChildMutationCallback: function (tag, callback) {
            if (callback) {
                childMutationCallbacks[tag] = callback;
            } else {
                return childMutationCallbacks[tag];
            }
        },
        callChildMutationCallback: function (el) {
            var callback = el && childMutationCallbacks[el.nodeName.toLowerCase()];
            if (callback) {
                callback(el);
            }
        },
        list: function (el, compute, render, context, parentNode, nodeList, falseyRender) {
            var masterNodeList = nodeList || [el], indexMap = [], afterPreviousEvents = false, isTornDown = false, add = function (ev, items, index) {
                    if (!afterPreviousEvents) {
                        return;
                    }
                    var frag = text.ownerDocument.createDocumentFragment(), newNodeLists = [], newIndicies = [];
                    can.each(items, function (item, key) {
                        var itemIndex = can.compute(key + index), itemFrag = renderAndAddToNodeLists(newNodeLists, nodeList, render, context, [
                                item,
                                itemIndex
                            ]);
                        frag.appendChild(itemFrag);
                        newIndicies.push(itemIndex);
                    });
                    var masterListIndex = index + 1;
                    if (!indexMap.length) {
                        var falseyItemsToRemove = removeFromNodeList(masterNodeList, 0, masterNodeList.length - 1);
                        can.remove(can.$(falseyItemsToRemove));
                    }
                    if (!masterNodeList[masterListIndex]) {
                        elements.after(masterListIndex === 1 ? [text] : [nodeLists.last(masterNodeList[masterListIndex - 1])], frag);
                    } else {
                        var el = nodeLists.first(masterNodeList[masterListIndex]);
                        can.insertBefore(el.parentNode, frag, el);
                    }
                    splice.apply(masterNodeList, [
                        masterListIndex,
                        0
                    ].concat(newNodeLists));
                    splice.apply(indexMap, [
                        index,
                        0
                    ].concat(newIndicies));
                    for (var i = index + newIndicies.length, len = indexMap.length; i < len; i++) {
                        indexMap[i](i);
                    }
                    if (ev.callChildMutationCallback !== false) {
                        live.callChildMutationCallback(text.parentNode);
                    }
                }, set = function (ev, newVal, index) {
                    remove({}, { length: 1 }, index, true);
                    add({}, [newVal], index);
                }, remove = function (ev, items, index, duringTeardown, fullTeardown) {
                    if (!afterPreviousEvents) {
                        return;
                    }
                    if (!duringTeardown && data.teardownCheck(text.parentNode)) {
                        return;
                    }
                    if (index < 0) {
                        index = indexMap.length + index;
                    }
                    var itemsToRemove = removeFromNodeList(masterNodeList, index, items.length);
                    indexMap.splice(index, items.length);
                    for (var i = index, len = indexMap.length; i < len; i++) {
                        indexMap[i](i);
                    }
                    if (!fullTeardown) {
                        addFalseyIfEmpty(list, falseyRender, masterNodeList, nodeList);
                        can.remove(can.$(itemsToRemove));
                        if (ev.callChildMutationCallback !== false) {
                            live.callChildMutationCallback(text.parentNode);
                        }
                    } else {
                        nodeLists.unregister(masterNodeList);
                    }
                }, move = function (ev, item, newIndex, currentIndex) {
                    if (!afterPreviousEvents) {
                        return;
                    }
                    newIndex = newIndex + 1;
                    currentIndex = currentIndex + 1;
                    var referenceNodeList = masterNodeList[newIndex];
                    var movedElements = can.frag(nodeLists.flatten(masterNodeList[currentIndex]));
                    var referenceElement;
                    if (currentIndex < newIndex) {
                        referenceElement = nodeLists.last(referenceNodeList).nextSibling;
                    } else {
                        referenceElement = nodeLists.first(referenceNodeList);
                    }
                    var parentNode = masterNodeList[0].parentNode;
                    parentNode.insertBefore(movedElements, referenceElement);
                    var temp = masterNodeList[currentIndex];
                    [].splice.apply(masterNodeList, [
                        currentIndex,
                        1
                    ]);
                    [].splice.apply(masterNodeList, [
                        newIndex,
                        0,
                        temp
                    ]);
                    newIndex = newIndex - 1;
                    currentIndex = currentIndex - 1;
                    var indexCompute = indexMap[currentIndex];
                    [].splice.apply(indexMap, [
                        currentIndex,
                        1
                    ]);
                    [].splice.apply(indexMap, [
                        newIndex,
                        0,
                        indexCompute
                    ]);
                    var i = Math.min(currentIndex, newIndex);
                    var len = indexMap.length;
                    for (i, len; i < len; i++) {
                        indexMap[i](i);
                    }
                    if (ev.callChildMutationCallback !== false) {
                        live.callChildMutationCallback(text.parentNode);
                    }
                }, text = el.ownerDocument.createTextNode(''), list, teardownList = function (fullTeardown) {
                    if (list && list.unbind) {
                        list.unbind('add', add).unbind('set', set).unbind('remove', remove).unbind('move', move);
                    }
                    remove({ callChildMutationCallback: !!fullTeardown }, { length: masterNodeList.length - 1 }, 0, true, fullTeardown);
                }, updateList = function (ev, newList, oldList) {
                    if (isTornDown) {
                        return;
                    }
                    afterPreviousEvents = true;
                    if (newList && oldList) {
                        list = newList || [];
                        var patches = diff(oldList, newList);
                        if (oldList.unbind) {
                            oldList.unbind('add', add).unbind('set', set).unbind('remove', remove).unbind('move', move);
                        }
                        for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
                            var patch = patches[i];
                            if (patch.deleteCount) {
                                remove({ callChildMutationCallback: false }, { length: patch.deleteCount }, patch.index, true);
                            }
                            if (patch.insert.length) {
                                add({ callChildMutationCallback: false }, patch.insert, patch.index);
                            }
                        }
                    } else {
                        if (oldList) {
                            teardownList();
                        }
                        list = newList || [];
                        add({ callChildMutationCallback: false }, list, 0);
                        addFalseyIfEmpty(list, falseyRender, masterNodeList, nodeList);
                    }
                    live.callChildMutationCallback(text.parentNode);
                    afterPreviousEvents = false;
                    if (list.bind) {
                        list.bind('add', add).bind('set', set).bind('remove', remove).bind('move', move);
                    }
                    can.batch.afterPreviousEvents(function () {
                        afterPreviousEvents = true;
                    });
                };
            parentNode = elements.getParentNode(el, parentNode);
            var data = setup(parentNode, function () {
                if (can.isFunction(compute)) {
                    compute.bind('change', updateList);
                }
            }, function () {
                if (can.isFunction(compute)) {
                    compute.unbind('change', updateList);
                }
                teardownList(true);
            });
            if (!nodeList) {
                live.replace(masterNodeList, text, data.teardownCheck);
            } else {
                elements.replace(masterNodeList, text);
                nodeLists.update(masterNodeList, [text]);
                nodeList.unregistered = function () {
                    data.teardownCheck();
                    isTornDown = true;
                };
            }
            updateList({}, can.isFunction(compute) ? compute() : compute);
        },
        html: function (el, compute, parentNode, nodeList) {
            var data;
            parentNode = elements.getParentNode(el, parentNode);
            data = listen(parentNode, compute, function (ev, newVal, oldVal) {
                var attached = nodeLists.first(nodes).parentNode;
                if (attached) {
                    makeAndPut(newVal);
                }
                var pn = nodeLists.first(nodes).parentNode;
                data.teardownCheck(pn);
                live.callChildMutationCallback(pn);
            });
            var nodes = nodeList || [el], makeAndPut = function (val) {
                    var isFunction = typeof val === 'function', aNode = isNode(val), frag = can.frag(isFunction ? '' : val), oldNodes = can.makeArray(nodes);
                    addTextNodeIfNoChildren(frag);
                    if (!aNode && !isFunction) {
                        frag = can.view.hookup(frag, parentNode);
                    }
                    oldNodes = nodeLists.update(nodes, getChildNodes(frag));
                    if (isFunction) {
                        val(frag.firstChild);
                    }
                    elements.replace(oldNodes, frag);
                };
            data.nodeList = nodes;
            if (!nodeList) {
                nodeLists.register(nodes, data.teardownCheck);
            } else {
                nodeList.unregistered = data.teardownCheck;
            }
            makeAndPut(compute());
        },
        replace: function (nodes, val, teardown) {
            var oldNodes = nodes.slice(0), frag = can.frag(val);
            nodeLists.register(nodes, teardown);
            if (typeof val === 'string') {
                frag = can.view.hookup(frag, nodes[0].parentNode);
            }
            nodeLists.update(nodes, getChildNodes(frag));
            elements.replace(oldNodes, frag);
            return nodes;
        },
        text: function (el, compute, parentNode, nodeList) {
            var parent = elements.getParentNode(el, parentNode);
            var data = listen(parent, compute, function (ev, newVal, oldVal) {
                if (typeof node.nodeValue !== 'unknown') {
                    node.nodeValue = can.view.toStr(newVal);
                }
                data.teardownCheck(node.parentNode);
            });
            var node = el.ownerDocument.createTextNode(can.view.toStr(compute()));
            if (nodeList) {
                nodeList.unregistered = data.teardownCheck;
                data.nodeList = nodeList;
                nodeLists.update(nodeList, [node]);
                elements.replace([el], node);
            } else {
                data.nodeList = live.replace([el], node, data.teardownCheck);
            }
        },
        setAttributes: function (el, newVal) {
            var attrs = getAttributeParts(newVal);
            for (var name in attrs) {
                can.attr.set(el, name, attrs[name]);
            }
        },
        attributes: function (el, compute, currentValue) {
            var oldAttrs = {};
            var setAttrs = function (newVal) {
                var newAttrs = getAttributeParts(newVal), name;
                for (name in newAttrs) {
                    var newValue = newAttrs[name], oldValue = oldAttrs[name];
                    if (newValue !== oldValue) {
                        can.attr.set(el, name, newValue);
                    }
                    delete oldAttrs[name];
                }
                for (name in oldAttrs) {
                    elements.removeAttr(el, name);
                }
                oldAttrs = newAttrs;
            };
            listen(el, compute, function (ev, newVal) {
                setAttrs(newVal);
            });
            if (arguments.length >= 3) {
                oldAttrs = getAttributeParts(currentValue);
            } else {
                setAttrs(compute());
            }
        },
        attributePlaceholder: '__!!__',
        attributeReplace: /__!!__/g,
        attribute: function (el, attributeName, compute) {
            listen(el, compute, function (ev, newVal) {
                elements.setAttr(el, attributeName, hook.render());
            });
            var wrapped = can.$(el), hooks;
            hooks = can.data(wrapped, 'hooks');
            if (!hooks) {
                can.data(wrapped, 'hooks', hooks = {});
            }
            var attr = String(elements.getAttr(el, attributeName)), parts = attr.split(live.attributePlaceholder), goodParts = [], hook;
            goodParts.push(parts.shift(), parts.join(live.attributePlaceholder));
            if (hooks[attributeName]) {
                hooks[attributeName].computes.push(compute);
            } else {
                hooks[attributeName] = {
                    render: function () {
                        var i = 0, newAttr = attr ? attr.replace(live.attributeReplace, function () {
                                return elements.contentText(hook.computes[i++]());
                            }) : elements.contentText(hook.computes[i++]());
                        return newAttr;
                    },
                    computes: [compute],
                    batchNum: undefined
                };
            }
            hook = hooks[attributeName];
            goodParts.splice(1, 0, compute());
            elements.setAttr(el, attributeName, goodParts.join(''));
        },
        specialAttribute: function (el, attributeName, compute) {
            listen(el, compute, function (ev, newVal) {
                elements.setAttr(el, attributeName, getValue(newVal));
            });
            elements.setAttr(el, attributeName, getValue(compute()));
        },
        simpleAttribute: function (el, attributeName, compute) {
            listen(el, compute, function (ev, newVal) {
                elements.setAttr(el, attributeName, newVal);
            });
            elements.setAttr(el, attributeName, compute());
        }
    };
    live.attr = live.simpleAttribute;
    live.attrs = live.attributes;
    live.getAttributeParts = getAttributeParts;
    var newLine = /(\r|\n)+/g;
    var getValue = function (val) {
        var regexp = /^["'].*["']$/;
        val = val.replace(elements.attrReg, '').replace(newLine, '');
        return regexp.test(val) ? val.substr(1, val.length - 2) : val;
    };
    can.view.live = live;
    return live;
});
/*can/view/render*/
define('can/view/render', [
    'can/view/view',
    './elements',
    'can/view/live/live',
    'can/util/string/string'
], function (can, elements, live) {
    var pendingHookups = [], tagChildren = function (tagName) {
            var newTag = elements.tagMap[tagName] || 'span';
            if (newTag === 'span') {
                return '@@!!@@';
            }
            return '<' + newTag + '>' + tagChildren(newTag) + '</' + newTag + '>';
        }, contentText = function (input, tag) {
            if (typeof input === 'string') {
                return input;
            }
            if (!input && input !== 0) {
                return '';
            }
            var hook = input.hookup && function (el, id) {
                input.hookup.call(input, el, id);
            } || typeof input === 'function' && input;
            if (hook) {
                if (tag) {
                    return '<' + tag + ' ' + can.view.hook(hook) + '></' + tag + '>';
                } else {
                    pendingHookups.push(hook);
                }
                return '';
            }
            return '' + input;
        }, contentEscape = function (txt, tag) {
            return typeof txt === 'string' || typeof txt === 'number' ? can.esc(txt) : contentText(txt, tag);
        }, withinTemplatedSectionWithinAnElement = false, emptyHandler = function () {
        };
    var lastHookups;
    can.extend(can.view, {
        live: live,
        setupLists: function () {
            var old = can.view.lists, data;
            can.view.lists = function (list, renderer) {
                data = {
                    list: list,
                    renderer: renderer
                };
                return Math.random();
            };
            return function () {
                can.view.lists = old;
                return data;
            };
        },
        getHooks: function () {
            var hooks = pendingHookups.slice(0);
            lastHookups = hooks;
            pendingHookups = [];
            return hooks;
        },
        onlytxt: function (self, func) {
            return contentEscape(func.call(self));
        },
        txt: function (escape, tagName, status, self, func) {
            var tag = elements.tagMap[tagName] || 'span', setupLiveBinding = false, value, listData, compute, unbind = emptyHandler, attributeName;
            if (withinTemplatedSectionWithinAnElement) {
                value = func.call(self);
            } else {
                if (typeof status === 'string' || status === 1) {
                    withinTemplatedSectionWithinAnElement = true;
                }
                var listTeardown = can.view.setupLists();
                unbind = function () {
                    compute.unbind('change', emptyHandler);
                };
                compute = can.compute(func, self, false);
                compute.bind('change', emptyHandler);
                listData = listTeardown();
                value = compute();
                withinTemplatedSectionWithinAnElement = false;
                setupLiveBinding = compute.computeInstance.hasDependencies;
            }
            if (listData) {
                unbind();
                return '<' + tag + can.view.hook(function (el, parentNode) {
                    live.list(el, listData.list, listData.renderer, self, parentNode);
                }) + '></' + tag + '>';
            }
            if (!setupLiveBinding || typeof value === 'function') {
                unbind();
                return (withinTemplatedSectionWithinAnElement || escape === 2 || !escape ? contentText : contentEscape)(value, status === 0 && tag);
            }
            var contentProp = elements.tagToContentPropMap[tagName];
            if (status === 0 && !contentProp) {
                var selfClosing = !!elements.selfClosingTags[tag];
                return '<' + tag + can.view.hook(escape && typeof value !== 'object' ? function (el, parentNode) {
                    live.text(el, compute, parentNode);
                    unbind();
                } : function (el, parentNode) {
                    live.html(el, compute, parentNode);
                    unbind();
                }) + (selfClosing ? '/>' : '>' + tagChildren(tag) + '</' + tag + '>');
            } else if (status === 1) {
                pendingHookups.push(function (el) {
                    live.attributes(el, compute, compute());
                    unbind();
                });
                return compute();
            } else if (escape === 2) {
                attributeName = status;
                pendingHookups.push(function (el) {
                    live.specialAttribute(el, attributeName, compute);
                    unbind();
                });
                return compute();
            } else {
                attributeName = status === 0 ? contentProp : status;
                (status === 0 ? lastHookups : pendingHookups).push(function (el) {
                    live.attribute(el, attributeName, compute);
                    unbind();
                });
                return live.attributePlaceholder;
            }
        }
    });
    return can;
});
/*can/view/stache/utils*/
define('can/view/stache/utils', [
    'can/util/util',
    'can/view/scope/scope'
], function (can) {
    var Options = can.view.Options;
    return {
        isArrayLike: function (obj) {
            return obj && obj.splice && typeof obj.length === 'number';
        },
        isObserveLike: function (obj) {
            return obj instanceof can.Map || obj && !!obj._get;
        },
        emptyHandler: function () {
        },
        jsonParse: function (str) {
            if (str[0] === '\'') {
                return str.substr(1, str.length - 2);
            } else if (str === 'undefined') {
                return undefined;
            } else if (can.global.JSON) {
                return JSON.parse(str);
            } else {
                return eval('(' + str + ')');
            }
        },
        mixins: {
            last: function () {
                return this.stack[this.stack.length - 1];
            },
            add: function (chars) {
                this.last().add(chars);
            },
            subSectionDepth: function () {
                return this.stack.length - 1;
            }
        },
        convertToScopes: function (helperOptions, scope, options, nodeList, truthyRenderer, falseyRenderer, isStringOnly) {
            if (truthyRenderer) {
                helperOptions.fn = this.makeRendererConvertScopes(truthyRenderer, scope, options, nodeList, isStringOnly);
            }
            if (falseyRenderer) {
                helperOptions.inverse = this.makeRendererConvertScopes(falseyRenderer, scope, options, nodeList, isStringOnly);
            }
        },
        makeRendererConvertScopes: function (renderer, parentScope, parentOptions, nodeList, observeObservables) {
            var rendererWithScope = function (ctx, opts, parentNodeList) {
                return renderer(ctx || parentScope, opts, parentNodeList);
            };
            var convertedRenderer = function (newScope, newOptions, parentNodeList) {
                if (newScope !== undefined && !(newScope instanceof can.view.Scope)) {
                    newScope = parentScope.add(newScope);
                }
                if (newOptions !== undefined && !(newOptions instanceof Options)) {
                    newOptions = parentOptions.add(newOptions);
                }
                var result = rendererWithScope(newScope, newOptions || parentOptions, parentNodeList || nodeList);
                return result;
            };
            return observeObservables ? convertedRenderer : can.__notObserve(convertedRenderer);
        },
        getItemsFragContent: function (items, helperOptions, scope) {
            var isObserveList = this.isObserveLike(items);
            var result = [], len = isObserveList ? items.attr('length') : items.length;
            for (var i = 0; i < len; i++) {
                var aliases = {
                    '%index': i,
                    '@index': i
                };
                var item = isObserveList ? items.attr('' + i) : items[i];
                result.push(helperOptions.fn(scope.add(aliases, { notContext: true }).add(item)));
            }
            return result;
        },
        Options: Options
    };
});
/*can/view/stache/mustache_helpers*/
define('can/view/stache/mustache_helpers', [
    'can/util/util',
    './utils',
    'can/view/live/live'
], function (can, utils, live) {
    live = live || can.view.live;
    var resolve = function (value) {
        if (utils.isObserveLike(value) && utils.isArrayLike(value) && value.attr('length')) {
            return value;
        } else if (can.isFunction(value)) {
            return value();
        } else {
            return value;
        }
    };
    var resolveHash = function (hash) {
        var params = {};
        for (var prop in hash) {
            var value = hash[prop];
            if (value && value.isComputed) {
                params[prop] = value();
            } else {
                params[prop] = value;
            }
        }
        return params;
    };
    var looksLikeOptions = function (options) {
        return options && typeof options.fn === 'function' && typeof options.inverse === 'function';
    };
    var helpers = {
        'each': function (items, options) {
            var resolved = resolve(items), result = [], keys, key, i;
            if (resolved instanceof can.List && !options.stringOnly) {
                return function (el) {
                    var nodeList = [el];
                    nodeList.expression = 'live.list';
                    can.view.nodeLists.register(nodeList, null, options.nodeList, true);
                    can.view.nodeLists.update(options.nodeList, [el]);
                    var cb = function (item, index, parentNodeList) {
                        return options.fn(options.scope.add({
                            '%index': index,
                            '@index': index
                        }, { notContext: true }).add(item), options.options, parentNodeList);
                    };
                    live.list(el, items, cb, options.context, el.parentNode, nodeList, function (list, parentNodeList) {
                        return options.inverse(options.scope.add(list), options.options, parentNodeList);
                    });
                };
            }
            var expr = resolved;
            if (!!expr && utils.isArrayLike(expr)) {
                var fragItems = utils.getItemsFragContent(expr, options, options.scope);
                Array.prototype.push.apply(result, fragItems);
            } else if (utils.isObserveLike(expr)) {
                keys = can.Map.keys(expr);
                for (i = 0; i < keys.length; i++) {
                    key = keys[i];
                    result.push(options.fn(options.scope.add({
                        '%key': key,
                        '@key': key
                    }, { notContext: true }).add(expr[key])));
                }
            } else if (expr instanceof Object) {
                for (key in expr) {
                    result.push(options.fn(options.scope.add({
                        '%key': key,
                        '@key': key
                    }, { notContext: true }).add(expr[key])));
                }
            }
            return !options.stringOnly ? result : result.join('');
        },
        '@index': function (offset, options) {
            if (!options) {
                options = offset;
                offset = 0;
            }
            var index = options.scope.attr('@index');
            return '' + ((can.isFunction(index) ? index() : index) + offset);
        },
        'if': function (expr, options) {
            var value;
            if (can.isFunction(expr)) {
                value = can.compute.truthy(expr)();
            } else {
                value = !!resolve(expr);
            }
            if (value) {
                return options.fn(options.scope || this);
            } else {
                return options.inverse(options.scope || this);
            }
        },
        'is': function () {
            var lastValue, curValue, options = arguments[arguments.length - 1];
            if (arguments.length - 2 <= 0) {
                return options.inverse();
            }
            var args = arguments;
            var callFn = can.compute(function () {
                for (var i = 0; i < args.length - 1; i++) {
                    curValue = resolve(args[i]);
                    curValue = can.isFunction(curValue) ? curValue() : curValue;
                    if (i > 0) {
                        if (curValue !== lastValue) {
                            return false;
                        }
                    }
                    lastValue = curValue;
                }
                return true;
            });
            return callFn() ? options.fn() : options.inverse();
        },
        'eq': function () {
            return helpers.is.apply(this, arguments);
        },
        'unless': function (expr, options) {
            return helpers['if'].apply(this, [
                expr,
                can.extend({}, options, {
                    fn: options.inverse,
                    inverse: options.fn
                })
            ]);
        },
        'with': function (expr, options) {
            var ctx = expr;
            expr = resolve(expr);
            if (!!expr) {
                return options.fn(ctx);
            }
        },
        'log': function (expr, options) {
            if (typeof console !== 'undefined' && console.log) {
                if (!options) {
                    console.log(expr.context);
                } else {
                    console.log(expr, options.context);
                }
            }
        },
        'data': function (attr) {
            var data = arguments.length === 2 ? this : arguments[1];
            return function (el) {
                can.data(can.$(el), attr, data || this.context);
            };
        },
        'switch': function (expression, options) {
            resolve(expression);
            var found = false;
            var newOptions = options.helpers.add({
                'case': function (value, options) {
                    if (!found && resolve(expression) === resolve(value)) {
                        found = true;
                        return options.fn(options.scope || this);
                    }
                },
                'default': function (options) {
                    if (!found) {
                        return options.fn(options.scope || this);
                    }
                }
            });
            return options.fn(options.scope, newOptions);
        },
        'joinBase': function (firstExpr) {
            var args = [].slice.call(arguments);
            var options = args.pop();
            var moduleReference = can.map(args, function (expr) {
                var value = resolve(expr);
                return can.isFunction(value) ? value() : value;
            }).join('');
            var templateModule = options.helpers.attr('helpers.module');
            var parentAddress = templateModule ? templateModule.uri : undefined;
            var isRelative = moduleReference[0] === '.';
            if (isRelative && parentAddress) {
                return can.joinURIs(parentAddress, moduleReference);
            } else {
                var baseURL = can.baseURL || typeof System !== 'undefined' && (System.renderingLoader && System.renderingLoader.baseURL || System.baseURL) || location.pathname;
                if (moduleReference[0] !== '/' && baseURL[baseURL.length - 1] !== '/') {
                    baseURL += '/';
                }
                return can.joinURIs(baseURL, moduleReference);
            }
        },
        routeUrl: function (params, merge) {
            if (!params) {
                params = {};
            }
            if (typeof params.fn === 'function' && typeof params.inverse === 'function') {
                params = resolveHash(params.hash);
            }
            return can.route.url(params, typeof merge === 'boolean' ? merge : undefined);
        },
        routeCurrent: function (params) {
            var last = can.last(arguments), isOptions = last && looksLikeOptions(last);
            if (last && isOptions && !(last.exprData instanceof can.expression.Call)) {
                if (can.route.current(resolveHash(params.hash || {}))) {
                    return params.fn();
                } else {
                    return params.inverse();
                }
            } else {
                return can.route.current(looksLikeOptions(params) ? {} : params || {});
            }
        }
    };
    helpers.routeCurrent.callAsMethod = true;
    helpers.eachOf = helpers.each;
    var registerHelper = function (name, callback) {
        helpers[name] = callback;
    };
    return {
        registerHelper: registerHelper,
        registerSimpleHelper: function (name, callback) {
            registerHelper(name, can.view.simpleHelper(callback));
        },
        getHelper: function (name, options) {
            var helper = options && options.get('helpers.' + name, { proxyMethods: false });
            if (!helper) {
                helper = helpers[name];
            }
            if (helper) {
                return { fn: helper };
            }
        }
    };
});
/*can/view/stache/expression*/
define('can/view/stache/expression', [
    'can/util/util',
    './utils',
    './mustache_helpers',
    'can/view/scope/scope'
], function (can, utils, mustacheHelpers, Scope) {
    var getKeyComputeData = function (key, scope, readOptions) {
            var data = scope.computeData(key, readOptions);
            can.compute.temporarilyBind(data.compute);
            return data;
        }, lookupValue = function (key, scope, helperOptions, readOptions) {
            var computeData = getKeyComputeData(key, scope, readOptions);
            if (!computeData.compute.computeInstance.hasDependencies) {
                return {
                    value: computeData.initialValue,
                    computeData: computeData
                };
            } else {
                return {
                    value: computeData.compute,
                    computeData: computeData
                };
            }
        }, lookupValueOrHelper = function (key, scope, helperOptions, readOptions) {
            var res = lookupValue(key, scope, helperOptions, readOptions);
            if (res.computeData.initialValue === undefined) {
                if (key.charAt(0) === '@' && key !== '@index') {
                    key = key.substr(1);
                }
                var helper = mustacheHelpers.getHelper(key, helperOptions);
                res.helper = helper && helper.fn;
            }
            return res;
        }, convertToArgExpression = function (expr) {
            if (!(expr instanceof Arg) && !(expr instanceof Literal) && !(expr instanceof Hashes)) {
                return new Arg(expr);
            } else {
                return expr;
            }
        };
    var Literal = function (value) {
        this._value = value;
    };
    Literal.prototype.value = function () {
        return this._value;
    };
    var Lookup = function (key, root) {
        this.key = key;
        this.rootExpr = root;
    };
    Lookup.prototype.value = function (scope, helperOptions) {
        var result = lookupValueOrHelper(this.key, scope, helperOptions);
        this.isHelper = result.helper && !result.helper.callAsMethod;
        return result.helper || result.value;
    };
    var ScopeLookup = function (key, root) {
        Lookup.apply(this, arguments);
    };
    ScopeLookup.prototype.value = function (scope, helperOptions) {
        return lookupValue(this.key, scope, helperOptions).value;
    };
    var Arg = function (expression, modifiers) {
        this.expr = expression;
        this.modifiers = modifiers || {};
        this.isCompute = false;
    };
    Arg.prototype.value = function () {
        return this.expr.value.apply(this.expr, arguments);
    };
    var Hashes = function (hashExpressions) {
        this.hashExprs = hashExpressions;
    };
    Hashes.prototype.value = function () {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = this.hashExprs[prop], value = val.value.apply(val, arguments);
            hash[prop] = {
                call: value && value.isComputed && (!val.modifiers || !val.modifiers.compute),
                value: value
            };
        }
        return can.compute(function () {
            var finalHash = {};
            for (var prop in hash) {
                finalHash[prop] = hash[prop].call ? hash[prop].value() : hash[prop].value;
            }
            return finalHash;
        });
    };
    var Call = function (methodExpression, argExpressions, hashes) {
        if (hashes && !can.isEmptyObject(hashes)) {
            argExpressions.push(new Hashes(hashes));
        }
        this.methodExpr = methodExpression;
        this.argExprs = can.map(argExpressions, convertToArgExpression);
    };
    Call.prototype.args = function (scope, helperOptions) {
        var args = [];
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            var value = arg.value.apply(arg, arguments);
            args.push({
                call: value && value.isComputed && (!arg.modifiers || !arg.modifiers.compute),
                value: value
            });
        }
        return function () {
            var finalArgs = [];
            for (var i = 0, len = args.length; i < len; i++) {
                finalArgs[i] = args[i].call ? args[i].value() : args[i].value;
            }
            return finalArgs;
        };
    };
    Call.prototype.value = function (scope, helperScope, helperOptions) {
        var method = this.methodExpr.value(scope, helperScope);
        this.isHelper = this.methodExpr.isHelper;
        var getArgs = this.args(scope, helperScope);
        return can.compute(function (newVal) {
            var func = method;
            if (func && func.isComputed) {
                func = func();
            }
            if (typeof func === 'function') {
                var args = getArgs();
                if (helperOptions) {
                    args.push(helperOptions);
                }
                if (arguments.length) {
                    args.unshift(new expression.SetIdentifier(newVal));
                }
                return func.apply(null, args);
            }
        });
    };
    var HelperLookup = function () {
        Lookup.apply(this, arguments);
    };
    HelperLookup.prototype.value = function (scope, helperOptions) {
        var result = lookupValueOrHelper(this.key, scope, helperOptions, {
            isArgument: true,
            args: [
                scope.attr('.'),
                scope
            ]
        });
        return result.helper || result.value;
    };
    var HelperScopeLookup = function () {
        Lookup.apply(this, arguments);
    };
    HelperScopeLookup.prototype.value = function (scope, helperOptions) {
        return lookupValue(this.key, scope, helperOptions, {
            callMethodsOnObservables: true,
            isArgument: true,
            args: [
                scope.attr('.'),
                scope
            ]
        }).value;
    };
    var Helper = function (methodExpression, argExpressions, hashExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions;
        this.hashExprs = hashExpressions;
        this.mode = null;
    };
    Helper.prototype.args = function (scope, helperOptions) {
        var args = [];
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            args.push(arg.value.apply(arg, arguments));
        }
        return args;
    };
    Helper.prototype.hash = function (scope, helperOptions) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = this.hashExprs[prop];
            hash[prop] = val.value.apply(val, arguments);
        }
        return hash;
    };
    Helper.prototype.helperAndValue = function (scope, helperOptions) {
        var looksLikeAHelper = this.argExprs.length || !can.isEmptyObject(this.hashExprs), helper, value, methodKey = this.methodExpr instanceof Literal ? '' + this.methodExpr._value : this.methodExpr.key, initialValue, args;
        if (looksLikeAHelper) {
            helper = mustacheHelpers.getHelper(methodKey, helperOptions);
            var context = scope.attr('.');
            if (!helper && typeof context[methodKey] === 'function') {
                helper = { fn: context[methodKey] };
            }
        }
        if (!helper) {
            args = this.args(scope, helperOptions);
            var computeData = getKeyComputeData(methodKey, scope, {
                    isArgument: false,
                    args: args && args.length ? args : [
                        scope.attr('.'),
                        scope
                    ]
                }), compute = computeData.compute;
            initialValue = computeData.initialValue;
            if (computeData.compute.computeInstance.hasDependencies) {
                value = compute;
            } else {
                value = initialValue;
            }
            if (!looksLikeAHelper && initialValue === undefined) {
                helper = mustacheHelpers.getHelper(methodKey, helperOptions);
            }
        }
        return {
            value: value,
            args: args,
            helper: helper && helper.fn
        };
    };
    Helper.prototype.evaluator = function (helper, scope, helperOptions, readOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly) {
        var helperOptionArg = {
                fn: function () {
                },
                inverse: function () {
                },
                stringOnly: stringOnly
            }, context = scope.attr('.'), args = this.args(scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly), hash = this.hash(scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
        utils.convertToScopes(helperOptionArg, scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
        can.simpleExtend(helperOptionArg, {
            context: context,
            scope: scope,
            contexts: scope,
            hash: hash,
            nodeList: nodeList,
            exprData: this,
            helperOptions: helperOptions,
            helpers: helperOptions
        });
        args.push(helperOptionArg);
        return function () {
            return helper.apply(context, args);
        };
    };
    Helper.prototype.value = function (scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly) {
        var helperAndValue = this.helperAndValue(scope, helperOptions);
        var helper = helperAndValue.helper;
        if (!helper) {
            return helperAndValue.value;
        }
        var fn = this.evaluator(helper, scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
        var compute = can.compute(fn);
        can.compute.temporarilyBind(compute);
        if (!compute.computeInstance.hasDependencies) {
            return compute();
        } else {
            return compute;
        }
    };
    var keyRegExp = /[\w\.\\\-_@\/\&%]+/, tokensRegExp = /('.*?'|".*?"|=|[\w\.\\\-_@\/*%\$:]+|[\(\)]|,|\~)/g, literalRegExp = /^('.*?'|".*?"|[0-9]+\.?[0-9]*|true|false|null|undefined)$/;
    var isTokenKey = function (token) {
        return keyRegExp.test(token);
    };
    var testDot = /^[\.@]\w/;
    var isAddingToExpression = function (token) {
        return isTokenKey(token) && testDot.test(token);
    };
    var ensureChildren = function (type) {
        if (!type.children) {
            type.children = [];
        }
        return type;
    };
    var Stack = function () {
        this.root = {
            children: [],
            type: 'Root'
        };
        this.current = this.root;
        this.stack = [this.root];
    };
    can.simpleExtend(Stack.prototype, {
        top: function () {
            return can.last(this.stack);
        },
        isRootTop: function () {
            return this.top() === this.root;
        },
        popTo: function (types) {
            this.popUntil(types);
            if (!this.isRootTop()) {
                this.stack.pop();
            }
        },
        firstParent: function (types) {
            var curIndex = this.stack.length - 2;
            while (curIndex > 0 && can.inArray(this.stack[curIndex].type, types) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        popUntil: function (types) {
            while (can.inArray(this.top().type, types) === -1 && !this.isRootTop()) {
                this.stack.pop();
            }
            return this.top();
        },
        addTo: function (types, type) {
            var cur = this.popUntil(types);
            ensureChildren(cur).children.push(type);
        },
        addToAndPush: function (types, type) {
            this.addTo(types, type);
            this.stack.push(type);
        },
        topLastChild: function () {
            return can.last(this.top().children);
        },
        replaceTopLastChild: function (type) {
            var children = ensureChildren(this.top()).children;
            children.pop();
            children.push(type);
            return type;
        },
        replaceTopLastChildAndPush: function (type) {
            this.replaceTopLastChild(type);
            this.stack.push(type);
        },
        replaceTopAndPush: function (type) {
            var children;
            if (this.top() === this.root) {
                children = ensureChildren(this.top()).children;
            } else {
                this.stack.pop();
                children = ensureChildren(this.top()).children;
            }
            children.pop();
            children.push(type);
            this.stack.push(type);
            return type;
        }
    });
    var convertKeyToLookup = function (key) {
        var lastPath = key.lastIndexOf('./');
        var lastDot = key.lastIndexOf('.');
        if (lastDot > lastPath) {
            return key.substr(0, lastDot) + '@' + key.substr(lastDot + 1);
        }
        var firstNonPathCharIndex = lastPath === -1 ? 0 : lastPath + 2;
        var firstNonPathChar = key.charAt(firstNonPathCharIndex);
        if (firstNonPathChar === '.' || firstNonPathChar === '@') {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex + 1);
        } else {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex);
        }
    };
    var convertToAtLookup = function (ast) {
        if (ast.type === 'Lookup') {
            ast.key = convertKeyToLookup(ast.key);
        }
        return ast;
    };
    var convertToHelperIfTopIsLookup = function (stack) {
        var top = stack.top();
        if (top && top.type === 'Lookup') {
            var base = stack.stack[stack.stack.length - 2];
            if (base.type !== 'Helper' && base) {
                stack.replaceTopAndPush({
                    type: 'Helper',
                    method: top
                });
            }
        }
    };
    var expression = {
        convertKeyToLookup: convertKeyToLookup,
        Literal: Literal,
        Lookup: Lookup,
        ScopeLookup: ScopeLookup,
        Arg: Arg,
        Hashes: Hashes,
        Call: Call,
        Helper: Helper,
        HelperLookup: HelperLookup,
        HelperScopeLookup: HelperScopeLookup,
        SetIdentifier: function (value) {
            this.value = value;
        },
        tokenize: function (expression) {
            var tokens = [];
            (can.trim(expression) + ' ').replace(tokensRegExp, function (whole, arg) {
                tokens.push(arg);
            });
            return tokens;
        },
        lookupRules: {
            'default': function (ast, methodType, isArg) {
                var name = (methodType === 'Helper' && !ast.root ? 'Helper' : '') + (isArg ? 'Scope' : '') + 'Lookup';
                return expression[name];
            },
            'method': function (ast, methodType, isArg) {
                return ScopeLookup;
            }
        },
        methodRules: {
            'default': function (ast) {
                return ast.type === 'Call' ? Call : Helper;
            },
            'call': function (ast) {
                return Call;
            }
        },
        parse: function (expressionString, options) {
            options = options || {};
            var ast = this.ast(expressionString);
            if (!options.lookupRule) {
                options.lookupRule = 'default';
            }
            if (typeof options.lookupRule === 'string') {
                options.lookupRule = expression.lookupRules[options.lookupRule];
            }
            if (!options.methodRule) {
                options.methodRule = 'default';
            }
            if (typeof options.methodRule === 'string') {
                options.methodRule = expression.methodRules[options.methodRule];
            }
            var expr = this.hydrateAst(ast, options, options.baseMethodType || 'Helper');
            return expr;
        },
        hydrateAst: function (ast, options, methodType, isArg) {
            var hashes, self = this;
            if (ast.type === 'Lookup') {
                return new (options.lookupRule(ast, methodType, isArg))(ast.key, ast.root && this.hydrateAst(ast.root, options, methodType));
            } else if (ast.type === 'Literal') {
                return new Literal(ast.value);
            } else if (ast.type === 'Arg') {
                return new Arg(this.hydrateAst(ast.children[0], options, methodType, isArg), { compute: true });
            } else if (ast.type === 'Hashes') {
                hashes = {};
                can.each(ast.children, function (child) {
                    hashes[child.prop] = self.hydrateAst(child.children[0], options, ast.type, true);
                });
                return new Hashes(hashes);
            } else if (ast.type === 'Hash') {
                throw new Error('');
            } else if (ast.type === 'Call' || ast.type === 'Helper') {
                var args = [];
                hashes = {};
                can.each(ast.children, function (child) {
                    if (child.type === 'Hash') {
                        hashes[child.prop] = self.hydrateAst(child.children[0], options, ast.type, true);
                    } else {
                        args.push(self.hydrateAst(child, options, ast.type, true));
                    }
                });
                return new (options.methodRule(ast))(this.hydrateAst(ast.method, options, ast.type), args, hashes);
            }
        },
        ast: function (expression) {
            var tokens = this.tokenize(expression);
            return this.parseAst(tokens, { index: 0 });
        },
        parseAst: function (tokens, cursor) {
            var stack = new Stack(), top;
            while (cursor.index < tokens.length) {
                var token = tokens[cursor.index], nextToken = tokens[cursor.index + 1];
                cursor.index++;
                if (literalRegExp.test(token)) {
                    convertToHelperIfTopIsLookup(stack);
                    stack.addTo([
                        'Helper',
                        'Call',
                        'Hash'
                    ], {
                        type: 'Literal',
                        value: utils.jsonParse(token)
                    });
                } else if (nextToken === '=') {
                    top = stack.top();
                    if (top && top.type === 'Lookup') {
                        var firstParent = stack.firstParent([
                            'Call',
                            'Helper',
                            'Hash'
                        ]);
                        if (firstParent.type === 'Call' || firstParent.type === 'Root') {
                            stack.popUntil(['Call']);
                            top = stack.top();
                            stack.replaceTopAndPush({
                                type: 'Helper',
                                method: top.type === 'Root' ? can.last(top.children) : top
                            });
                        }
                    }
                    top = stack.popUntil([
                        'Helper',
                        'Call',
                        'Hashes'
                    ]);
                    if (top.type === 'Call') {
                        stack.addToAndPush(['Call'], { type: 'Hashes' });
                    }
                    stack.addToAndPush([
                        'Helper',
                        'Hashes'
                    ], {
                        type: 'Hash',
                        prop: token
                    });
                    cursor.index++;
                } else if (keyRegExp.test(token)) {
                    var last = stack.topLastChild();
                    if (last && last.type === 'Call' && isAddingToExpression(token)) {
                        stack.replaceTopLastChildAndPush({
                            type: 'Lookup',
                            root: last,
                            key: token
                        });
                    } else {
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash',
                            'Arg'
                        ], {
                            type: 'Lookup',
                            key: token
                        });
                    }
                } else if (token === '~') {
                    convertToHelperIfTopIsLookup(stack);
                    stack.addToAndPush([
                        'Helper',
                        'Call',
                        'Hash'
                    ], {
                        type: 'Arg',
                        key: token
                    });
                } else if (token === '(') {
                    top = stack.top();
                    if (top.type === 'Lookup') {
                        stack.replaceTopAndPush({
                            type: 'Call',
                            method: convertToAtLookup(top)
                        });
                    } else {
                        throw new Error('Unable to understand expression ' + tokens.join(''));
                    }
                } else if (token === ')') {
                    stack.popTo(['Call']);
                } else if (token === ',') {
                    stack.popUntil(['Call']);
                }
            }
            return stack.root.children[0];
        }
    };
    can.expression = expression;
    return expression;
});
/*can/view/href/href*/
define('can/view/href/href', [
    'can/util/util',
    'can/view/stache/expression',
    'can/view/callbacks/callbacks',
    'can/view/scope/scope'
], function (can, expression) {
    var removeCurly = function (value) {
        if (value[0] === '{' && value[value.length - 1] === '}') {
            return value.substr(1, value.length - 2);
        }
        return value;
    };
    can.view.attr('can-href', function (el, attrData) {
        var attrInfo = expression.parse('tmp(' + removeCurly(el.getAttribute('can-href')) + ')', { baseMethodType: 'Call' });
        var getHash = attrInfo.argExprs[0].value(attrData.scope, null);
        var routeHref = can.compute(function () {
            return can.route.url(getHash());
        });
        el.setAttribute('href', routeHref());
        var handler = function (ev, newVal) {
            el.setAttribute('href', newVal);
        };
        routeHref.bind('change', handler);
        can.bind.call(el, 'removed', function () {
            routeHref.unbind('change', handler);
        });
    });
});
/*can/view/bindings/bindings*/
define('can/view/bindings/bindings', [
    'can/util/util',
    'can/view/stache/expression',
    'can/view/callbacks/callbacks',
    'can/view/live/live',
    'can/view/scope/scope',
    'can/view/href/href'
], function (can, expression, viewCallbacks, live) {
    var behaviors = {
        viewModel: function (el, tagData, makeViewModel, initialViewModelData) {
            initialViewModelData = initialViewModelData || {};
            var bindingsSemaphore = {}, viewModel, onCompleteBindings = [], onTeardowns = {}, bindingInfos = {}, attributeViewModelBindings = can.extend({}, initialViewModelData);
            can.each(can.makeArray(el.attributes), function (node) {
                var dataBinding = makeDataBinding(node, el, {
                    templateType: tagData.templateType,
                    scope: tagData.scope,
                    semaphore: bindingsSemaphore,
                    getViewModel: function () {
                        return viewModel;
                    },
                    attributeViewModelBindings: attributeViewModelBindings,
                    alreadyUpdatedChild: true,
                    nodeList: tagData.parentNodeList
                });
                if (dataBinding) {
                    if (dataBinding.onCompleteBinding) {
                        if (dataBinding.bindingInfo.parentToChild && dataBinding.value !== undefined) {
                            initialViewModelData[cleanVMName(dataBinding.bindingInfo.childName)] = dataBinding.value;
                        }
                        onCompleteBindings.push(dataBinding.onCompleteBinding);
                    }
                    onTeardowns[node.name] = dataBinding.onTeardown;
                }
            });
            viewModel = makeViewModel(initialViewModelData);
            for (var i = 0, len = onCompleteBindings.length; i < len; i++) {
                onCompleteBindings[i]();
            }
            can.bind.call(el, 'attributes', function (ev) {
                var attrName = ev.attributeName, value = el.getAttribute(attrName);
                if (onTeardowns[attrName]) {
                    onTeardowns[attrName]();
                }
                var parentBindingWasAttribute = bindingInfos[attrName] && bindingInfos[attrName].parent === 'attribute';
                if (value !== null || parentBindingWasAttribute) {
                    var dataBinding = makeDataBinding({
                        name: attrName,
                        value: value
                    }, el, {
                        templateType: tagData.templateType,
                        scope: tagData.scope,
                        semaphore: {},
                        getViewModel: function () {
                            return viewModel;
                        },
                        attributeViewModelBindings: attributeViewModelBindings,
                        initializeValues: true,
                        nodeList: tagData.parentNodeList
                    });
                    if (dataBinding) {
                        if (dataBinding.onCompleteBinding) {
                            dataBinding.onCompleteBinding();
                        }
                        bindingInfos[attrName] = dataBinding.bindingInfo;
                        onTeardowns[attrName] = dataBinding.onTeardown;
                    }
                }
            });
            return function () {
                for (var attrName in onTeardowns) {
                    onTeardowns[attrName]();
                }
            };
        },
        data: function (el, attrData) {
            if (can.data(can.$(el), 'preventDataBindings')) {
                return;
            }
            var viewModel = can.viewModel(el), semaphore = {}, teardown;
            var dataBinding = makeDataBinding({
                name: attrData.attributeName,
                value: el.getAttribute(attrData.attributeName),
                nodeList: attrData.nodeList
            }, el, {
                templateType: attrData.templateType,
                scope: attrData.scope,
                semaphore: semaphore,
                getViewModel: function () {
                    return viewModel;
                }
            });
            if (dataBinding.onCompleteBinding) {
                dataBinding.onCompleteBinding();
            }
            teardown = dataBinding.onTeardown;
            can.one.call(el, 'removed', function () {
                teardown();
            });
            can.bind.call(el, 'attributes', function (ev) {
                var attrName = ev.attributeName, value = el.getAttribute(attrName);
                if (attrName === attrData.attributeName) {
                    if (teardown) {
                        teardown();
                    }
                    if (value !== null) {
                        var dataBinding = makeDataBinding({
                            name: attrName,
                            value: value
                        }, el, {
                            templateType: attrData.templateType,
                            scope: attrData.scope,
                            semaphore: semaphore,
                            getViewModel: function () {
                                return viewModel;
                            },
                            initializeValues: true,
                            nodeList: attrData.nodeList
                        });
                        if (dataBinding) {
                            if (dataBinding.onCompleteBinding) {
                                dataBinding.onCompleteBinding();
                            }
                            teardown = dataBinding.onTeardown;
                        }
                    }
                }
            });
        },
        reference: function (el, attrData) {
            if (el.getAttribute(attrData.attributeName)) {
                console.warn('*reference attributes can only export the view model.');
            }
            var name = can.camelize(attrData.attributeName.substr(1).toLowerCase());
            var viewModel = can.viewModel(el);
            var refs = attrData.scope.getRefs();
            refs._context.attr('*' + name, viewModel);
        },
        event: function (el, data) {
            var attributeName = data.attributeName, legacyBinding = attributeName.indexOf('can-') === 0, event = attributeName.indexOf('can-') === 0 ? attributeName.substr('can-'.length) : can.camelize(removeBrackets(attributeName, '(', ')')), onBindElement = legacyBinding;
            if (event.charAt(0) === '$') {
                event = event.substr(1);
                onBindElement = true;
            }
            var handler = function (ev) {
                var attrVal = el.getAttribute(attributeName);
                if (!attrVal) {
                    return;
                }
                var $el = can.$(el), viewModel = can.viewModel($el[0]);
                var expr = expression.parse(removeBrackets(attrVal), {
                    lookupRule: 'method',
                    methodRule: 'call'
                });
                if (!(expr instanceof expression.Call) && !(expr instanceof expression.Helper)) {
                    var defaultArgs = can.map([
                        data.scope._context,
                        $el
                    ].concat(can.makeArray(arguments)), function (data) {
                        return new expression.Literal(data);
                    });
                    expr = new expression.Call(expr, defaultArgs, {});
                }
                var localScope = data.scope.add({
                    '@element': $el,
                    '@event': ev,
                    '@viewModel': viewModel,
                    '@scope': data.scope,
                    '@context': data.scope._context,
                    '%element': this,
                    '$element': $el,
                    '%event': ev,
                    '%viewModel': viewModel,
                    '%scope': data.scope,
                    '%context': data.scope._context
                }, { notContext: true });
                var scopeData = localScope.read(expr.methodExpr.key, { isArgument: true });
                if (!scopeData.value) {
                    scopeData = localScope.read(expr.methodExpr.key, { isArgument: true });
                    return null;
                }
                var args = expr.args(localScope, null)();
                return scopeData.value.apply(scopeData.parent, args);
            };
            if (special[event]) {
                var specialData = special[event](data, el, handler);
                handler = specialData.handler;
                event = specialData.event;
            }
            can.bind.call(onBindElement ? el : can.viewModel(el), event, handler);
            var attributesHandler = function (ev) {
                if (ev.attributeName === attributeName && !this.getAttribute(attributeName)) {
                    can.unbind.call(onBindElement ? el : can.viewModel(el), event, handler);
                    can.unbind.call(el, 'attributes', attributesHandler);
                }
            };
            can.bind.call(el, 'attributes', attributesHandler);
        },
        value: function (el, data) {
            var propName = '$value', attrValue = can.trim(removeBrackets(el.getAttribute('can-value'))), getterSetter;
            if (el.nodeName.toLowerCase() === 'input' && (el.type === 'checkbox' || el.type === 'radio')) {
                var property = getComputeFrom.scope(el, data.scope, attrValue, {}, true);
                if (el.type === 'checkbox') {
                    var trueValue = can.attr.has(el, 'can-true-value') ? el.getAttribute('can-true-value') : true, falseValue = can.attr.has(el, 'can-false-value') ? el.getAttribute('can-false-value') : false;
                    getterSetter = can.compute(function (newValue) {
                        if (arguments.length) {
                            property(newValue ? trueValue : falseValue);
                        } else {
                            return property() == trueValue;
                        }
                    });
                } else if (el.type === 'radio') {
                    getterSetter = can.compute(function (newValue) {
                        if (arguments.length) {
                            if (newValue) {
                                property(el.value);
                            }
                        } else {
                            return property() == el.value;
                        }
                    });
                }
                propName = '$checked';
                attrValue = 'getterSetter';
                data.scope = new can.view.Scope({ getterSetter: getterSetter });
            } else if (isContentEditable(el)) {
                propName = '$innerHTML';
            }
            var dataBinding = makeDataBinding({
                name: '{(' + propName + '})',
                value: attrValue
            }, el, {
                templateType: data.templateType,
                scope: data.scope,
                semaphore: {},
                initializeValues: true,
                legacyBindings: true,
                syncChildWithParent: true
            });
            can.one.call(el, 'removed', function () {
                dataBinding.onTeardown();
            });
        }
    };
    can.view.attr(/^\{[^\}]+\}$/, behaviors.data);
    can.view.attr(/\*[\w\.\-_]+/, behaviors.reference);
    can.view.attr(/^\([\$?\w\.\-]+\)$/, behaviors.event);
    can.view.attr(/can-[\w\.]+/, behaviors.event);
    can.view.attr('can-value', behaviors.value);
    var getComputeFrom = {
        scope: function (el, scope, scopeProp, bindingData, mustBeACompute, stickyCompute) {
            if (!scopeProp) {
                return can.compute();
            } else {
                if (mustBeACompute) {
                    var parentExpression = expression.parse(scopeProp, { baseMethodType: 'Call' });
                    return parentExpression.value(scope, new can.view.Options({}));
                } else {
                    return function (newVal) {
                        scope.attr(cleanVMName(scopeProp), newVal);
                    };
                }
            }
        },
        viewModel: function (el, scope, vmName, bindingData, mustBeACompute, stickyCompute) {
            var setName = cleanVMName(vmName);
            if (mustBeACompute) {
                return can.compute(function (newVal) {
                    var viewModel = bindingData.getViewModel();
                    if (arguments.length) {
                        viewModel.attr(setName, newVal);
                    } else {
                        return vmName === '.' ? viewModel : can.compute.read(viewModel, can.compute.read.reads(vmName), {}).value;
                    }
                });
            } else {
                return function (newVal) {
                    var childCompute;
                    var viewModel = bindingData.getViewModel();
                    if (stickyCompute) {
                        childCompute = viewModel._get(setName, { readCompute: false });
                        if (!childCompute || !childCompute.isComputed) {
                            childCompute = can.compute();
                            viewModel._set(setName, childCompute, { readCompute: false });
                        }
                        childCompute(newVal);
                    } else {
                        viewModel.attr(setName, newVal);
                    }
                };
            }
        },
        attribute: function (el, scope, prop, bindingData, mustBeACompute, stickyCompute, event) {
            var hasChildren = el.nodeName.toLowerCase() === 'select', isMultiselectValue = prop === 'value' && hasChildren && el.multiple, isStringValue, lastSet, scheduledAsyncSet = false, timer, parentEvents, originalValue;
            if (!event) {
                if (prop === 'innerHTML') {
                    event = [
                        'blur',
                        'change'
                    ];
                } else {
                    event = 'change';
                }
            }
            if (!can.isArray(event)) {
                event = [event];
            }
            var set = function (newVal) {
                    if (hasChildren && !scheduledAsyncSet) {
                        clearTimeout(timer);
                        timer = setTimeout(function () {
                            set(newVal);
                        }, 1);
                    }
                    lastSet = newVal;
                    if (isMultiselectValue) {
                        if (newVal && typeof newVal === 'string') {
                            newVal = newVal.split(';');
                            isStringValue = true;
                        } else if (newVal) {
                            newVal = can.makeArray(newVal);
                        } else {
                            newVal = [];
                        }
                        var isSelected = {};
                        can.each(newVal, function (val) {
                            isSelected[val] = true;
                        });
                        can.each(el.childNodes, function (option) {
                            if (option.value) {
                                option.selected = !!isSelected[option.value];
                            }
                        });
                    } else {
                        if (!bindingData.legacyBindings && hasChildren && 'selectedIndex' in el && prop === 'value') {
                            can.attr.setSelectValue(el, newVal);
                        } else {
                            can.attr.setAttrOrProp(el, prop, newVal == null ? '' : newVal);
                        }
                    }
                    return newVal;
                }, get = function () {
                    if (isMultiselectValue) {
                        var values = [], children = el.childNodes;
                        can.each(children, function (child) {
                            if (child.selected && child.value) {
                                values.push(child.value);
                            }
                        });
                        return isStringValue ? values.join(';') : values;
                    } else if (hasChildren && 'selectedIndex' in el && el.selectedIndex === -1) {
                        return undefined;
                    }
                    return can.attr.get(el, prop);
                };
            if (hasChildren) {
                setTimeout(function () {
                    scheduledAsyncSet = true;
                }, 1);
            }
            if (el.tagName && el.tagName.toLowerCase() === 'input' && el.form) {
                parentEvents = [{
                        el: el.form,
                        eventName: 'reset',
                        handler: function () {
                            set(originalValue);
                        }
                    }];
            }
            var observer;
            originalValue = get();
            return can.compute(originalValue, {
                on: function (updater) {
                    can.each(event, function (eventName) {
                        can.bind.call(el, eventName, updater);
                    });
                    can.each(parentEvents, function (parentEvent) {
                        can.bind.call(parentEvent.el, parentEvent.eventName, parentEvent.handler);
                    });
                    if (hasChildren) {
                        var onMutation = function (mutations) {
                            if (stickyCompute) {
                                set(stickyCompute());
                            }
                            updater();
                        };
                        if (can.attr.MutationObserver) {
                            observer = new can.attr.MutationObserver(onMutation);
                            observer.observe(el, {
                                childList: true,
                                subtree: true
                            });
                        } else {
                            can.data(can.$(el), 'canBindingCallback', { onMutation: onMutation });
                        }
                    }
                },
                off: function (updater) {
                    can.each(event, function (eventName) {
                        can.unbind.call(el, eventName, updater);
                    });
                    can.each(parentEvents, function (parentEvent) {
                        can.unbind.call(parentEvent.el, parentEvent.eventName, parentEvent.handler);
                    });
                    if (hasChildren) {
                        if (can.attr.MutationObserver) {
                            observer.disconnect();
                        } else {
                            can.data(can.$(el), 'canBindingCallback', null);
                        }
                    }
                },
                get: get,
                set: set
            });
        }
    };
    var bind = {
        childToParent: function (el, parentCompute, childCompute, bindingsSemaphore, attrName, syncChild) {
            var parentUpdateIsFunction = typeof parentCompute === 'function';
            var updateParent = function (ev, newVal) {
                if (!bindingsSemaphore[attrName]) {
                    if (parentUpdateIsFunction) {
                        parentCompute(newVal);
                        if (syncChild) {
                            if (parentCompute() !== childCompute()) {
                                bindingsSemaphore[attrName] = (bindingsSemaphore[attrName] || 0) + 1;
                                can.batch.start();
                                childCompute(parentCompute());
                                can.batch.after(function () {
                                    --bindingsSemaphore[attrName];
                                });
                                can.batch.stop();
                            }
                        }
                    } else if (parentCompute instanceof can.Map) {
                        parentCompute.attr(newVal, true);
                    }
                }
            };
            if (childCompute && childCompute.isComputed) {
                childCompute.bind('change', updateParent);
            }
            return updateParent;
        },
        parentToChild: function (el, parentCompute, childUpdate, bindingsSemaphore, attrName) {
            var updateChild = function (ev, newValue) {
                bindingsSemaphore[attrName] = (bindingsSemaphore[attrName] || 0) + 1;
                can.batch.start();
                childUpdate(newValue);
                can.batch.after(function () {
                    --bindingsSemaphore[attrName];
                });
                can.batch.stop();
            };
            if (parentCompute && parentCompute.isComputed) {
                parentCompute.bind('change', updateChild);
            }
            return updateChild;
        }
    };
    var getBindingInfo = function (node, attributeViewModelBindings, templateType, tagName) {
        var bindingInfo, attributeName = node.name, attributeValue = node.value || '';
        var matches = attributeName.match(bindingsRegExp);
        if (!matches) {
            var ignoreAttribute = ignoreAttributesRegExp.test(attributeName);
            var vmName = can.camelize(attributeName);
            if (ignoreAttribute || viewCallbacks.attr(attributeName)) {
                return;
            }
            var syntaxRight = attributeValue[0] === '{' && can.last(attributeValue) === '}';
            var isAttributeToChild = templateType === 'legacy' ? attributeViewModelBindings[vmName] : !syntaxRight;
            var scopeName = syntaxRight ? attributeValue.substr(1, attributeValue.length - 2) : attributeValue;
            if (isAttributeToChild) {
                return {
                    bindingAttributeName: attributeName,
                    parent: 'attribute',
                    parentName: attributeName,
                    child: 'viewModel',
                    childName: vmName,
                    parentToChild: true,
                    childToParent: true
                };
            } else {
                return {
                    bindingAttributeName: attributeName,
                    parent: 'scope',
                    parentName: scopeName,
                    child: 'viewModel',
                    childName: vmName,
                    parentToChild: true,
                    childToParent: true
                };
            }
        }
        var twoWay = !!matches[1], childToParent = twoWay || !!matches[2], parentToChild = twoWay || !childToParent;
        var childName = matches[3];
        var isDOM = childName.charAt(0) === '$';
        if (isDOM) {
            bindingInfo = {
                parent: 'scope',
                child: 'attribute',
                childToParent: childToParent,
                parentToChild: parentToChild,
                bindingAttributeName: attributeName,
                childName: childName.substr(1),
                parentName: attributeValue,
                initializeValues: true
            };
            if (tagName === 'select') {
                bindingInfo.stickyParentToChild = true;
            }
            return bindingInfo;
        } else {
            bindingInfo = {
                parent: 'scope',
                child: 'viewModel',
                childToParent: childToParent,
                parentToChild: parentToChild,
                bindingAttributeName: attributeName,
                childName: can.camelize(childName),
                parentName: attributeValue,
                initializeValues: true
            };
            if (attributeValue.trim().charAt(0) === '~') {
                bindingInfo.stickyParentToChild = true;
            }
            return bindingInfo;
        }
    };
    var bindingsRegExp = /\{(\()?(\^)?([^\}\)]+)\)?\}/, ignoreAttributesRegExp = /^(data-view-id|class|id|\[[\w\.-]+\]|#[\w\.-])$/i;
    var makeDataBinding = function (node, el, bindingData) {
        var bindingInfo = getBindingInfo(node, bindingData.attributeViewModelBindings, bindingData.templateType, el.nodeName.toLowerCase());
        if (!bindingInfo) {
            return;
        }
        bindingInfo.alreadyUpdatedChild = bindingData.alreadyUpdatedChild;
        if (bindingData.initializeValues) {
            bindingInfo.initializeValues = true;
        }
        var parentCompute = getComputeFrom[bindingInfo.parent](el, bindingData.scope, bindingInfo.parentName, bindingData, bindingInfo.parentToChild), childCompute = getComputeFrom[bindingInfo.child](el, bindingData.scope, bindingInfo.childName, bindingData, bindingInfo.childToParent, bindingInfo.stickyParentToChild && parentCompute), updateParent, updateChild, childLifecycle;
        if (bindingData.nodeList) {
            if (parentCompute && parentCompute.isComputed) {
                parentCompute.computeInstance.setPrimaryDepth(bindingData.nodeList.nesting + 1);
            }
            if (childCompute && childCompute.isComputed) {
                childCompute.computeInstance.setPrimaryDepth(bindingData.nodeList.nesting + 1);
            }
        }
        if (bindingInfo.parentToChild) {
            updateChild = bind.parentToChild(el, parentCompute, childCompute, bindingData.semaphore, bindingInfo.bindingAttributeName);
        }
        var completeBinding = function () {
            if (bindingInfo.childToParent) {
                updateParent = bind.childToParent(el, parentCompute, childCompute, bindingData.semaphore, bindingInfo.bindingAttributeName, bindingData.syncChildWithParent);
            } else if (bindingInfo.stickyParentToChild) {
                childCompute.bind('change', childLifecycle = can.k);
            }
            if (bindingInfo.initializeValues) {
                initializeValues(bindingInfo, childCompute, parentCompute, updateChild, updateParent);
            }
        };
        var onTeardown = function () {
            unbindUpdate(parentCompute, updateChild);
            unbindUpdate(childCompute, updateParent);
            unbindUpdate(childCompute, childLifecycle);
        };
        if (bindingInfo.child === 'viewModel') {
            return {
                value: getValue(parentCompute),
                onCompleteBinding: completeBinding,
                bindingInfo: bindingInfo,
                onTeardown: onTeardown
            };
        } else {
            completeBinding();
            return {
                bindingInfo: bindingInfo,
                onTeardown: onTeardown
            };
        }
    };
    var initializeValues = function (bindingInfo, childCompute, parentCompute, updateChild, updateParent) {
        var doUpdateParent = false;
        if (bindingInfo.parentToChild && !bindingInfo.childToParent) {
            if (bindingInfo.stickyParentToChild) {
                updateChild({}, getValue(parentCompute));
            }
        } else if (!bindingInfo.parentToChild && bindingInfo.childToParent) {
            doUpdateParent = true;
        } else if (getValue(childCompute) === undefined) {
        } else if (getValue(parentCompute) === undefined) {
            doUpdateParent = true;
        }
        if (doUpdateParent) {
            updateParent({}, getValue(childCompute));
        } else {
            if (!bindingInfo.alreadyUpdatedChild) {
                updateChild({}, getValue(parentCompute));
            }
        }
    };
    if (!can.attr.MutationObserver) {
        var updateSelectValue = function (el) {
            var bindingCallback = can.data(can.$(el), 'canBindingCallback');
            if (bindingCallback) {
                bindingCallback.onMutation(el);
            }
        };
        live.registerChildMutationCallback('select', updateSelectValue);
        live.registerChildMutationCallback('optgroup', function (el) {
            updateSelectValue(el.parentNode);
        });
    }
    var isContentEditable = function () {
            var values = {
                '': true,
                'true': true,
                'false': false
            };
            var editable = function (el) {
                if (!el || !el.getAttribute) {
                    return;
                }
                var attr = el.getAttribute('contenteditable');
                return values[attr];
            };
            return function (el) {
                var val = editable(el);
                if (typeof val === 'boolean') {
                    return val;
                } else {
                    return !!editable(el.parentNode);
                }
            };
        }(), removeBrackets = function (value, open, close) {
            open = open || '{';
            close = close || '}';
            if (value[0] === open && value[value.length - 1] === close) {
                return value.substr(1, value.length - 2);
            }
            return value;
        }, getValue = function (value) {
            return value && value.isComputed ? value() : value;
        }, unbindUpdate = function (compute, updateOther) {
            if (compute && compute.isComputed && typeof updateOther === 'function') {
                compute.unbind('change', updateOther);
            }
        }, cleanVMName = function (name) {
            return name.replace(/@/g, '');
        };
    var special = {
        enter: function (data, el, original) {
            return {
                event: 'keyup',
                handler: function (ev) {
                    if (ev.keyCode === 13) {
                        return original.call(this, ev);
                    }
                }
            };
        }
    };
    can.bindings = {
        behaviors: behaviors,
        getBindingInfo: getBindingInfo,
        special: special
    };
    return can.bindings;
});
/*can/view/mustache/mustache*/
define('can/view/mustache/mustache', [
    'can/util/util',
    'can/view/scope/scope',
    'can/view/view',
    'can/view/scanner',
    'can/compute/compute',
    'can/view/render',
    'can/view/bindings/bindings'
], function (can) {
    can.view.ext = '.mustache';
    var SCOPE = 'scope', HASH = '___h4sh', CONTEXT_OBJ = '{scope:' + SCOPE + ',options:options}', SPECIAL_CONTEXT_OBJ = '{scope:' + SCOPE + ',options:options, special: true}', ARG_NAMES = SCOPE + ',options', argumentsRegExp = /((([^'"\s]+?=)?('.*?'|".*?"))|.*?)\s/g, literalNumberStringBooleanRegExp = /^(('.*?'|".*?"|[0-9]+\.?[0-9]*|true|false|null|undefined)|((.+?)=(('.*?'|".*?"|[0-9]+\.?[0-9]*|true|false)|(.+))))$/, makeLookupLiteral = function (type) {
            return '{get:"' + type.replace(/"/g, '\\"') + '"}';
        }, isLookup = function (obj) {
            return obj && typeof obj.get === 'string';
        }, isObserveLike = function (obj) {
            return obj instanceof can.Map || obj && !!obj._get;
        }, isArrayLike = function (obj) {
            return obj && obj.splice && typeof obj.length === 'number';
        }, makeConvertToScopes = function (original, scope, options) {
            var originalWithScope = function (ctx, opts) {
                return original(ctx || scope, opts);
            };
            return function (updatedScope, updatedOptions) {
                if (updatedScope !== undefined && !(updatedScope instanceof can.view.Scope)) {
                    updatedScope = scope.add(updatedScope);
                }
                if (updatedOptions !== undefined && !(updatedOptions instanceof can.view.Options)) {
                    updatedOptions = options.add(updatedOptions);
                }
                return originalWithScope(updatedScope, updatedOptions || options);
            };
        };
    var Mustache = function (options, helpers) {
        if (this.constructor !== Mustache) {
            var mustache = new Mustache(options);
            return function (data, options) {
                return mustache.render(data, options);
            };
        }
        if (typeof options === 'function') {
            this.template = { fn: options };
            return;
        }
        can.extend(this, options);
        this.template = this.scanner.scan(this.text, this.name);
    };
    can.Mustache = can.global.Mustache = Mustache;
    Mustache.prototype.render = function (data, options) {
        if (!(data instanceof can.view.Scope)) {
            data = new can.view.Scope(data || {});
        }
        if (!(options instanceof can.view.Options)) {
            options = new can.view.Options(options || {});
        }
        options = options || {};
        return this.template.fn.call(data, data, options);
    };
    can.extend(Mustache.prototype, {
        scanner: new can.view.Scanner({
            text: {
                start: '',
                scope: SCOPE,
                options: ',options: options',
                argNames: ARG_NAMES
            },
            tokens: [
                [
                    'returnLeft',
                    '{{{',
                    '{{[{&]'
                ],
                [
                    'commentFull',
                    '{{!}}',
                    '^[\\s\\t]*{{!.+?}}\\n'
                ],
                [
                    'commentLeft',
                    '{{!',
                    '(\\n[\\s\\t]*{{!|{{!)'
                ],
                [
                    'escapeFull',
                    '{{}}',
                    '(^[\\s\\t]*{{[#/^][^}]+?}}\\n|\\n[\\s\\t]*{{[#/^][^}]+?}}\\n|\\n[\\s\\t]*{{[#/^][^}]+?}}$)',
                    function (content) {
                        return {
                            before: /^\n.+?\n$/.test(content) ? '\n' : '',
                            content: content.match(/\{\{(.+?)\}\}/)[1] || ''
                        };
                    }
                ],
                [
                    'escapeLeft',
                    '{{'
                ],
                [
                    'returnRight',
                    '}}}'
                ],
                [
                    'right',
                    '}}'
                ]
            ],
            helpers: [
                {
                    name: /^>[\s]*\w*/,
                    fn: function (content, cmd) {
                        var templateName = can.trim(content.replace(/^>\s?/, '')).replace(/["|']/g, '');
                        return 'can.Mustache.renderPartial(\'' + templateName + '\',' + ARG_NAMES + ')';
                    }
                },
                {
                    name: /^\s*data\s/,
                    fn: function (content, cmd) {
                        var attr = content.match(/["|'](.*)["|']/)[1];
                        return 'can.proxy(function(__){' + 'can.data(can.$(__),\'' + attr + '\', this.attr(\'.\')); }, ' + SCOPE + ')';
                    }
                },
                {
                    name: /\s*\(([\$\w]+)\)\s*->([^\n]*)/,
                    fn: function (content) {
                        var quickFunc = /\s*\(([\$\w]+)\)\s*->([^\n]*)/, parts = content.match(quickFunc);
                        return 'can.proxy(function(__){var ' + parts[1] + '=can.$(__);with(' + SCOPE + '.attr(\'.\')){' + parts[2] + '}}, this);';
                    }
                },
                {
                    name: /^.*$/,
                    fn: function (content, cmd) {
                        var mode = false, result = {
                                content: '',
                                startTxt: false,
                                startOnlyTxt: false,
                                end: false
                            };
                        content = can.trim(content);
                        if (content.length && (mode = content.match(/^([#^/]|else$)/))) {
                            mode = mode[0];
                            switch (mode) {
                            case '#':
                            case '^':
                                if (cmd.specialAttribute) {
                                    result.startOnlyTxt = true;
                                } else {
                                    result.startTxt = true;
                                    result.escaped = 0;
                                }
                                break;
                            case '/':
                                result.end = true;
                                result.content += 'return ___v1ew.join("");}}])';
                                return result;
                            }
                            content = content.substring(1);
                        }
                        if (mode !== 'else') {
                            var args = [], hashes = [], i = 0, m;
                            result.content += 'can.Mustache.txt(\n' + (cmd.specialAttribute ? SPECIAL_CONTEXT_OBJ : CONTEXT_OBJ) + ',\n' + (mode ? '"' + mode + '"' : 'null') + ',';
                            (can.trim(content) + ' ').replace(argumentsRegExp, function (whole, arg) {
                                if (i && (m = arg.match(literalNumberStringBooleanRegExp))) {
                                    if (m[2]) {
                                        args.push(m[0]);
                                    } else {
                                        hashes.push(m[4] + ':' + (m[6] ? m[6] : makeLookupLiteral(m[5])));
                                    }
                                } else {
                                    args.push(makeLookupLiteral(arg));
                                }
                                i++;
                            });
                            result.content += args.join(',');
                            if (hashes.length) {
                                result.content += ',{' + HASH + ':{' + hashes.join(',') + '}}';
                            }
                        }
                        if (mode && mode !== 'else') {
                            result.content += ',[\n\n';
                        }
                        switch (mode) {
                        case '^':
                        case '#':
                            result.content += '{fn:function(' + ARG_NAMES + '){var ___v1ew = [];';
                            break;
                        case 'else':
                            result.content += 'return ___v1ew.join("");}},\n{inverse:function(' + ARG_NAMES + '){\nvar ___v1ew = [];';
                            break;
                        default:
                            result.content += ')';
                            break;
                        }
                        if (!mode) {
                            result.startTxt = true;
                            result.end = true;
                        }
                        return result;
                    }
                }
            ]
        })
    });
    var helpers = can.view.Scanner.prototype.helpers;
    for (var i = 0; i < helpers.length; i++) {
        Mustache.prototype.scanner.helpers.unshift(helpers[i]);
    }
    Mustache.txt = function (scopeAndOptions, mode, name) {
        var scope = scopeAndOptions.scope, options = scopeAndOptions.options, args = [], helperOptions = {
                fn: function () {
                },
                inverse: function () {
                }
            }, hash, context = scope.attr('.'), getHelper = true, helper;
        for (var i = 3; i < arguments.length; i++) {
            var arg = arguments[i];
            if (mode && can.isArray(arg)) {
                helperOptions = can.extend.apply(can, [helperOptions].concat(arg));
            } else if (arg && arg[HASH]) {
                hash = arg[HASH];
                for (var prop in hash) {
                    if (isLookup(hash[prop])) {
                        hash[prop] = Mustache.get(hash[prop].get, scopeAndOptions, false, true);
                    }
                }
            } else if (arg && isLookup(arg)) {
                args.push(Mustache.get(arg.get, scopeAndOptions, false, true, true));
            } else {
                args.push(arg);
            }
        }
        if (isLookup(name)) {
            var get = name.get;
            name = Mustache.get(name.get, scopeAndOptions, args.length, false);
            getHelper = get === name;
        }
        helperOptions.fn = makeConvertToScopes(helperOptions.fn, scope, options);
        helperOptions.inverse = makeConvertToScopes(helperOptions.inverse, scope, options);
        if (mode === '^') {
            var tmp = helperOptions.fn;
            helperOptions.fn = helperOptions.inverse;
            helperOptions.inverse = tmp;
        }
        if (helper = getHelper && (typeof name === 'string' && Mustache.getHelper(name, options)) || can.isFunction(name) && !name.isComputed && { fn: name }) {
            can.extend(helperOptions, {
                context: context,
                scope: scope,
                contexts: scope,
                hash: hash
            });
            args.push(helperOptions);
            return function () {
                var result = helper.fn.apply(context, args);
                return result == null ? '' : result;
            };
        }
        return function () {
            var value;
            if (can.isFunction(name) && name.isComputed) {
                value = name();
            } else {
                value = name;
            }
            var validArgs = args.length ? args : [value], valid = true, result = [], i, argIsObserve, arg;
            if (mode) {
                for (i = 0; i < validArgs.length; i++) {
                    arg = validArgs[i];
                    argIsObserve = typeof arg !== 'undefined' && isObserveLike(arg);
                    if (isArrayLike(arg)) {
                        if (mode === '#') {
                            valid = valid && !!(argIsObserve ? arg.attr('length') : arg.length);
                        } else if (mode === '^') {
                            valid = valid && !(argIsObserve ? arg.attr('length') : arg.length);
                        }
                    } else {
                        valid = mode === '#' ? valid && !!arg : mode === '^' ? valid && !arg : valid;
                    }
                }
            }
            if (valid) {
                if (mode === '#') {
                    if (isArrayLike(value)) {
                        var isObserveList = isObserveLike(value);
                        for (i = 0; i < value.length; i++) {
                            result.push(helperOptions.fn(isObserveList ? value.attr('' + i) : value[i]));
                        }
                        return result.join('');
                    } else {
                        return helperOptions.fn(value || {}) || '';
                    }
                } else if (mode === '^') {
                    return helperOptions.inverse(value || {}) || '';
                } else {
                    return '' + (value != null ? value : '');
                }
            }
            return '';
        };
    };
    Mustache.get = function (key, scopeAndOptions, isHelper, isArgument, isLookup) {
        var context = scopeAndOptions.scope.attr('.'), options = scopeAndOptions.options || {};
        if (isHelper) {
            if (Mustache.getHelper(key, options)) {
                return key;
            }
            if (scopeAndOptions.scope && can.isFunction(context[key])) {
                return context[key];
            }
        }
        var computeData = scopeAndOptions.scope.computeData(key, {
                isArgument: isArgument,
                args: [
                    context,
                    scopeAndOptions.scope
                ]
            }), compute = computeData.compute;
        can.compute.temporarilyBind(compute);
        var initialValue = computeData.initialValue, helperObj = Mustache.getHelper(key, options);
        if (!isLookup && (initialValue === undefined || computeData.scope !== scopeAndOptions.scope) && Mustache.getHelper(key, options)) {
            return key;
        }
        if (!compute.computeInstance.hasDependencies) {
            return initialValue;
        } else {
            return compute;
        }
    };
    Mustache.resolve = function (value) {
        if (isObserveLike(value) && isArrayLike(value) && value.attr('length')) {
            return value;
        } else if (can.isFunction(value)) {
            return value();
        } else {
            return value;
        }
    };
    Mustache._helpers = {};
    Mustache.registerHelper = function (name, fn) {
        this._helpers[name] = {
            name: name,
            fn: fn
        };
    };
    Mustache.registerSimpleHelper = function (name, fn) {
        Mustache.registerHelper(name, can.view.simpleHelper(fn));
    };
    Mustache.getHelper = function (name, options) {
        var helper;
        if (options) {
            helper = options.get('helpers.' + name, { proxyMethods: false });
        }
        return helper ? { fn: helper } : this._helpers[name];
    };
    Mustache.render = function (partial, scope, options) {
        if (!can.view.cached[partial]) {
            can.__notObserve(function () {
                var scopePartialName = scope.attr(partial);
                if (scopePartialName) {
                    partial = scopePartialName;
                }
            })();
        }
        return can.view.render(partial, scope, options);
    };
    Mustache.safeString = function (str) {
        return {
            toString: function () {
                return str;
            }
        };
    };
    Mustache.renderPartial = function (partialName, scope, options) {
        var partial = options.get('partials.' + partialName, { proxyMethods: false });
        if (partial) {
            return partial.render ? partial.render(scope, options) : partial(scope, options);
        } else {
            return can.Mustache.render(partialName, scope, options);
        }
    };
    can.each({
        'if': function (expr, options) {
            var value;
            if (can.isFunction(expr)) {
                value = can.compute.truthy(expr)();
            } else {
                value = !!Mustache.resolve(expr);
            }
            if (value) {
                return options.fn(options.contexts || this);
            } else {
                return options.inverse(options.contexts || this);
            }
        },
        'is': function () {
            var lastValue, curValue, options = arguments[arguments.length - 1];
            if (arguments.length - 2 <= 0) {
                return options.inverse();
            }
            for (var i = 0; i < arguments.length - 1; i++) {
                curValue = Mustache.resolve(arguments[i]);
                curValue = can.isFunction(curValue) ? curValue() : curValue;
                if (i > 0) {
                    if (curValue !== lastValue) {
                        return options.inverse();
                    }
                }
                lastValue = curValue;
            }
            return options.fn();
        },
        'eq': function () {
            return Mustache._helpers.is.fn.apply(this, arguments);
        },
        'unless': function (expr, options) {
            return Mustache._helpers['if'].fn.apply(this, [
                expr,
                can.extend({}, options, {
                    fn: options.inverse,
                    inverse: options.fn
                })
            ]);
        },
        'each': function (expr, options) {
            var resolved = Mustache.resolve(expr), result = [], keys, key, i;
            if (can.view.lists && (resolved instanceof can.List || expr && expr.isComputed && resolved === undefined)) {
                return can.view.lists(expr, function (item, index) {
                    return options.fn(options.scope.add({ '@index': index }).add(item));
                });
            }
            expr = resolved;
            if (!!expr && isArrayLike(expr)) {
                for (i = 0; i < expr.length; i++) {
                    result.push(options.fn(options.scope.add({ '@index': i }).add(expr[i])));
                }
                return result.join('');
            } else if (isObserveLike(expr)) {
                keys = can.Map.keys(expr);
                for (i = 0; i < keys.length; i++) {
                    key = keys[i];
                    result.push(options.fn(options.scope.add({ '@key': key }).add(expr[key])));
                }
                return result.join('');
            } else if (expr instanceof Object) {
                for (key in expr) {
                    result.push(options.fn(options.scope.add({ '@key': key }).add(expr[key])));
                }
                return result.join('');
            }
        },
        'with': function (expr, options) {
            var ctx = expr;
            expr = Mustache.resolve(expr);
            if (!!expr) {
                return options.fn(ctx);
            }
        },
        'log': function (expr, options) {
            if (typeof console !== 'undefined' && console.log) {
                if (!options) {
                    console.log(expr.context);
                } else {
                    console.log(expr, options.context);
                }
            }
        },
        '@index': function (offset, options) {
            if (!options) {
                options = offset;
                offset = 0;
            }
            var index = options.scope.read('@index', { isArgument: true }).value;
            return '' + ((can.isFunction(index) ? index() : index) + offset);
        }
    }, function (fn, name) {
        Mustache.registerHelper(name, fn);
    });
    can.view.register({
        suffix: 'mustache',
        contentType: 'x-mustache-template',
        script: function (id, src) {
            return 'can.Mustache(function(' + ARG_NAMES + ') { ' + new Mustache({
                text: src,
                name: id
            }).template.out + ' })';
        },
        renderer: function (id, text) {
            return Mustache({
                text: text,
                name: id
            });
        }
    });
    can.mustache.registerHelper = can.proxy(can.Mustache.registerHelper, can.Mustache);
    can.mustache.safeString = can.Mustache.safeString;
    return can;
});
/*can/observe/observe*/
define('can/observe/observe', [
    'can/util/util',
    'can/map/map',
    'can/list/list',
    'can/compute/compute'
], function (can) {
    can.Observe = can.Map;
    can.Observe.startBatch = can.batch.start;
    can.Observe.stopBatch = can.batch.stop;
    can.Observe.triggerBatch = can.batch.trigger;
    return can;
});
/*can/util/view_model/view_model*/
define('can/util/view_model/view_model', ['can/util/util'], function (can) {
    var $ = can.$;
    if ($.fn) {
        $.fn.scope = $.fn.viewModel = function () {
            return can.viewModel.apply(can, [this].concat(can.makeArray(arguments)));
        };
    }
});
/*can/component/component*/
define('can/component/component', [
    'can/util/util',
    'can/view/callbacks/callbacks',
    'can/view/elements',
    'can/view/bindings/bindings',
    'can/control/control',
    'can/observe/observe',
    'can/view/mustache/mustache',
    'can/util/view_model/view_model'
], function (can, viewCallbacks, elements, bindings) {
    var paramReplacer = /\{([^\}]+)\}/g;
    var Component = can.Component = can.Construct.extend({
        setup: function () {
            can.Construct.setup.apply(this, arguments);
            if (can.Component) {
                var self = this, protoViewModel = this.prototype.scope || this.prototype.viewModel;
                this.Control = ComponentControl.extend(this.prototype.events);
                if (!protoViewModel || typeof protoViewModel === 'object' && !(protoViewModel instanceof can.Map)) {
                    this.Map = can.Map.extend(protoViewModel || {});
                } else if (protoViewModel.prototype instanceof can.Map) {
                    this.Map = protoViewModel;
                }
                this.attributeScopeMappings = {};
                can.each(this.Map ? this.Map.defaults : {}, function (val, prop) {
                    if (val === '@') {
                        self.attributeScopeMappings[prop] = prop;
                    }
                });
                if (this.prototype.template) {
                    if (typeof this.prototype.template === 'function') {
                        var temp = this.prototype.template;
                        this.renderer = function () {
                            return can.view.frag(temp.apply(null, arguments));
                        };
                    } else {
                        this.renderer = can.view.mustache(this.prototype.template);
                    }
                }
                can.view.tag(this.prototype.tag, function (el, options) {
                    new self(el, options);
                });
            }
        }
    }, {
        setup: function (el, componentTagData) {
            var initialViewModelData = {}, component = this, lexicalContent = (typeof this.leakScope === 'undefined' ? false : !this.leakScope) && !!this.template, viewModel, frag, teardownFunctions = [], callTeardownFunctions = function () {
                    for (var i = 0, len = teardownFunctions.length; i < len; i++) {
                        teardownFunctions[i]();
                    }
                }, $el = can.$(el), setupBindings = !can.data($el, 'preventDataBindings');
            can.each(this.constructor.attributeScopeMappings, function (val, prop) {
                initialViewModelData[prop] = el.getAttribute(can.hyphenate(val));
            });
            if (setupBindings) {
                teardownFunctions.push(bindings.behaviors.viewModel(el, componentTagData, function (initialViewModelData) {
                    initialViewModelData['%root'] = componentTagData.scope.attr('%root');
                    var protoViewModel = component.scope || component.viewModel;
                    if (component.constructor.Map) {
                        viewModel = new component.constructor.Map(initialViewModelData);
                    } else if (protoViewModel instanceof can.Map) {
                        viewModel = protoViewModel;
                    } else if (can.isFunction(protoViewModel)) {
                        var scopeResult = protoViewModel.call(component, initialViewModelData, componentTagData.scope, el);
                        if (scopeResult instanceof can.Map) {
                            viewModel = scopeResult;
                        } else if (scopeResult.prototype instanceof can.Map) {
                            viewModel = new scopeResult(initialViewModelData);
                        } else {
                            viewModel = new (can.Map.extend(scopeResult))(initialViewModelData);
                        }
                    }
                    var oldSerialize = viewModel.serialize;
                    viewModel.serialize = function () {
                        var result = oldSerialize.apply(this, arguments);
                        delete result['%root'];
                        return result;
                    };
                    return viewModel;
                }, initialViewModelData));
            }
            this.scope = this.viewModel = viewModel;
            can.data($el, 'scope', this.viewModel);
            can.data($el, 'viewModel', this.viewModel);
            can.data($el, 'preventDataBindings', true);
            var shadowScope;
            if (lexicalContent) {
                shadowScope = can.view.Scope.refsScope().add(this.viewModel, { viewModel: true });
            } else {
                shadowScope = (this.constructor.renderer ? componentTagData.scope.add(new can.view.Scope.Refs()) : componentTagData.scope).add(this.viewModel, { viewModel: true });
            }
            var options = { helpers: {} }, addHelper = function (name, fn) {
                    options.helpers[name] = function () {
                        return fn.apply(viewModel, arguments);
                    };
                };
            can.each(this.helpers || {}, function (val, prop) {
                if (can.isFunction(val)) {
                    addHelper(prop, val);
                }
            });
            can.each(this.simpleHelpers || {}, function (val, prop) {
                addHelper(prop, can.view.simpleHelper(val));
            });
            this._control = new this.constructor.Control(el, {
                scope: this.viewModel,
                viewModel: this.viewModel,
                destroy: callTeardownFunctions
            });
            var nodeList = can.view.nodeLists.register([], undefined, componentTagData.parentNodeList || true, false);
            nodeList.expression = '<' + this.tag + '>';
            teardownFunctions.push(function () {
                can.view.nodeLists.unregister(nodeList);
            });
            if (this.constructor.renderer) {
                if (!options.tags) {
                    options.tags = {};
                }
                options.tags.content = function contentHookup(el, contentTagData) {
                    var subtemplate = componentTagData.subtemplate || contentTagData.subtemplate, renderingLightContent = subtemplate === componentTagData.subtemplate;
                    if (subtemplate) {
                        delete options.tags.content;
                        var lightTemplateData;
                        if (renderingLightContent) {
                            if (lexicalContent) {
                                lightTemplateData = componentTagData;
                            } else {
                                lightTemplateData = {
                                    scope: contentTagData.scope.cloneFromRef(),
                                    options: contentTagData.options
                                };
                            }
                        } else {
                            lightTemplateData = contentTagData;
                        }
                        if (contentTagData.parentNodeList) {
                            var frag = subtemplate(lightTemplateData.scope, lightTemplateData.options, contentTagData.parentNodeList);
                            elements.replace([el], frag);
                        } else {
                            can.view.live.replace([el], subtemplate(lightTemplateData.scope, lightTemplateData.options));
                        }
                        options.tags.content = contentHookup;
                    }
                };
                frag = this.constructor.renderer(shadowScope, componentTagData.options.add(options), nodeList);
            } else {
                if (componentTagData.templateType === 'legacy') {
                    frag = can.view.frag(componentTagData.subtemplate ? componentTagData.subtemplate(shadowScope, componentTagData.options.add(options)) : '');
                } else {
                    frag = componentTagData.subtemplate ? componentTagData.subtemplate(shadowScope, componentTagData.options.add(options), nodeList) : document.createDocumentFragment();
                }
            }
            can.appendChild(el, frag, can.document);
            can.view.nodeLists.update(nodeList, can.childNodes(el));
        }
    });
    var ComponentControl = can.Control.extend({
        _lookup: function (options) {
            return [
                options.scope,
                options,
                window
            ];
        },
        _action: function (methodName, options, controlInstance) {
            var hasObjectLookup, readyCompute;
            paramReplacer.lastIndex = 0;
            hasObjectLookup = paramReplacer.test(methodName);
            if (!controlInstance && hasObjectLookup) {
                return;
            } else if (!hasObjectLookup) {
                return can.Control._action.apply(this, arguments);
            } else {
                readyCompute = can.compute(function () {
                    var delegate;
                    var name = methodName.replace(paramReplacer, function (matched, key) {
                        var value;
                        if (key === 'scope' || key === 'viewModel') {
                            delegate = options.viewModel;
                            return '';
                        }
                        key = key.replace(/^(scope|^viewModel)\./, '');
                        value = can.compute.read(options.viewModel, can.compute.read.reads(key), { readCompute: false }).value;
                        if (value === undefined) {
                            value = can.getObject(key);
                        }
                        if (typeof value === 'string') {
                            return value;
                        } else {
                            delegate = value;
                            return '';
                        }
                    });
                    var parts = name.split(/\s+/g), event = parts.pop();
                    return {
                        processor: this.processors[event] || this.processors.click,
                        parts: [
                            name,
                            parts.join(' '),
                            event
                        ],
                        delegate: delegate || undefined
                    };
                }, this);
                var handler = function (ev, ready) {
                    controlInstance._bindings.control[methodName](controlInstance.element);
                    controlInstance._bindings.control[methodName] = ready.processor(ready.delegate || controlInstance.element, ready.parts[2], ready.parts[1], methodName, controlInstance);
                };
                readyCompute.bind('change', handler);
                controlInstance._bindings.readyComputes[methodName] = {
                    compute: readyCompute,
                    handler: handler
                };
                return readyCompute();
            }
        }
    }, {
        setup: function (el, options) {
            this.scope = options.scope;
            this.viewModel = options.viewModel;
            return can.Control.prototype.setup.call(this, el, options);
        },
        off: function () {
            if (this._bindings) {
                can.each(this._bindings.readyComputes || {}, function (value) {
                    value.compute.unbind('change', value.handler);
                });
            }
            can.Control.prototype.off.apply(this, arguments);
            this._bindings.readyComputes = {};
        },
        destroy: function () {
            can.Control.prototype.destroy.apply(this, arguments);
            if (typeof this.options.destroy === 'function') {
                this.options.destroy.apply(this, arguments);
            }
        }
    });
    var $ = can.$;
    if ($.fn) {
        $.fn.scope = $.fn.viewModel = function () {
            return can.viewModel.apply(can, [this].concat(can.makeArray(arguments)));
        };
    }
    return Component;
});
/*can/can*/
define('can/can', [
    'can/util/util',
    'can/control/route/route',
    'can/model/model',
    'can/map/define/define',
    'can/view/mustache/mustache',
    'can/component/component'
], function (can) {
    return can;
});
/*passbolt-mad/lib/can/utilString*/
define('passbolt-mad/lib/can/utilString', ['can/util/util'], function (can) {
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strReplacer = /\{([^\}]+)\}/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, getNext = function (obj, prop, add) {
            var result = obj[prop];
            if (result === undefined && add === true) {
                result = obj[prop] = {};
            }
            return result;
        }, isContainer = function (current) {
            return /^f|^o/.test(typeof current);
        }, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        };
    can.extend(can, {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        getObject: function (name, roots, add, value) {
            var parts = name ? name.split('.') : [], length = parts.length, current, r = 0, i, container, rootsLength;
            roots = can.isArray(roots) ? roots : [roots || window];
            rootsLength = roots.length;
            if (!length) {
                return roots[0];
            }
            for (r; r < rootsLength; r++) {
                current = roots[r];
                container = undefined;
                for (i = 0; i < length && isContainer(current); i++) {
                    container = current;
                    current = getNext(container, parts[i]);
                }
                if (container !== undefined && current !== undefined) {
                    break;
                }
            }
            if (add === false && current !== undefined) {
                delete container[parts[i - 1]];
            }
            if (add === true && current === undefined) {
                current = roots[0];
                for (i = 0; i < length && isContainer(current); i++) {
                    current = getNext(current, parts[i], true);
                }
            }
            if (add === true && typeof value != 'undefined') {
                current = roots[0];
                container = undefined;
                for (i = 0; i < length && isContainer(current); i++) {
                    container = current;
                    current = getNext(current, parts[i], true);
                }
                container[parts[i - 1]] = value;
            }
            return current;
        },
        capitalize: function (s, cache) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str, offset) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        sub: function (str, data, remove) {
            var obs = [];
            str = str || '';
            obs.push(str.replace(strReplacer, function (whole, inside) {
                var ob = can.getObject(inside, data, remove === true ? false : undefined);
                if (ob === undefined || ob === null) {
                    obs = null;
                    return '';
                }
                if (isContainer(ob) && obs) {
                    obs.push(ob);
                    return '';
                }
                return '' + ob;
            }));
            return obs === null ? obs : obs.length <= 1 ? obs[0] : obs;
        },
        replacer: strReplacer,
        undHash: strUndHash
    });
    return can;
});
/*can/construct/super/super*/
define('can/construct/super/super', [
    'can/util/util',
    'can/construct/construct'
], function (can, Construct) {
    var isFunction = can.isFunction, fnTest = /xyz/.test(function () {
            return this.xyz;
        }) ? /\b_super\b/ : /.*/, getset = [
            'get',
            'set'
        ], getSuper = function (base, name, fn) {
            return function () {
                var tmp = this._super, ret;
                this._super = base[name];
                ret = fn.apply(this, arguments);
                this._super = tmp;
                return ret;
            };
        };
    can.Construct._defineProperty = function (addTo, base, name, descriptor) {
        var _super = Object.getOwnPropertyDescriptor(base, name);
        if (_super) {
            can.each(getset, function (method) {
                if (isFunction(_super[method]) && isFunction(descriptor[method])) {
                    descriptor[method] = getSuper(_super, method, descriptor[method]);
                } else if (!isFunction(descriptor[method])) {
                    descriptor[method] = _super[method];
                }
            });
        }
        Object.defineProperty(addTo, name, descriptor);
    };
    can.Construct._overwrite = function (addTo, base, name, val) {
        addTo[name] = isFunction(val) && isFunction(base[name]) && fnTest.test(val) ? getSuper(base, name, val) : val;
    };
    return can;
});
/*passbolt-mad/util/string/uuid*/
define('passbolt-mad/util/string/uuid', [
    'module',
    '@loader',
    'require'
], function (module, loader, require) {
    loader.get('@@global-helpers').prepareGlobal({
        require: require,
        name: module.id,
        deps: []
    });
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**\n * Passbolt ~ Open source password manager for teams\n * Copyright (c) Passbolt SARL (https://www.passbolt.com)\n *\n * Licensed under GNU Affero General Public License version 3 of the or any later version.\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Passbolt SARL (https://www.passbolt.com)\n * @license       https://opensource.org/licenses/AGPL-3.0 AGPL License\n * @link          https://www.passbolt.com Passbolt(tm)\n */\n\n/*\nUsage 1: define the default prefix by using an object with the property prefix as a parameter which contains a string value; {prefix: \'id\'}\nUsage 2: call the function uuid() with a string parameter p to be used as a prefix to generate a random uuid;\nUsage 3: call the function uuid() with no parameters to generate a uuid with the default prefix; defaul prefix: \'\' (empty string)\n*/\n\n/* Generate fragment of random numbers */\n_uuidlet = function () {\n\treturn (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n};\n/* Generates random uuid */\nuuid = function () {\n\treturn (_uuidlet() + _uuidlet() + "-" + _uuidlet() + "-" + _uuidlet() + "-" + _uuidlet() + "-" + _uuidlet() + _uuidlet() + _uuidlet());\n};';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*passbolt-mad/util/util*/
define('passbolt-mad/util/util', [
    'exports',
    'can/can',
    'passbolt-mad/lib/can/utilString',
    'can/construct/super/super',
    'passbolt-mad/util/string/uuid'
], function (exports, _can) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _can2 = _interopRequireDefault(_can);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var glbl = typeof window !== 'undefined' ? window : global, mad = {};
    glbl.mad = mad;
    mad.global = mad;
    mad.config = { rootElement: $('body') };
    mad._controls = {};
    mad.getControl = function (id, controlName) {
        if (controlName == undefined) {
            for (controlName in mad._controls[id]) {
                break;
            }
        }
        return mad._controls[id][controlName];
    };
    mad.referenceControl = function (control) {
        var id = control.getId();
        if (mad._controls[id] == undefined) {
            mad._controls[id] = {};
        }
        mad._controls[id][control.constructor.fullName] = control;
    };
    mad.unreferenceControl = function (control) {
        delete mad._controls[control.getId()][control.constructor.fullName];
    };
    mad.setGlobal = function (name, value) {
        glbl[name] = value;
    };
    exports.default = mad;
});
/*passbolt-mad/config/config*/
define('passbolt-mad/config/config', [
    'exports',
    'passbolt-mad/util/util'
], function (exports, _util) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _util2 = _interopRequireDefault(_util);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _util2.default.config = _util2.default.config || {};
    var MadConfig = can.Construct.extend('mad.Config', {
        loadFile: function loadFile(url) {
            var self = this;
            $.ajax({
                url: url,
                async: false,
                dataType: 'json',
                success: function success(data) {
                    self.load(data);
                }
            });
        },
        load: function load(config) {
            $.extend(true, _util2.default.config, config);
        },
        read: function read(name) {
            return can.getObject(name, _util2.default.config);
        },
        write: function write(name, value) {
            can.getObject(name, _util2.default.config, true, value);
        },
        flush: function flush() {
            for (var i in _util2.default.config) {
                delete _util2.default.config[i];
            }
        }
    }, {});
    exports.default = MadConfig;
});
/*passbolt-mad/helper/html*/
define('passbolt-mad/helper/html', [
    'exports',
    'can/construct/construct'
], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var HtmlHelper = can.Construct.extend('mad.helper.Html', {
        position: function position(el, options) {
            if (typeof options.coordinates != 'undefined') {
                el.css({
                    position: 'absolute',
                    left: options.coordinates.x + 'px',
                    top: options.coordinates.y + 'px'
                });
            } else if (typeof options.reference != 'undefined') {
                el.position({
                    my: options.reference.my,
                    at: options.reference.at,
                    of: options.reference.of
                });
            }
        },
        create: function create(refElement, position, content) {
            var returnValue = $(content);
            if (!(refElement instanceof jQuery)) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'refElement');
            }
            if (refElement.length == 0) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'refElement');
            }
            switch (position) {
            case 'inside_replace':
                refElement.empty();
                returnValue = returnValue.prependTo(refElement);
                break;
            case 'replace_with':
                refElement.replaceWith(returnValue);
                break;
            case 'first':
                returnValue = returnValue.prependTo(refElement);
                break;
            case 'last':
                returnValue = returnValue.appendTo(refElement);
                break;
            case 'before':
                returnValue = returnValue.insertBefore(refElement);
                break;
            case 'after':
                returnValue = returnValue.insertAfter(refElement);
                break;
            default:
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'position');
            }
            return returnValue;
        }
    }, {});
    exports.default = HtmlHelper;
});
/*passbolt-mad/control/control*/
define('passbolt-mad/control/control', [
    'exports',
    'passbolt-mad/util/util'
], function (exports, _util) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _util2 = _interopRequireDefault(_util);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Control = can.Control.extend('mad.Control', {
        init: function init(el, options) {
            if (!el || !$(el).length) {
                throw new _util2.default.Exception('The parameter "el" (' + $(el).selector + ') should refer to an existing DOM node.');
            }
            if (typeof options.id == 'undefined' || options.id == null || options.id == '') {
                var elId = this.element.attr('id');
                if (typeof elId != 'undefined' && elId != '') {
                    options.id = elId;
                } else {
                    options.id = uuid();
                    this.element.attr('id', options.id);
                }
            } else {
                var elId = this.element.attr('id');
                if (elId != '') {
                    console.warn('Controller id is defined by options and by template, the template id will be overriden by the option id.');
                }
                this.element.attr('id', options.id);
            }
            this.options = $.extend(true, {}, this.options, options);
            _util2.default.referenceControl(this);
        },
        destroy: function destroy() {
            _util2.default.unreferenceControl(this);
            this._super();
        },
        getAlias: function getAlias(type) {
            type = typeof type == 'undefined' ? 'camel' : type;
            var returnValue = '';
            var alias = this.constructor.shortName.replace(/Controller$/, '');
            switch (type) {
            case 'under':
                returnValue = jQuery.String.underscore(alias);
                break;
            case 'camel':
            default:
                returnValue = alias;
                break;
            }
            return returnValue;
        },
        getComponent: function getComponent(id) {
            console.warn('This function is deprecated, replace it with mad.getControl(id)');
            return _util2.default.app.getComponent(id);
        },
        getClass: function getClass() {
            return this.constructor;
        },
        getId: function getId() {
            return this.options.id;
        },
        remove: function remove() {
            this.element.remove();
        }
    });
    exports.default = Control;
});
/*passbolt-mad/control/bus*/
define('passbolt-mad/control/bus', [
    'exports',
    'passbolt-mad/control/control'
], function (exports, _control) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _control2 = _interopRequireDefault(_control);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Bus = _control2.default.extend('mad.Bus', {
        bus: null,
        singleton: function singleton(el) {
            if (Bus.bus) {
                return Bus.bus;
            }
            var bus = new Bus(el);
            Bus.bus = bus;
            Bus.element = bus.element;
            return bus;
        },
        destroy: function destroy() {
            Bus.bus.destroy();
            Bus.bus = null;
        },
        trigger: function trigger(eventName, eventData) {
            var data = typeof eventData != 'undefined' ? eventData : [];
            var element = Bus.element;
            element.trigger(eventName, data);
            if (!steal.isRhino) {
                var event = document.createEvent('CustomEvent');
                event.initCustomEvent(eventName, true, true, data);
                document.documentElement.dispatchEvent(event);
            }
        },
        triggerRequest: function triggerRequest(rqstName, rqstData) {
            var data = [];
            var deferred = $.Deferred();
            if (Object.prototype.toString.call(rqstData) == '[object Array]') {
                data = rqstData;
            } else if (Object.prototype.toString.call(rqstData) == '[object Object]') {
                data = [rqstData];
            }
            data.unshift(deferred);
            Bus.bus.trigger(rqstName, data);
            return deferred.promise();
        },
        bind: function bind(eventName, func) {
            var element = Bus.element;
            element.bind(eventName, func);
        }
    }, {});
    window.addEventListener('addon-message', function (event) {
        Bus.trigger(event.detail.event, event.detail.data);
    }, false);
    exports.default = Bus;
});
/*passbolt-mad/util/lang/i18n*/
define('passbolt-mad/util/lang/i18n', [
    'exports',
    'passbolt-mad/util/util'
], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var glbl = typeof window !== 'undefined' ? window : global;
    var __ = function __(str) {
        var args = Array.prototype.slice.call(arguments, 1);
        return I18n.translate(str, args);
    };
    glbl.__ = __;
    var I18n = can.Construct.extend('mad.I18n', {
        dico: {},
        translate: function translate(str, vars) {
            var vars = typeof vars != 'undefined' ? vars : [];
            return I18n.replaceHooks(this.getEntry(str), vars);
        },
        loadDico: function loadDico(dico) {
            for (var i in dico) {
                I18n.dico[i] = dico[i];
            }
        },
        replaceHooks: function replaceHooks(str, vars) {
            var returnValue = '', split = [];
            split = str.split('%s');
            if (split.length < 2) {
                return str;
            }
            var j;
            for (var i in vars) {
                j = parseInt(i);
                if (typeof vars[j] != 'string' && typeof vars[j] != 'number' && typeof vars[j] != 'boolean' && vars[j] !== null) {
                    throw mad.Exception.get('mad.I18n::replaceHooks() expects variables to be scalar');
                }
                returnValue += split[i] + vars[j];
            }
            returnValue += typeof split[j + 1] != 'undefined' ? split[j + 1] : '';
            return returnValue;
        },
        getEntry: function getEntry(str) {
            if (typeof I18n.dico[str] != 'undefined' && this.dico[str] != '') {
                return I18n.dico[str];
            }
            return str;
        }
    }, {});
    exports.default = I18n;
});
/*can/map/attributes/attributes*/
define('can/map/attributes/attributes', [
    'can/util/util',
    'can/map/map_helpers',
    'can/map/map',
    'can/list/list'
], function (can, mapHelpers, Map) {
    can.each([
        can.Map,
        can.Model
    ], function (clss) {
        if (clss === undefined) {
            return;
        }
        var isObject = function (obj) {
            return typeof obj === 'object' && obj !== null && obj;
        };
        can.extend(clss, {
            attributes: {},
            convert: {
                'date': function (str) {
                    var type = typeof str;
                    if (type === 'string') {
                        str = Date.parse(str);
                        return isNaN(str) ? null : new Date(str);
                    } else if (type === 'number') {
                        return new Date(str);
                    } else {
                        return str;
                    }
                },
                'number': function (val) {
                    return parseFloat(val);
                },
                'boolean': function (val) {
                    if (val === 'false' || val === '0' || !val) {
                        return false;
                    }
                    return true;
                },
                'default': function (val, oldVal, error, type) {
                    if (can.Map.prototype.isPrototypeOf(type.prototype) && typeof type.model === 'function' && typeof type.models === 'function') {
                        return type[can.isArray(val) ? 'models' : 'model'](val);
                    }
                    if (can.Map.prototype.isPrototypeOf(type.prototype)) {
                        if (can.isArray(val) && typeof type.List === 'function') {
                            return new type.List(val);
                        }
                        return new type(val);
                    }
                    if (typeof type === 'function') {
                        return type(val, oldVal);
                    }
                    var construct = can.getObject(type), context = window, realType;
                    if (type.indexOf('.') >= 0) {
                        realType = type.substring(0, type.lastIndexOf('.'));
                        context = can.getObject(realType);
                    }
                    return typeof construct === 'function' ? construct.call(context, val, oldVal) : val;
                }
            },
            serialize: {
                'default': function (val, type) {
                    return isObject(val) && val.serialize ? val.serialize() : val;
                },
                'date': function (val) {
                    return val && val.getTime();
                }
            }
        });
        var oldSetup = clss.setup;
        clss.setup = function (superClass, fullName, stat, proto) {
            var self = this;
            oldSetup.call(self, superClass, fullName, stat, proto);
            can.each(['attributes'], function (name) {
                if (!self[name] || superClass[name] === self[name]) {
                    self[name] = {};
                }
            });
            can.each([
                'convert',
                'serialize'
            ], function (name) {
                if (superClass[name] !== self[name]) {
                    self[name] = can.extend({}, superClass[name], self[name]);
                }
            });
        };
    });
    can.Map.prototype.__convert = function (prop, value) {
        var Class = this.constructor, oldVal = this.__get(prop), type, converter;
        if (Class.attributes) {
            type = Class.attributes[prop];
            converter = Class.convert[type] || Class.convert['default'];
        }
        return value === null || !type ? value : converter.call(Class, value, oldVal, function () {
        }, type);
    };
    var oldSerialize = can.Map.prototype.___serialize;
    can.Map.prototype.___serialize = function (name, val) {
        var constructor = this.constructor, type = constructor.attributes ? constructor.attributes[name] : 0, converter = constructor.serialize ? constructor.serialize[type] : 0;
        return val && typeof val.serialize === 'function' ? oldSerialize.call(this, name, val) : converter ? converter(val, type) : oldSerialize.apply(this, arguments);
    };
    var mapSerialize = can.Map.prototype.serialize;
    can.Map.prototype.serialize = function (attrName) {
        var baseResult = mapSerialize.apply(this, arguments);
        if (attrName) {
            return baseResult[attrName];
        } else {
            return baseResult;
        }
    };
    return can.Map;
});
/*passbolt-mad/model/serializer/cake_serializer*/
define('passbolt-mad/model/serializer/cake_serializer', [
    'exports',
    'can/construct/construct'
], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var CakeSerializer = can.Construct.extend('mad.model.serializer.CakeSerializer', {
        from: function from(data, Class) {
            var returnValue = {};
            returnValue = $.extend(true, {}, data, data[Class.shortName]);
            delete returnValue[Class.shortName];
            return returnValue;
        },
        to: function to(data, Class) {
            var returnValue = {};
            returnValue[Class.shortName] = {};
            for (var name in data) {
                if (Class.isModelAttribute(name)) {
                    returnValue[name] = data[name];
                } else {
                    returnValue[Class.shortName][name] = data[name];
                }
            }
            return returnValue;
        }
    }, {});
    exports.default = CakeSerializer;
});
/*passbolt-mad/model/list*/
define('passbolt-mad/model/list', [
    'exports',
    'passbolt-mad/model/model',
    'can/construct/construct'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var List = can.Construct.extend('mad.model.List', {
        indexOf: function indexOf(list, item) {
            var returnValue = -1;
            var itemId = item instanceof _model2.default ? item.id : item;
            can.each(list, function (raw, i) {
                if (raw.id == itemId) {
                    returnValue = i;
                    return false;
                }
            });
            return returnValue;
        },
        remove: function remove(list, item) {
            var i = List.indexOf(list, item);
            if (i != -1) {
                list.splice(i, 1);
                return true;
            }
            return false;
        }
    }, {});
    exports.default = List;
    _patchCircularDependency(_model2);
    function _patchCircularDependency(obj) {
        var defaultExport;
        Object.defineProperty(obj.default, 'default', {
            configurable: true,
            set: function (value) {
                if (obj.default.__esModule) {
                    obj.default = value;
                }
                defaultExport = value;
            },
            get: function () {
                return defaultExport;
            }
        });
    }
});
/*xregexp*/
(function (f) {
    if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = f();
    } else if (typeof define === 'function' && define.amd) {
        define('xregexp', [], f);
    } else {
        var g;
        if (typeof window !== 'undefined') {
            g = window;
        } else if (typeof global !== 'undefined') {
            g = global;
        } else if (typeof self !== 'undefined') {
            g = self;
        } else {
            g = this;
        }
        g.XRegExp = f();
    }
}(function () {
    var define, module, exports;
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == 'function' && require;
                    if (!u && a)
                        return a(o, !0);
                    if (i)
                        return i(o, !0);
                    var f = new Error('Cannot find module \'' + o + '\'');
                    throw f.code = 'MODULE_NOT_FOUND', f;
                }
                var l = n[o] = { exports: {} };
                t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        var i = typeof require == 'function' && require;
        for (var o = 0; o < r.length; o++)
            s(r[o]);
        return s;
    }({
        1: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    var REGEX_DATA = 'xregexp';
                    var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
                    var parts = XRegExp.union([
                        /\({{([\w$]+)}}\)|{{([\w$]+)}}/,
                        subParts
                    ], 'g', { conjunction: 'or' });
                    function deanchor(pattern) {
                        var leadingAnchor = /^(?:\(\?:\))*\^/;
                        var trailingAnchor = /\$(?:\(\?:\))*$/;
                        if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ''))) {
                            return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');
                        }
                        return pattern;
                    }
                    function asXRegExp(value, addFlagX) {
                        var flags = addFlagX ? 'x' : '';
                        return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? value : XRegExp(value.source, flags) : XRegExp(value, flags);
                    }
                    XRegExp.build = function (pattern, subs, flags) {
                        flags = flags || '';
                        var addFlagX = flags.indexOf('x') > -1;
                        var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern);
                        if (inlineFlags) {
                            flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
                        }
                        var data = {};
                        for (var p in subs) {
                            if (subs.hasOwnProperty(p)) {
                                var sub = asXRegExp(subs[p], addFlagX);
                                data[p] = {
                                    pattern: deanchor(sub.source),
                                    names: sub[REGEX_DATA].captureNames || []
                                };
                            }
                        }
                        var patternAsRegex = asXRegExp(pattern, addFlagX);
                        var numCaps = 0;
                        var numPriorCaps;
                        var numOuterCaps = 0;
                        var outerCapsMap = [0];
                        var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
                        var output = patternAsRegex.source.replace(parts, function ($0, $1, $2, $3, $4) {
                            var subName = $1 || $2;
                            var capName;
                            var intro;
                            var localCapIndex;
                            if (subName) {
                                if (!data.hasOwnProperty(subName)) {
                                    throw new ReferenceError('Undefined property ' + $0);
                                }
                                if ($1) {
                                    capName = outerCapNames[numOuterCaps];
                                    outerCapsMap[++numOuterCaps] = ++numCaps;
                                    intro = '(?<' + (capName || subName) + '>';
                                } else {
                                    intro = '(?:';
                                }
                                numPriorCaps = numCaps;
                                return intro + data[subName].pattern.replace(subParts, function (match, paren, backref) {
                                    if (paren) {
                                        capName = data[subName].names[numCaps - numPriorCaps];
                                        ++numCaps;
                                        if (capName) {
                                            return '(?<' + capName + '>';
                                        }
                                    } else if (backref) {
                                        localCapIndex = +backref - 1;
                                        return data[subName].names[localCapIndex] ? '\\k<' + data[subName].names[localCapIndex] + '>' : '\\' + (+backref + numPriorCaps);
                                    }
                                    return match;
                                }) + ')';
                            }
                            if ($3) {
                                capName = outerCapNames[numOuterCaps];
                                outerCapsMap[++numOuterCaps] = ++numCaps;
                                if (capName) {
                                    return '(?<' + capName + '>';
                                }
                            } else if ($4) {
                                localCapIndex = +$4 - 1;
                                return outerCapNames[localCapIndex] ? '\\k<' + outerCapNames[localCapIndex] + '>' : '\\' + outerCapsMap[+$4];
                            }
                            return $0;
                        });
                        return XRegExp(output, flags);
                    };
                };
            },
            {}
        ],
        2: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    function row(name, value, start, end) {
                        return {
                            name: name,
                            value: value,
                            start: start,
                            end: end
                        };
                    }
                    XRegExp.matchRecursive = function (str, left, right, flags, options) {
                        flags = flags || '';
                        options = options || {};
                        var global = flags.indexOf('g') > -1;
                        var sticky = flags.indexOf('y') > -1;
                        var basicFlags = flags.replace(/y/g, '');
                        var escapeChar = options.escapeChar;
                        var vN = options.valueNames;
                        var output = [];
                        var openTokens = 0;
                        var delimStart = 0;
                        var delimEnd = 0;
                        var lastOuterEnd = 0;
                        var outerStart;
                        var innerStart;
                        var leftMatch;
                        var rightMatch;
                        var esc;
                        left = XRegExp(left, basicFlags);
                        right = XRegExp(right, basicFlags);
                        if (escapeChar) {
                            if (escapeChar.length > 1) {
                                throw new Error('Cannot use more than one escape character');
                            }
                            escapeChar = XRegExp.escape(escapeChar);
                            esc = new RegExp('(?:' + escapeChar + '[\\S\\s]|(?:(?!' + XRegExp.union([
                                left,
                                right
                            ], '', { conjunction: 'or' }).source + ')[^' + escapeChar + '])+)+', flags.replace(/[^imu]+/g, ''));
                        }
                        while (true) {
                            if (escapeChar) {
                                delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;
                            }
                            leftMatch = XRegExp.exec(str, left, delimEnd);
                            rightMatch = XRegExp.exec(str, right, delimEnd);
                            if (leftMatch && rightMatch) {
                                if (leftMatch.index <= rightMatch.index) {
                                    rightMatch = null;
                                } else {
                                    leftMatch = null;
                                }
                            }
                            if (leftMatch || rightMatch) {
                                delimStart = (leftMatch || rightMatch).index;
                                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
                            } else if (!openTokens) {
                                break;
                            }
                            if (sticky && !openTokens && delimStart > lastOuterEnd) {
                                break;
                            }
                            if (leftMatch) {
                                if (!openTokens) {
                                    outerStart = delimStart;
                                    innerStart = delimEnd;
                                }
                                ++openTokens;
                            } else if (rightMatch && openTokens) {
                                if (!--openTokens) {
                                    if (vN) {
                                        if (vN[0] && outerStart > lastOuterEnd) {
                                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));
                                        }
                                        if (vN[1]) {
                                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));
                                        }
                                        if (vN[2]) {
                                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));
                                        }
                                        if (vN[3]) {
                                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));
                                        }
                                    } else {
                                        output.push(str.slice(innerStart, delimStart));
                                    }
                                    lastOuterEnd = delimEnd;
                                    if (!global) {
                                        break;
                                    }
                                }
                            } else {
                                throw new Error('Unbalanced delimiter found in string');
                            }
                            if (delimStart === delimEnd) {
                                ++delimEnd;
                            }
                        }
                        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
                            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));
                        }
                        return output;
                    };
                };
            },
            {}
        ],
        3: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    var unicode = {};
                    var dec = XRegExp._dec;
                    var hex = XRegExp._hex;
                    var pad4 = XRegExp._pad4;
                    function normalize(name) {
                        return name.replace(/[- _]+/g, '').toLowerCase();
                    }
                    function charCode(chr) {
                        var esc = /^\\[xu](.+)/.exec(chr);
                        return esc ? dec(esc[1]) : chr.charCodeAt(chr.charAt(0) === '\\' ? 1 : 0);
                    }
                    function invertBmp(range) {
                        var output = '';
                        var lastEnd = -1;
                        XRegExp.forEach(range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function (m) {
                            var start = charCode(m[1]);
                            if (start > lastEnd + 1) {
                                output += '\\u' + pad4(hex(lastEnd + 1));
                                if (start > lastEnd + 2) {
                                    output += '-\\u' + pad4(hex(start - 1));
                                }
                            }
                            lastEnd = charCode(m[2] || m[1]);
                        });
                        if (lastEnd < 65535) {
                            output += '\\u' + pad4(hex(lastEnd + 1));
                            if (lastEnd < 65534) {
                                output += '-\\uFFFF';
                            }
                        }
                        return output;
                    }
                    function cacheInvertedBmp(slug) {
                        var prop = 'b!';
                        return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));
                    }
                    function buildAstral(slug, isNegated) {
                        var item = unicode[slug];
                        var combined = '';
                        if (item.bmp && !item.isBmpLast) {
                            combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');
                        }
                        if (item.astral) {
                            combined += item.astral;
                        }
                        if (item.isBmpLast && item.bmp) {
                            combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';
                        }
                        return isNegated ? '(?:(?!' + combined + ')(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))' : '(?:' + combined + ')';
                    }
                    function cacheAstral(slug, isNegated) {
                        var prop = isNegated ? 'a!' : 'a=';
                        return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));
                    }
                    XRegExp.addToken(/\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {
                        var ERR_DOUBLE_NEG = 'Invalid double negation ';
                        var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';
                        var ERR_UNKNOWN_REF = 'Unicode token missing data ';
                        var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';
                        var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';
                        var isNegated = match[1] === 'P' || !!match[2];
                        var isAstralMode = flags.indexOf('A') > -1;
                        var slug = normalize(match[4] || match[3]);
                        var item = unicode[slug];
                        if (match[1] === 'P' && match[2]) {
                            throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
                        }
                        if (!unicode.hasOwnProperty(slug)) {
                            throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
                        }
                        if (item.inverseOf) {
                            slug = normalize(item.inverseOf);
                            if (!unicode.hasOwnProperty(slug)) {
                                throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);
                            }
                            item = unicode[slug];
                            isNegated = !isNegated;
                        }
                        if (!(item.bmp || isAstralMode)) {
                            throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
                        }
                        if (isAstralMode) {
                            if (scope === 'class') {
                                throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
                            }
                            return cacheAstral(slug, isNegated);
                        }
                        return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : (isNegated ? '[^' : '[') + item.bmp + ']';
                    }, {
                        scope: 'all',
                        optionalFlags: 'A',
                        leadChar: '\\'
                    });
                    XRegExp.addUnicodeData = function (data) {
                        var ERR_NO_NAME = 'Unicode token requires name';
                        var ERR_NO_DATA = 'Unicode token has no character data ';
                        var item;
                        for (var i = 0; i < data.length; ++i) {
                            item = data[i];
                            if (!item.name) {
                                throw new Error(ERR_NO_NAME);
                            }
                            if (!(item.inverseOf || item.bmp || item.astral)) {
                                throw new Error(ERR_NO_DATA + item.name);
                            }
                            unicode[normalize(item.name)] = item;
                            if (item.alias) {
                                unicode[normalize(item.alias)] = item;
                            }
                        }
                        XRegExp.cache.flush('patterns');
                    };
                    XRegExp._getUnicodeProperty = function (name) {
                        var slug = normalize(name);
                        return unicode[slug];
                    };
                };
            },
            {}
        ],
        4: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    if (!XRegExp.addUnicodeData) {
                        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');
                    }
                    XRegExp.addUnicodeData([
                        {
                            name: 'InAdlam',
                            astral: '\uD83A[\uDD00-\uDD5F]'
                        },
                        {
                            name: 'InAegean_Numbers',
                            astral: '\uD800[\uDD00-\uDD3F]'
                        },
                        {
                            name: 'InAhom',
                            astral: '\uD805[\uDF00-\uDF3F]'
                        },
                        {
                            name: 'InAlchemical_Symbols',
                            astral: '\uD83D[\uDF00-\uDF7F]'
                        },
                        {
                            name: 'InAlphabetic_Presentation_Forms',
                            bmp: 'ﬀ-ﭏ'
                        },
                        {
                            name: 'InAnatolian_Hieroglyphs',
                            astral: '\uD811[\uDC00-\uDE7F]'
                        },
                        {
                            name: 'InAncient_Greek_Musical_Notation',
                            astral: '\uD834[\uDE00-\uDE4F]'
                        },
                        {
                            name: 'InAncient_Greek_Numbers',
                            astral: '\uD800[\uDD40-\uDD8F]'
                        },
                        {
                            name: 'InAncient_Symbols',
                            astral: '\uD800[\uDD90-\uDDCF]'
                        },
                        {
                            name: 'InArabic',
                            bmp: '\u0600-ۿ'
                        },
                        {
                            name: 'InArabic_Extended_A',
                            bmp: 'ࢠ-ࣿ'
                        },
                        {
                            name: 'InArabic_Mathematical_Alphabetic_Symbols',
                            astral: '\uD83B[\uDE00-\uDEFF]'
                        },
                        {
                            name: 'InArabic_Presentation_Forms_A',
                            bmp: 'ﭐ-\uFDFF'
                        },
                        {
                            name: 'InArabic_Presentation_Forms_B',
                            bmp: 'ﹰ-\uFEFF'
                        },
                        {
                            name: 'InArabic_Supplement',
                            bmp: 'ݐ-ݿ'
                        },
                        {
                            name: 'InArmenian',
                            bmp: '\u0530-\u058F'
                        },
                        {
                            name: 'InArrows',
                            bmp: '\u2190-\u21FF'
                        },
                        {
                            name: 'InAvestan',
                            astral: '\uD802[\uDF00-\uDF3F]'
                        },
                        {
                            name: 'InBalinese',
                            bmp: 'ᬀ-\u1B7F'
                        },
                        {
                            name: 'InBamum',
                            bmp: 'ꚠ-\uA6FF'
                        },
                        {
                            name: 'InBamum_Supplement',
                            astral: '\uD81A[\uDC00-\uDE3F]'
                        },
                        {
                            name: 'InBasic_Latin',
                            bmp: '\0-\x7F'
                        },
                        {
                            name: 'InBassa_Vah',
                            astral: '\uD81A[\uDED0-\uDEFF]'
                        },
                        {
                            name: 'InBatak',
                            bmp: 'ᯀ-\u1BFF'
                        },
                        {
                            name: 'InBengali',
                            bmp: 'ঀ-\u09FF'
                        },
                        {
                            name: 'InBhaiksuki',
                            astral: '\uD807[\uDC00-\uDC6F]'
                        },
                        {
                            name: 'InBlock_Elements',
                            bmp: '\u2580-\u259F'
                        },
                        {
                            name: 'InBopomofo',
                            bmp: '\u3100-\u312F'
                        },
                        {
                            name: 'InBopomofo_Extended',
                            bmp: 'ㆠ-\u31BF'
                        },
                        {
                            name: 'InBox_Drawing',
                            bmp: '\u2500-\u257F'
                        },
                        {
                            name: 'InBrahmi',
                            astral: '\uD804[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InBraille_Patterns',
                            bmp: '\u2800-\u28FF'
                        },
                        {
                            name: 'InBuginese',
                            bmp: 'ᨀ-\u1A1F'
                        },
                        {
                            name: 'InBuhid',
                            bmp: 'ᝀ-\u175F'
                        },
                        {
                            name: 'InByzantine_Musical_Symbols',
                            astral: '\uD834[\uDC00-\uDCFF]'
                        },
                        {
                            name: 'InCJK_Compatibility',
                            bmp: '\u3300-\u33FF'
                        },
                        {
                            name: 'InCJK_Compatibility_Forms',
                            bmp: '\uFE30-﹏'
                        },
                        {
                            name: 'InCJK_Compatibility_Ideographs',
                            bmp: '豈-\uFAFF'
                        },
                        {
                            name: 'InCJK_Compatibility_Ideographs_Supplement',
                            astral: '\uD87E[\uDC00-\uDE1F]'
                        },
                        {
                            name: 'InCJK_Radicals_Supplement',
                            bmp: '\u2E80-\u2EFF'
                        },
                        {
                            name: 'InCJK_Strokes',
                            bmp: '\u31C0-\u31EF'
                        },
                        {
                            name: 'InCJK_Symbols_and_Punctuation',
                            bmp: '\u3000-\u303F'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs',
                            bmp: '一-\u9FFF'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_A',
                            bmp: '㐀-\u4DBF'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_B',
                            astral: '[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_C',
                            astral: '\uD869[\uDF00-\uDFFF]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF3F]'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_D',
                            astral: '\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_E',
                            astral: '\uD86E[\uDC20-\uDFFF]|[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]'
                        },
                        {
                            name: 'InCarian',
                            astral: '\uD800[\uDEA0-\uDEDF]'
                        },
                        {
                            name: 'InCaucasian_Albanian',
                            astral: '\uD801[\uDD30-\uDD6F]'
                        },
                        {
                            name: 'InChakma',
                            astral: '\uD804[\uDD00-\uDD4F]'
                        },
                        {
                            name: 'InCham',
                            bmp: 'ꨀ-\uAA5F'
                        },
                        {
                            name: 'InCherokee',
                            bmp: 'Ꭰ-\u13FF'
                        },
                        {
                            name: 'InCherokee_Supplement',
                            bmp: '\uAB70-\uABBF'
                        },
                        {
                            name: 'InCombining_Diacritical_Marks',
                            bmp: '̀-ͯ'
                        },
                        {
                            name: 'InCombining_Diacritical_Marks_Extended',
                            bmp: '᪰-\u1AFF'
                        },
                        {
                            name: 'InCombining_Diacritical_Marks_Supplement',
                            bmp: '᷀-᷿'
                        },
                        {
                            name: 'InCombining_Diacritical_Marks_for_Symbols',
                            bmp: '⃐-\u20FF'
                        },
                        {
                            name: 'InCombining_Half_Marks',
                            bmp: '︠-\uFE2F'
                        },
                        {
                            name: 'InCommon_Indic_Number_Forms',
                            bmp: '\uA830-\uA83F'
                        },
                        {
                            name: 'InControl_Pictures',
                            bmp: '\u2400-\u243F'
                        },
                        {
                            name: 'InCoptic',
                            bmp: 'Ⲁ-\u2CFF'
                        },
                        {
                            name: 'InCoptic_Epact_Numbers',
                            astral: '\uD800[\uDEE0-\uDEFF]'
                        },
                        {
                            name: 'InCounting_Rod_Numerals',
                            astral: '\uD834[\uDF60-\uDF7F]'
                        },
                        {
                            name: 'InCuneiform',
                            astral: '\uD808[\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InCuneiform_Numbers_and_Punctuation',
                            astral: '\uD809[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InCurrency_Symbols',
                            bmp: '\u20A0-\u20CF'
                        },
                        {
                            name: 'InCypriot_Syllabary',
                            astral: '\uD802[\uDC00-\uDC3F]'
                        },
                        {
                            name: 'InCyrillic',
                            bmp: 'Ѐ-ӿ'
                        },
                        {
                            name: 'InCyrillic_Extended_A',
                            bmp: 'ⷠ-ⷿ'
                        },
                        {
                            name: 'InCyrillic_Extended_B',
                            bmp: 'Ꙁ-ꚟ'
                        },
                        {
                            name: 'InCyrillic_Extended_C',
                            bmp: '\u1C80-\u1C8F'
                        },
                        {
                            name: 'InCyrillic_Supplement',
                            bmp: 'Ԁ-ԯ'
                        },
                        {
                            name: 'InDeseret',
                            astral: '\uD801[\uDC00-\uDC4F]'
                        },
                        {
                            name: 'InDevanagari',
                            bmp: 'ऀ-ॿ'
                        },
                        {
                            name: 'InDevanagari_Extended',
                            bmp: '꣠-\uA8FF'
                        },
                        {
                            name: 'InDingbats',
                            bmp: '\u2700-\u27BF'
                        },
                        {
                            name: 'InDomino_Tiles',
                            astral: '\uD83C[\uDC30-\uDC9F]'
                        },
                        {
                            name: 'InDuployan',
                            astral: '\uD82F[\uDC00-\uDC9F]'
                        },
                        {
                            name: 'InEarly_Dynastic_Cuneiform',
                            astral: '\uD809[\uDC80-\uDD4F]'
                        },
                        {
                            name: 'InEgyptian_Hieroglyphs',
                            astral: '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]'
                        },
                        {
                            name: 'InElbasan',
                            astral: '\uD801[\uDD00-\uDD2F]'
                        },
                        {
                            name: 'InEmoticons',
                            astral: '\uD83D[\uDE00-\uDE4F]'
                        },
                        {
                            name: 'InEnclosed_Alphanumeric_Supplement',
                            astral: '\uD83C[\uDD00-\uDDFF]'
                        },
                        {
                            name: 'InEnclosed_Alphanumerics',
                            bmp: '\u2460-\u24FF'
                        },
                        {
                            name: 'InEnclosed_CJK_Letters_and_Months',
                            bmp: '\u3200-\u32FF'
                        },
                        {
                            name: 'InEnclosed_Ideographic_Supplement',
                            astral: '\uD83C[\uDE00-\uDEFF]'
                        },
                        {
                            name: 'InEthiopic',
                            bmp: 'ሀ-\u137F'
                        },
                        {
                            name: 'InEthiopic_Extended',
                            bmp: 'ⶀ-\u2DDF'
                        },
                        {
                            name: 'InEthiopic_Extended_A',
                            bmp: '\uAB00-\uAB2F'
                        },
                        {
                            name: 'InEthiopic_Supplement',
                            bmp: 'ᎀ-\u139F'
                        },
                        {
                            name: 'InGeneral_Punctuation',
                            bmp: '\u2000-\u206F'
                        },
                        {
                            name: 'InGeometric_Shapes',
                            bmp: '\u25A0-\u25FF'
                        },
                        {
                            name: 'InGeometric_Shapes_Extended',
                            astral: '\uD83D[\uDF80-\uDFFF]'
                        },
                        {
                            name: 'InGeorgian',
                            bmp: 'Ⴀ-ჿ'
                        },
                        {
                            name: 'InGeorgian_Supplement',
                            bmp: 'ⴀ-\u2D2F'
                        },
                        {
                            name: 'InGlagolitic',
                            bmp: 'Ⰰ-\u2C5F'
                        },
                        {
                            name: 'InGlagolitic_Supplement',
                            astral: '\uD838[\uDC00-\uDC2F]'
                        },
                        {
                            name: 'InGothic',
                            astral: '\uD800[\uDF30-\uDF4F]'
                        },
                        {
                            name: 'InGrantha',
                            astral: '\uD804[\uDF00-\uDF7F]'
                        },
                        {
                            name: 'InGreek_Extended',
                            bmp: 'ἀ-\u1FFF'
                        },
                        {
                            name: 'InGreek_and_Coptic',
                            bmp: 'Ͱ-Ͽ'
                        },
                        {
                            name: 'InGujarati',
                            bmp: '\u0A80-\u0AFF'
                        },
                        {
                            name: 'InGurmukhi',
                            bmp: '\u0A00-\u0A7F'
                        },
                        {
                            name: 'InHalfwidth_and_Fullwidth_Forms',
                            bmp: '\uFF00-\uFFEF'
                        },
                        {
                            name: 'InHangul_Compatibility_Jamo',
                            bmp: '\u3130-\u318F'
                        },
                        {
                            name: 'InHangul_Jamo',
                            bmp: 'ᄀ-ᇿ'
                        },
                        {
                            name: 'InHangul_Jamo_Extended_A',
                            bmp: 'ꥠ-\uA97F'
                        },
                        {
                            name: 'InHangul_Jamo_Extended_B',
                            bmp: 'ힰ-\uD7FF'
                        },
                        {
                            name: 'InHangul_Syllables',
                            bmp: '가-\uD7AF'
                        },
                        {
                            name: 'InHanunoo',
                            bmp: 'ᜠ-\u173F'
                        },
                        {
                            name: 'InHatran',
                            astral: '\uD802[\uDCE0-\uDCFF]'
                        },
                        {
                            name: 'InHebrew',
                            bmp: '\u0590-\u05FF'
                        },
                        {
                            name: 'InHigh_Private_Use_Surrogates',
                            bmp: '\uDB80-\uDBFF'
                        },
                        {
                            name: 'InHigh_Surrogates',
                            bmp: '\uD800-\uDB7F'
                        },
                        {
                            name: 'InHiragana',
                            bmp: '\u3040-ゟ'
                        },
                        {
                            name: 'InIPA_Extensions',
                            bmp: 'ɐ-ʯ'
                        },
                        {
                            name: 'InIdeographic_Description_Characters',
                            bmp: '\u2FF0-\u2FFF'
                        },
                        {
                            name: 'InIdeographic_Symbols_and_Punctuation',
                            astral: '\uD81B[\uDFE0-\uDFFF]'
                        },
                        {
                            name: 'InImperial_Aramaic',
                            astral: '\uD802[\uDC40-\uDC5F]'
                        },
                        {
                            name: 'InInscriptional_Pahlavi',
                            astral: '\uD802[\uDF60-\uDF7F]'
                        },
                        {
                            name: 'InInscriptional_Parthian',
                            astral: '\uD802[\uDF40-\uDF5F]'
                        },
                        {
                            name: 'InJavanese',
                            bmp: 'ꦀ-\uA9DF'
                        },
                        {
                            name: 'InKaithi',
                            astral: '\uD804[\uDC80-\uDCCF]'
                        },
                        {
                            name: 'InKana_Supplement',
                            astral: '\uD82C[\uDC00-\uDCFF]'
                        },
                        {
                            name: 'InKanbun',
                            bmp: '\u3190-\u319F'
                        },
                        {
                            name: 'InKangxi_Radicals',
                            bmp: '\u2F00-\u2FDF'
                        },
                        {
                            name: 'InKannada',
                            bmp: '\u0C80-\u0CFF'
                        },
                        {
                            name: 'InKatakana',
                            bmp: '\u30A0-ヿ'
                        },
                        {
                            name: 'InKatakana_Phonetic_Extensions',
                            bmp: 'ㇰ-ㇿ'
                        },
                        {
                            name: 'InKayah_Li',
                            bmp: '꤀-\uA92F'
                        },
                        {
                            name: 'InKharoshthi',
                            astral: '\uD802[\uDE00-\uDE5F]'
                        },
                        {
                            name: 'InKhmer',
                            bmp: 'ក-\u17FF'
                        },
                        {
                            name: 'InKhmer_Symbols',
                            bmp: '\u19E0-\u19FF'
                        },
                        {
                            name: 'InKhojki',
                            astral: '\uD804[\uDE00-\uDE4F]'
                        },
                        {
                            name: 'InKhudawadi',
                            astral: '\uD804[\uDEB0-\uDEFF]'
                        },
                        {
                            name: 'InLao',
                            bmp: '\u0E80-\u0EFF'
                        },
                        {
                            name: 'InLatin_Extended_Additional',
                            bmp: 'Ḁ-ỿ'
                        },
                        {
                            name: 'InLatin_Extended_A',
                            bmp: 'Ā-ſ'
                        },
                        {
                            name: 'InLatin_Extended_B',
                            bmp: 'ƀ-ɏ'
                        },
                        {
                            name: 'InLatin_Extended_C',
                            bmp: 'Ⱡ-Ɀ'
                        },
                        {
                            name: 'InLatin_Extended_D',
                            bmp: '\uA720-ꟿ'
                        },
                        {
                            name: 'InLatin_Extended_E',
                            bmp: 'ꬰ-\uAB6F'
                        },
                        {
                            name: 'InLatin_1_Supplement',
                            bmp: '\x80-ÿ'
                        },
                        {
                            name: 'InLepcha',
                            bmp: 'ᰀ-ᱏ'
                        },
                        {
                            name: 'InLetterlike_Symbols',
                            bmp: '\u2100-\u214F'
                        },
                        {
                            name: 'InLimbu',
                            bmp: 'ᤀ-᥏'
                        },
                        {
                            name: 'InLinear_A',
                            astral: '\uD801[\uDE00-\uDF7F]'
                        },
                        {
                            name: 'InLinear_B_Ideograms',
                            astral: '\uD800[\uDC80-\uDCFF]'
                        },
                        {
                            name: 'InLinear_B_Syllabary',
                            astral: '\uD800[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InLisu',
                            bmp: 'ꓐ-\uA4FF'
                        },
                        {
                            name: 'InLow_Surrogates',
                            bmp: '\uDC00-\uDFFF'
                        },
                        {
                            name: 'InLycian',
                            astral: '\uD800[\uDE80-\uDE9F]'
                        },
                        {
                            name: 'InLydian',
                            astral: '\uD802[\uDD20-\uDD3F]'
                        },
                        {
                            name: 'InMahajani',
                            astral: '\uD804[\uDD50-\uDD7F]'
                        },
                        {
                            name: 'InMahjong_Tiles',
                            astral: '\uD83C[\uDC00-\uDC2F]'
                        },
                        {
                            name: 'InMalayalam',
                            bmp: '\u0D00-ൿ'
                        },
                        {
                            name: 'InMandaic',
                            bmp: 'ࡀ-\u085F'
                        },
                        {
                            name: 'InManichaean',
                            astral: '\uD802[\uDEC0-\uDEFF]'
                        },
                        {
                            name: 'InMarchen',
                            astral: '\uD807[\uDC70-\uDCBF]'
                        },
                        {
                            name: 'InMathematical_Alphanumeric_Symbols',
                            astral: '\uD835[\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InMathematical_Operators',
                            bmp: '\u2200-\u22FF'
                        },
                        {
                            name: 'InMeetei_Mayek',
                            bmp: 'ꯀ-\uABFF'
                        },
                        {
                            name: 'InMeetei_Mayek_Extensions',
                            bmp: 'ꫠ-\uAAFF'
                        },
                        {
                            name: 'InMende_Kikakui',
                            astral: '\uD83A[\uDC00-\uDCDF]'
                        },
                        {
                            name: 'InMeroitic_Cursive',
                            astral: '\uD802[\uDDA0-\uDDFF]'
                        },
                        {
                            name: 'InMeroitic_Hieroglyphs',
                            astral: '\uD802[\uDD80-\uDD9F]'
                        },
                        {
                            name: 'InMiao',
                            astral: '\uD81B[\uDF00-\uDF9F]'
                        },
                        {
                            name: 'InMiscellaneous_Mathematical_Symbols_A',
                            bmp: '\u27C0-\u27EF'
                        },
                        {
                            name: 'InMiscellaneous_Mathematical_Symbols_B',
                            bmp: '\u2980-\u29FF'
                        },
                        {
                            name: 'InMiscellaneous_Symbols',
                            bmp: '\u2600-\u26FF'
                        },
                        {
                            name: 'InMiscellaneous_Symbols_and_Arrows',
                            bmp: '\u2B00-\u2BFF'
                        },
                        {
                            name: 'InMiscellaneous_Symbols_and_Pictographs',
                            astral: '\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF]'
                        },
                        {
                            name: 'InMiscellaneous_Technical',
                            bmp: '\u2300-\u23FF'
                        },
                        {
                            name: 'InModi',
                            astral: '\uD805[\uDE00-\uDE5F]'
                        },
                        {
                            name: 'InModifier_Tone_Letters',
                            bmp: '\uA700-ꜟ'
                        },
                        {
                            name: 'InMongolian',
                            bmp: '\u1800-\u18AF'
                        },
                        {
                            name: 'InMongolian_Supplement',
                            astral: '\uD805[\uDE60-\uDE7F]'
                        },
                        {
                            name: 'InMro',
                            astral: '\uD81A[\uDE40-\uDE6F]'
                        },
                        {
                            name: 'InMultani',
                            astral: '\uD804[\uDE80-\uDEAF]'
                        },
                        {
                            name: 'InMusical_Symbols',
                            astral: '\uD834[\uDD00-\uDDFF]'
                        },
                        {
                            name: 'InMyanmar',
                            bmp: 'က-\u109F'
                        },
                        {
                            name: 'InMyanmar_Extended_A',
                            bmp: 'ꩠ-ꩿ'
                        },
                        {
                            name: 'InMyanmar_Extended_B',
                            bmp: 'ꧠ-\uA9FF'
                        },
                        {
                            name: 'InNKo',
                            bmp: '߀-\u07FF'
                        },
                        {
                            name: 'InNabataean',
                            astral: '\uD802[\uDC80-\uDCAF]'
                        },
                        {
                            name: 'InNew_Tai_Lue',
                            bmp: 'ᦀ-\u19DF'
                        },
                        {
                            name: 'InNewa',
                            astral: '\uD805[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InNumber_Forms',
                            bmp: '\u2150-\u218F'
                        },
                        {
                            name: 'InOgham',
                            bmp: '\u1680-\u169F'
                        },
                        {
                            name: 'InOl_Chiki',
                            bmp: '᱐-\u1C7F'
                        },
                        {
                            name: 'InOld_Hungarian',
                            astral: '\uD803[\uDC80-\uDCFF]'
                        },
                        {
                            name: 'InOld_Italic',
                            astral: '\uD800[\uDF00-\uDF2F]'
                        },
                        {
                            name: 'InOld_North_Arabian',
                            astral: '\uD802[\uDE80-\uDE9F]'
                        },
                        {
                            name: 'InOld_Permic',
                            astral: '\uD800[\uDF50-\uDF7F]'
                        },
                        {
                            name: 'InOld_Persian',
                            astral: '\uD800[\uDFA0-\uDFDF]'
                        },
                        {
                            name: 'InOld_South_Arabian',
                            astral: '\uD802[\uDE60-\uDE7F]'
                        },
                        {
                            name: 'InOld_Turkic',
                            astral: '\uD803[\uDC00-\uDC4F]'
                        },
                        {
                            name: 'InOptical_Character_Recognition',
                            bmp: '\u2440-\u245F'
                        },
                        {
                            name: 'InOriya',
                            bmp: '\u0B00-\u0B7F'
                        },
                        {
                            name: 'InOrnamental_Dingbats',
                            astral: '\uD83D[\uDE50-\uDE7F]'
                        },
                        {
                            name: 'InOsage',
                            astral: '\uD801[\uDCB0-\uDCFF]'
                        },
                        {
                            name: 'InOsmanya',
                            astral: '\uD801[\uDC80-\uDCAF]'
                        },
                        {
                            name: 'InPahawh_Hmong',
                            astral: '\uD81A[\uDF00-\uDF8F]'
                        },
                        {
                            name: 'InPalmyrene',
                            astral: '\uD802[\uDC60-\uDC7F]'
                        },
                        {
                            name: 'InPau_Cin_Hau',
                            astral: '\uD806[\uDEC0-\uDEFF]'
                        },
                        {
                            name: 'InPhags_pa',
                            bmp: 'ꡀ-\uA87F'
                        },
                        {
                            name: 'InPhaistos_Disc',
                            astral: '\uD800[\uDDD0-\uDDFF]'
                        },
                        {
                            name: 'InPhoenician',
                            astral: '\uD802[\uDD00-\uDD1F]'
                        },
                        {
                            name: 'InPhonetic_Extensions',
                            bmp: 'ᴀ-ᵿ'
                        },
                        {
                            name: 'InPhonetic_Extensions_Supplement',
                            bmp: 'ᶀ-ᶿ'
                        },
                        {
                            name: 'InPlaying_Cards',
                            astral: '\uD83C[\uDCA0-\uDCFF]'
                        },
                        {
                            name: 'InPrivate_Use_Area',
                            bmp: '\uE000-\uF8FF'
                        },
                        {
                            name: 'InPsalter_Pahlavi',
                            astral: '\uD802[\uDF80-\uDFAF]'
                        },
                        {
                            name: 'InRejang',
                            bmp: 'ꤰ-\uA95F'
                        },
                        {
                            name: 'InRumi_Numeral_Symbols',
                            astral: '\uD803[\uDE60-\uDE7F]'
                        },
                        {
                            name: 'InRunic',
                            bmp: 'ᚠ-\u16FF'
                        },
                        {
                            name: 'InSamaritan',
                            bmp: 'ࠀ-\u083F'
                        },
                        {
                            name: 'InSaurashtra',
                            bmp: 'ꢀ-\uA8DF'
                        },
                        {
                            name: 'InSharada',
                            astral: '\uD804[\uDD80-\uDDDF]'
                        },
                        {
                            name: 'InShavian',
                            astral: '\uD801[\uDC50-\uDC7F]'
                        },
                        {
                            name: 'InShorthand_Format_Controls',
                            astral: '\uD82F[\uDCA0-\uDCAF]'
                        },
                        {
                            name: 'InSiddham',
                            astral: '\uD805[\uDD80-\uDDFF]'
                        },
                        {
                            name: 'InSinhala',
                            bmp: '\u0D80-\u0DFF'
                        },
                        {
                            name: 'InSinhala_Archaic_Numbers',
                            astral: '\uD804[\uDDE0-\uDDFF]'
                        },
                        {
                            name: 'InSmall_Form_Variants',
                            bmp: '\uFE50-\uFE6F'
                        },
                        {
                            name: 'InSora_Sompeng',
                            astral: '\uD804[\uDCD0-\uDCFF]'
                        },
                        {
                            name: 'InSpacing_Modifier_Letters',
                            bmp: 'ʰ-\u02FF'
                        },
                        {
                            name: 'InSpecials',
                            bmp: '\uFFF0-\uFFFF'
                        },
                        {
                            name: 'InSundanese',
                            bmp: 'ᮀ-ᮿ'
                        },
                        {
                            name: 'InSundanese_Supplement',
                            bmp: '\u1CC0-\u1CCF'
                        },
                        {
                            name: 'InSuperscripts_and_Subscripts',
                            bmp: '\u2070-\u209F'
                        },
                        {
                            name: 'InSupplemental_Arrows_A',
                            bmp: '\u27F0-\u27FF'
                        },
                        {
                            name: 'InSupplemental_Arrows_B',
                            bmp: '\u2900-\u297F'
                        },
                        {
                            name: 'InSupplemental_Arrows_C',
                            astral: '\uD83E[\uDC00-\uDCFF]'
                        },
                        {
                            name: 'InSupplemental_Mathematical_Operators',
                            bmp: '\u2A00-\u2AFF'
                        },
                        {
                            name: 'InSupplemental_Punctuation',
                            bmp: '\u2E00-\u2E7F'
                        },
                        {
                            name: 'InSupplemental_Symbols_and_Pictographs',
                            astral: '\uD83E[\uDD00-\uDDFF]'
                        },
                        {
                            name: 'InSupplementary_Private_Use_Area_A',
                            astral: '[\uDB80-\uDBBF][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InSupplementary_Private_Use_Area_B',
                            astral: '[\uDBC0-\uDBFF][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InSutton_SignWriting',
                            astral: '\uD836[\uDC00-\uDEAF]'
                        },
                        {
                            name: 'InSyloti_Nagri',
                            bmp: 'ꠀ-\uA82F'
                        },
                        {
                            name: 'InSyriac',
                            bmp: '\u0700-ݏ'
                        },
                        {
                            name: 'InTagalog',
                            bmp: 'ᜀ-\u171F'
                        },
                        {
                            name: 'InTagbanwa',
                            bmp: 'ᝠ-\u177F'
                        },
                        {
                            name: 'InTags',
                            astral: '\uDB40[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InTai_Le',
                            bmp: 'ᥐ-\u197F'
                        },
                        {
                            name: 'InTai_Tham',
                            bmp: 'ᨠ-\u1AAF'
                        },
                        {
                            name: 'InTai_Viet',
                            bmp: 'ꪀ-\uAADF'
                        },
                        {
                            name: 'InTai_Xuan_Jing_Symbols',
                            astral: '\uD834[\uDF00-\uDF5F]'
                        },
                        {
                            name: 'InTakri',
                            astral: '\uD805[\uDE80-\uDECF]'
                        },
                        {
                            name: 'InTamil',
                            bmp: '\u0B80-\u0BFF'
                        },
                        {
                            name: 'InTangut',
                            astral: '[\uD81C-\uD821][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InTangut_Components',
                            astral: '\uD822[\uDC00-\uDEFF]'
                        },
                        {
                            name: 'InTelugu',
                            bmp: 'ఀ-\u0C7F'
                        },
                        {
                            name: 'InThaana',
                            bmp: 'ހ-\u07BF'
                        },
                        {
                            name: 'InThai',
                            bmp: '\u0E00-\u0E7F'
                        },
                        {
                            name: 'InTibetan',
                            bmp: 'ༀ-\u0FFF'
                        },
                        {
                            name: 'InTifinagh',
                            bmp: 'ⴰ-⵿'
                        },
                        {
                            name: 'InTirhuta',
                            astral: '\uD805[\uDC80-\uDCDF]'
                        },
                        {
                            name: 'InTransport_and_Map_Symbols',
                            astral: '\uD83D[\uDE80-\uDEFF]'
                        },
                        {
                            name: 'InUgaritic',
                            astral: '\uD800[\uDF80-\uDF9F]'
                        },
                        {
                            name: 'InUnified_Canadian_Aboriginal_Syllabics',
                            bmp: '\u1400-ᙿ'
                        },
                        {
                            name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',
                            bmp: 'ᢰ-\u18FF'
                        },
                        {
                            name: 'InVai',
                            bmp: 'ꔀ-\uA63F'
                        },
                        {
                            name: 'InVariation_Selectors',
                            bmp: '︀-️'
                        },
                        {
                            name: 'InVariation_Selectors_Supplement',
                            astral: '\uDB40[\uDD00-\uDDEF]'
                        },
                        {
                            name: 'InVedic_Extensions',
                            bmp: '᳐-\u1CFF'
                        },
                        {
                            name: 'InVertical_Forms',
                            bmp: '\uFE10-\uFE1F'
                        },
                        {
                            name: 'InWarang_Citi',
                            astral: '\uD806[\uDCA0-\uDCFF]'
                        },
                        {
                            name: 'InYi_Radicals',
                            bmp: '\uA490-\uA4CF'
                        },
                        {
                            name: 'InYi_Syllables',
                            bmp: 'ꀀ-\uA48F'
                        },
                        {
                            name: 'InYijing_Hexagram_Symbols',
                            bmp: '\u4DC0-\u4DFF'
                        }
                    ]);
                };
            },
            {}
        ],
        5: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    if (!XRegExp.addUnicodeData) {
                        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');
                    }
                    XRegExp.addUnicodeData([
                        {
                            name: 'C',
                            alias: 'Other',
                            isBmpLast: true,
                            bmp: '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5\u08BE-\u08D3\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E45-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',
                            astral: '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2F\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5E-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD874-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE1-\uDFFF]|\uD821[\uDFED-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDC02-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF]|\uD83D[\uDED3-\uDEDF\uDEED-\uDEEF\uDEF7-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDD0F\uDD1F\uDD28-\uDD2F\uDD31\uDD32\uDD3F\uDD4C-\uDD4F\uDD5F-\uDD7F\uDD92-\uDDBF\uDDC1-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]'
                        },
                        {
                            name: 'Cc',
                            alias: 'Control',
                            bmp: '\0-\x1F\x7F-\x9F'
                        },
                        {
                            name: 'Cf',
                            alias: 'Format',
                            bmp: '\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
                            astral: '\uD804\uDCBD|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]'
                        },
                        {
                            name: 'Cn',
                            alias: 'Unassigned',
                            bmp: '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5\u08BE-\u08D3\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E45-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
                            astral: '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2F\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5E-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD874-\uD87D\uD87F-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE1-\uDFFF]|\uD821[\uDFED-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDC02-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF]|\uD83D[\uDED3-\uDEDF\uDEED-\uDEEF\uDEF7-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDD0F\uDD1F\uDD28-\uDD2F\uDD31\uDD32\uDD3F\uDD4C-\uDD4F\uDD5F-\uDD7F\uDD92-\uDDBF\uDDC1-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]'
                        },
                        {
                            name: 'Co',
                            alias: 'Private_Use',
                            bmp: '\uE000-\uF8FF',
                            astral: '[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]'
                        },
                        {
                            name: 'Cs',
                            alias: 'Surrogate',
                            bmp: '\uD800-\uDFFF'
                        },
                        {
                            name: 'L',
                            alias: 'Letter',
                            bmp: 'A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-\u08B4\u08B6-\u08BDऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡ\u0AF9ଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-\u0C5Aౠౡ\u0C80ಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎ\u0D54-\u0D56\u0D5F-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-\u13F5\u13F8-\u13FDᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢄᢇ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽ\u1C80-\u1C88ᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-\u9FD5ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋ-\uA7AEꞰ-\uA7B7ꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻ\uA8FDꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥ\uAB70-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ',
                            astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                        },
                        {
                            name: 'Ll',
                            alias: 'Lowercase_Letter',
                            bmp: 'a-zµß-öø-ÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŉŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżž-ƀƃƅƈƌƍƒƕƙ-ƛƞơƣƥƨƪƫƭưƴƶƹƺƽ-ƿǆǉǌǎǐǒǔǖǘǚǜǝǟǡǣǥǧǩǫǭǯǰǳǵǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟȡȣȥȧȩȫȭȯȱȳ-ȹȼȿɀɂɇɉɋɍɏ-ʓʕ-ʯͱͳͷͻ-ͽΐά-ώϐϑϕ-ϗϙϛϝϟϡϣϥϧϩϫϭϯ-ϳϵϸϻϼа-џѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӏӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯա-և\u13F8-\u13FD\u1C80-\u1C88ᴀ-ᴫᵫ-ᵷᵹ-ᶚḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕ-ẝẟạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿ-ἇἐ-ἕἠ-ἧἰ-ἷὀ-ὅὐ-ὗὠ-ὧὰ-ώᾀ-ᾇᾐ-ᾗᾠ-ᾧᾰ-ᾴᾶᾷιῂ-ῄῆῇῐ-ΐῖῗῠ-ῧῲ-ῴῶῷℊℎℏℓℯℴℹℼℽⅆ-ⅉⅎↄⰰ-ⱞⱡⱥⱦⱨⱪⱬⱱⱳⱴⱶ-ⱻⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳤⳬⳮⳳⴀ-ⴥⴧⴭꙁꙃꙅꙇꙉꙋꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯ-ꜱꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝱ-ꝸꝺꝼꝿꞁꞃꞅꞇꞌꞎꞑꞓ-ꞕꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩ\uA7B5\uA7B7ꟺꬰ-ꭚ\uAB60-ꭥ\uAB70-\uABBFﬀ-ﬆﬓ-ﬗａ-ｚ',
                            astral: '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
                        },
                        {
                            name: 'Lm',
                            alias: 'Modifier_Letter',
                            bmp: 'ʰ-ˁˆ-ˑˠ-ˤˬˮʹͺՙـۥۦߴߵߺࠚࠤࠨॱๆໆჼៗᡃᪧᱸ-ᱽᴬ-ᵪᵸᶛ-ᶿⁱⁿₐ-ₜⱼⱽⵯⸯ々〱-〵〻ゝゞー-ヾꀕꓸ-ꓽꘌꙿꚜꚝꜗ-ꜟꝰꞈꟸꟹꧏꧦꩰꫝꫳꫴꭜ-ꭟｰﾞﾟ',
                            astral: '\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]'
                        },
                        {
                            name: 'Lo',
                            alias: 'Other_Letter',
                            bmp: 'ªºƻǀ-ǃʔא-תװ-ײؠ-ؿف-يٮٯٱ-ۓەۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪࠀ-ࠕࡀ-ࡘࢠ-\u08B4\u08B6-\u08BDऄ-हऽॐक़-ॡॲ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡ\u0AF9ଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-\u0C5Aౠౡ\u0C80ಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎ\u0D54-\u0D56\u0D5F-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๅກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎა-ჺჽ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៜᠠ-ᡂᡄ-ᡷᢀ-ᢄᢇ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱷᳩ-ᳬᳮ-ᳱᳵᳶℵ-ℸⴰ-ⵧⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ〆〼ぁ-ゖゟァ-ヺヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-\u9FD5ꀀ-ꀔꀖ-ꒌꓐ-ꓷꔀ-ꘋꘐ-ꘟꘪꘫꙮꚠ-ꛥ\uA78Fꟷꟻ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻ\uA8FDꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧠ-ꧤꧧ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩯꩱ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛꫜꫠ-ꫪꫲꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎יִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼｦ-ｯｱ-ﾝﾠ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ',
                            astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                        },
                        {
                            name: 'Lt',
                            alias: 'Titlecase_Letter',
                            bmp: 'ǅǈǋǲᾈ-ᾏᾘ-ᾟᾨ-ᾯᾼῌῼ'
                        },
                        {
                            name: 'Lu',
                            alias: 'Uppercase_Letter',
                            bmp: 'A-ZÀ-ÖØ-ÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽƁƂƄƆƇƉ-ƋƎ-ƑƓƔƖ-ƘƜƝƟƠƢƤƦƧƩƬƮƯƱ-ƳƵƷƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶ-ǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾɁɃ-ɆɈɊɌɎͰͲͶͿΆΈ-ΊΌΎΏΑ-ΡΣ-ΫϏϒ-ϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹϺϽ-ЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԤԦԨԪԬԮԱ-ՖႠ-ჅჇჍᎠ-\u13F5ḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈ-ἏἘ-ἝἨ-ἯἸ-ἿὈ-ὍὙὛὝὟὨ-ὯᾸ-ΆῈ-ΉῘ-ΊῨ-ῬῸ-Ώℂℇℋ-ℍℐ-ℒℕℙ-ℝℤΩℨK-ℭℰ-ℳℾℿⅅↃⰀ-ⰮⱠⱢ-ⱤⱧⱩⱫⱭ-ⱰⱲⱵⱾ-ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢⳫⳭⳲꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙠꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꚘꚚꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾꞀꞂꞄꞆꞋꞍꞐꞒꞖꞘꞚꞜꞞꞠꞢꞤꞦꞨꞪ-\uA7AEꞰ-\uA7B4\uA7B6Ａ-Ｚ',
                            astral: '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]'
                        },
                        {
                            name: 'M',
                            alias: 'Mark',
                            bmp: '̀-ͯ҃-\u0489֑-ׇֽֿׁׂׅׄؐ-ًؚ-ٰٟۖ-ۜ۟-۪ۤۧۨ-ܑۭܰ-݊ަ-ް߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛\u08D4-\u08E1\u08E3-ःऺ-़ा-ॏ॑-ॗॢॣঁ-ঃ়া-ৄেৈো-্ৗৢৣਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑੰੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣஂா-ூெ-ைொ-்ௗఀ-ఃా-ౄె-ైొ-్ౕౖౢౣಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣංඃ්ා-ුූෘ-ෟෲෳัิ-ฺ็-๎ັິ-ູົຼ່-ໍ༹༘༙༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏႚ-ႝ፝-፟ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝᠋-᠍ᢅᢆᢩᤠ-ᤫᤰ-᤻ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼᪰-\u1ABEᬀ-ᬄ᬴-᭄᭫-᭳ᮀ-ᮂᮡ-ᮭ᯦-᯳ᰤ-᰷᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵\u1DFB-᷿⃐-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꙯-\uA672ꙴ-꙽\uA69Eꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-\uA8C5꣠-꣱ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀ꧥꨩ-ꨶꩃꩌꩍꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭ﬞ︀-️︠-\uFE2F',
                            astral: '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDCA-\uDDCC\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
                        },
                        {
                            name: 'Mc',
                            alias: 'Spacing_Mark',
                            bmp: 'ःऻा-ीॉ-ौॎॏংঃা-ীেৈোৌৗਃਾ-ੀઃા-ીૉોૌଂଃାୀେୈୋୌୗாிுூெ-ைொ-ௌௗఁ-ఃు-ౄಂಃಾೀ-ೄೇೈೊೋೕೖംഃാ-ീെ-ൈൊ-ൌൗංඃා-ෑෘ-ෟෲෳ༾༿ཿါာေးျြၖၗၢ-ၤၧ-ၭႃႄႇ-ႌႏႚ-ႜាើ-ៅះៈᤣ-ᤦᤩ-ᤫᤰᤱᤳ-ᤸᨙᨚᩕᩗᩡᩣᩤᩭ-ᩲᬄᬵᬻᬽ-ᭁᭃ᭄ᮂᮡᮦᮧ᮪ᯧᯪ-ᯬᯮ᯲᯳ᰤ-ᰫᰴᰵ᳡ᳲᳳ〮〯ꠣꠤꠧꢀꢁꢴ-ꣃꥒ꥓ꦃꦴꦵꦺꦻꦽ-꧀ꨯꨰꨳꨴꩍꩻꩽꫫꫮꫯꫵꯣꯤꯦꯧꯩꯪ꯬',
                            astral: '\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4]|\uD81B[\uDF51-\uDF7E]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]'
                        },
                        {
                            name: 'Me',
                            alias: 'Enclosing_Mark',
                            bmp: '\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672'
                        },
                        {
                            name: 'Mn',
                            alias: 'Nonspacing_Mark',
                            bmp: '̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-ٰٟۖ-ۜ۟-۪ۤۧۨ-ܑۭܰ-݊ަ-ް߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛\u08D4-\u08E1\u08E3-ंऺ़ु-ै्॑-ॗॢॣঁ়ু-ৄ্ৢৣਁਂ਼ੁੂੇੈੋ-੍ੑੰੱੵઁં઼ુ-ૅેૈ્ૢૣଁ଼ିୁ-ୄ୍ୖୢୣஂீ்ఀా-ీె-ైొ-్ౕౖౢౣಁ಼ಿೆೌ್ೢೣഁു-ൄ്ൢൣ්ි-ුූัิ-ฺ็-๎ັິ-ູົຼ່-ໍཱ༹༘༙༵༷-ཾྀ-྄྆྇ྍ-ྗྙ-ྼ࿆ိ-ူဲ-့္်ွှၘၙၞ-ၠၱ-ၴႂႅႆႍႝ፝-፟ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴឵ិ-ួំ៉-៓៝᠋-᠍ᢅᢆᢩᤠ-ᤢᤧᤨᤲ᤹-᤻ᨘᨗᨛᩖᩘ-ᩞ᩠ᩢᩥ-ᩬᩳ-᩿᩼᪰-᪽ᬀ-ᬃ᬴ᬶ-ᬺᬼᭂ᭫-᭳ᮀᮁᮢ-ᮥᮨᮩ᮫-ᮭ᯦ᯨᯩᯭᯯ-ᯱᰬ-ᰳᰶ᰷᳐-᳔᳒-᳢᳠-᳨᳭᳴᳸᳹᷀-᷵\u1DFB-᷿⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〭꙯ꙴ-꙽\uA69Eꚟ꛰꛱ꠂ꠆ꠋꠥꠦ꣄\uA8C5꣠-꣱ꤦ-꤭ꥇ-ꥑꦀ-ꦂ꦳ꦶ-ꦹꦼꧥꨩ-ꨮꨱꨲꨵꨶꩃꩌꩼꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫬꫭ꫶ꯥꯨ꯭ﬞ︀-️︠-\uFE2F',
                            astral: '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDCA-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
                        },
                        {
                            name: 'N',
                            alias: 'Number',
                            bmp: '0-9\xB2\xB3\xB9\xBC-\xBE٠-٩۰-۹߀-߉०-९০-৯\u09F4-\u09F9੦-੯૦-૯୦-୯\u0B72-\u0B77௦-\u0BF2౦-౯\u0C78-\u0C7E೦-೯\u0D58-\u0D5E൦-\u0D78෦-෯๐-๙໐-໙༠-\u0F33၀-၉႐-႙\u1369-\u137Cᛮ-ᛰ០-៩\u17F0-\u17F9᠐-᠙᥆-᥏᧐-\u19DA᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙\u2070\u2074-\u2079\u2080-\u2089\u2150-ↂↅ-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD〇〡-〩〸-〺\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF꘠-꘩ꛦ-ꛯ\uA830-\uA835꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９',
                            astral: '\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2]|\uD807[\uDC50-\uDC6C]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83C[\uDD00-\uDD0C]'
                        },
                        {
                            name: 'Nd',
                            alias: 'Decimal_Number',
                            bmp: '0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９',
                            astral: '\uD801[\uDCA0-\uDCA9]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD807[\uDC50-\uDC59]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]'
                        },
                        {
                            name: 'Nl',
                            alias: 'Letter_Number',
                            bmp: 'ᛮ-ᛰⅠ-ↂↅ-ↈ〇〡-〩〸-〺ꛦ-ꛯ',
                            astral: '\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]'
                        },
                        {
                            name: 'No',
                            alias: 'Other_Number',
                            bmp: '\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835',
                            astral: '\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C]|\uD81A[\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD83A[\uDCC7-\uDCCF]|\uD83C[\uDD00-\uDD0C]'
                        },
                        {
                            name: 'P',
                            alias: 'Punctuation',
                            bmp: '!-#%-\\x2A,-/:;\\x3F@\\x5B-\\x5D_\\x7B}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E44\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D＿\uFF5B\uFF5D\uFF5F-\uFF65',
                            astral: '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
                        },
                        {
                            name: 'Pc',
                            alias: 'Connector_Punctuation',
                            bmp: '_‿⁀⁔︳︴﹍-﹏＿'
                        },
                        {
                            name: 'Pd',
                            alias: 'Dash_Punctuation',
                            bmp: '\\x2D\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D'
                        },
                        {
                            name: 'Pe',
                            alias: 'Close_Punctuation',
                            bmp: '\\x29\\x5D}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63'
                        },
                        {
                            name: 'Pf',
                            alias: 'Final_Punctuation',
                            bmp: '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21'
                        },
                        {
                            name: 'Pi',
                            alias: 'Initial_Punctuation',
                            bmp: '\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20'
                        },
                        {
                            name: 'Po',
                            alias: 'Other_Punctuation',
                            bmp: '!-#%-\'\\x2A,\\x2E/:;\\x3F@\\x5C\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166D\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43\u2E44\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65',
                            astral: '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
                        },
                        {
                            name: 'Ps',
                            alias: 'Open_Punctuation',
                            bmp: '\\x28\\x5B\\x7B\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62'
                        },
                        {
                            name: 'S',
                            alias: 'Symbol',
                            bmp: '\\x24\\x2B<->\\x5E`\\x7C~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BE\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u23FE\u2400-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD',
                            astral: '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83B[\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]'
                        },
                        {
                            name: 'Sc',
                            alias: 'Currency_Symbol',
                            bmp: '\\x24\xA2-\xA5\u058F\u060B\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BE\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6'
                        },
                        {
                            name: 'Sk',
                            alias: 'Modifier_Symbol',
                            bmp: '\\x5E`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3',
                            astral: '\uD83C[\uDFFB-\uDFFF]'
                        },
                        {
                            name: 'Sm',
                            alias: 'Math_Symbol',
                            bmp: '\\x2B<->\\x7C~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC',
                            astral: '\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]'
                        },
                        {
                            name: 'So',
                            alias: 'Other_Symbol',
                            bmp: '\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u23FE\u2400-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD',
                            astral: '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]'
                        },
                        {
                            name: 'Z',
                            alias: 'Separator',
                            bmp: ' \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
                        },
                        {
                            name: 'Zl',
                            alias: 'Line_Separator',
                            bmp: '\u2028'
                        },
                        {
                            name: 'Zp',
                            alias: 'Paragraph_Separator',
                            bmp: '\u2029'
                        },
                        {
                            name: 'Zs',
                            alias: 'Space_Separator',
                            bmp: ' \xA0\u1680\u2000-\u200A\u202F\u205F\u3000'
                        }
                    ]);
                };
            },
            {}
        ],
        6: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    if (!XRegExp.addUnicodeData) {
                        throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');
                    }
                    var unicodeData = [
                        {
                            name: 'ASCII',
                            bmp: '\0-\x7F'
                        },
                        {
                            name: 'Alphabetic',
                            bmp: 'A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͅͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևְ-ׇֽֿׁׂׅׄא-תװ-ײؐ-ؚؠ-ٗٙ-ٟٮ-ۓە-ۜۡ-ۭۨ-ۯۺ-ۼۿܐ-ܿݍ-ޱߊ-ߪߴߵߺࠀ-ࠗࠚ-ࠬࡀ-ࡘࢠ-\u08B4\u08B6-\u08BD\u08D4-\u08DF\u08E3-ࣰࣩ-ऻऽ-ौॎ-ॐॕ-ॣॱ-ঃঅ-ঌএঐও-নপ-রলশ-হঽ-ৄেৈোৌৎৗড়ঢ়য়-ৣৰৱਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਾ-ੂੇੈੋੌੑਖ਼-ੜਫ਼ੰ-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽ-ૅે-ૉોૌૐૠ-ૣ\u0AF9ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽ-ୄେୈୋୌୖୗଡ଼ଢ଼ୟ-ୣୱஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-ௌௐௗఀ-ఃఅ-ఌఎ-ఐఒ-నప-హఽ-ౄె-ైొ-ౌౕౖౘ-\u0C5Aౠ-ౣ\u0C80-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽ-ೄೆ-ೈೊ-ೌೕೖೞೠ-ೣೱೲഁ-ഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-ൌൎ\u0D54-ൗ\u0D5F-ൣൺ-ൿංඃඅ-ඖක-නඳ-රලව-ෆා-ුූෘ-ෟෲෳก-ฺเ-ๆํກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆໍໜ-ໟༀཀ-ཇཉ-ཬཱ-ཱྀྈ-ྗྙ-ྼက-ံးျ-ဿၐ-ၢၥ-ၨၮ-ႆႎႜႝႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፟ᎀ-ᎏᎠ-\u13F5\u13F8-\u13FDᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜓᜠ-ᜳᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲᝳក-ឳា-ៈៗៜᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤞᤠ-ᤫᤰ-ᤸᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨛᨠ-ᩞᩡ-ᩴᪧᬀ-ᬳᬵ-ᭃᭅ-ᭋᮀ-ᮩᮬ-ᮯᮺ-ᯥᯧ-ᯱᰀ-ᰵᱍ-ᱏᱚ-ᱽ\u1C80-\u1C88ᳩ-ᳬᳮ-ᳳᳵᳶᴀ-ᶿᷧ-ᷴḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈ\u24B6-\u24E9Ⰰ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-\u9FD5ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙴ-ꙻꙿ-ꛯꜗ-ꜟꜢ-ꞈꞋ-\uA7AEꞰ-\uA7B7ꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠧꡀ-ꡳꢀ-ꣃ\uA8C5ꣲ-ꣷꣻ\uA8FDꤊ-ꤪꤰ-ꥒꥠ-ꥼꦀ-ꦲꦴ-ꦿꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨶꩀ-ꩍꩠ-ꩶꩺꩾ-ꪾꫀꫂꫛ-ꫝꫠ-ꫯꫲ-ꫵꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥ\uAB70-ꯪ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ',
                            astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDF00-\uDF19\uDF1D-\uDF2A]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF36\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                        },
                        {
                            name: 'Any',
                            isBmpLast: true,
                            bmp: '\0-\uFFFF',
                            astral: '[\uD800-\uDBFF][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'Default_Ignorable_Code_Point',
                            bmp: '\xAD͏\u061Cᅟᅠ឴឵᠋-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206Fㅤ︀-️\uFEFFﾠ\uFFF0-\uFFF8',
                            astral: '\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'Lowercase',
                            bmp: 'a-zªµºß-öø-ÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŉŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżž-ƀƃƅƈƌƍƒƕƙ-ƛƞơƣƥƨƪƫƭưƴƶƹƺƽ-ƿǆǉǌǎǐǒǔǖǘǚǜǝǟǡǣǥǧǩǫǭǯǰǳǵǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟȡȣȥȧȩȫȭȯȱȳ-ȹȼȿɀɂɇɉɋɍɏ-ʓʕ-ʸˀˁˠ-ˤͅͱͳͷͺ-ͽΐά-ώϐϑϕ-ϗϙϛϝϟϡϣϥϧϩϫϭϯ-ϳϵϸϻϼа-џѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӏӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯա-և\u13F8-\u13FD\u1C80-\u1C88ᴀ-ᶿḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕ-ẝẟạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿ-ἇἐ-ἕἠ-ἧἰ-ἷὀ-ὅὐ-ὗὠ-ὧὰ-ώᾀ-ᾇᾐ-ᾗᾠ-ᾧᾰ-ᾴᾶᾷιῂ-ῄῆῇῐ-ΐῖῗῠ-ῧῲ-ῴῶῷⁱⁿₐ-ₜℊℎℏℓℯℴℹℼℽⅆ-ⅉⅎⅰ-ⅿↄ\u24D0-\u24E9ⰰ-ⱞⱡⱥⱦⱨⱪⱬⱱⱳⱴⱶ-ⱽⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳤⳬⳮⳳⴀ-ⴥⴧⴭꙁꙃꙅꙇꙉꙋꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛ-ꚝꜣꜥꜧꜩꜫꜭꜯ-ꜱꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯ-ꝸꝺꝼꝿꞁꞃꞅꞇꞌꞎꞑꞓ-ꞕꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩ\uA7B5\uA7B7ꟸ-ꟺꬰ-ꭚꭜ-ꭥ\uAB70-\uABBFﬀ-ﬆﬓ-ﬗａ-ｚ',
                            astral: '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
                        },
                        {
                            name: 'Noncharacter_Code_Point',
                            bmp: '\uFDD0-\uFDEF\uFFFE\uFFFF',
                            astral: '[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]'
                        },
                        {
                            name: 'Uppercase',
                            bmp: 'A-ZÀ-ÖØ-ÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽƁƂƄƆƇƉ-ƋƎ-ƑƓƔƖ-ƘƜƝƟƠƢƤƦƧƩƬƮƯƱ-ƳƵƷƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶ-ǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾɁɃ-ɆɈɊɌɎͰͲͶͿΆΈ-ΊΌΎΏΑ-ΡΣ-ΫϏϒ-ϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹϺϽ-ЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԤԦԨԪԬԮԱ-ՖႠ-ჅჇჍᎠ-\u13F5ḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈ-ἏἘ-ἝἨ-ἯἸ-ἿὈ-ὍὙὛὝὟὨ-ὯᾸ-ΆῈ-ΉῘ-ΊῨ-ῬῸ-Ώℂℇℋ-ℍℐ-ℒℕℙ-ℝℤΩℨK-ℭℰ-ℳℾℿⅅⅠ-ⅯↃ\u24B6-\u24CFⰀ-ⰮⱠⱢ-ⱤⱧⱩⱫⱭ-ⱰⱲⱵⱾ-ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢⳫⳭⳲꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙠꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꚘꚚꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾꞀꞂꞄꞆꞋꞍꞐꞒꞖꞘꞚꞜꞞꞠꞢꞤꞦꞨꞪ-\uA7AEꞰ-\uA7B4\uA7B6Ａ-Ｚ',
                            astral: '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]'
                        },
                        {
                            name: 'White_Space',
                            bmp: '\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
                        }
                    ];
                    unicodeData.push({
                        name: 'Assigned',
                        inverseOf: 'Cn'
                    });
                    XRegExp.addUnicodeData(unicodeData);
                };
            },
            {}
        ],
        7: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    if (!XRegExp.addUnicodeData) {
                        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');
                    }
                    XRegExp.addUnicodeData([
                        {
                            name: 'Adlam',
                            astral: '\uD83A[\uDD00-\uDD4A\uDD50-\uDD59\uDD5E\uDD5F]'
                        },
                        {
                            name: 'Ahom',
                            astral: '\uD805[\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF3F]'
                        },
                        {
                            name: 'Anatolian_Hieroglyphs',
                            astral: '\uD811[\uDC00-\uDE46]'
                        },
                        {
                            name: 'Arabic',
                            bmp: '\u0600-\u0604\u0606-\u060B\u060D-ؚ\u061Eؠ-ؿف-يٖ-ٯٱ-ۜ\u06DE-ۿݐ-ݿࢠ-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-ࣿﭐ-\uFBC1ﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-\uFDFDﹰ-ﹴﹶ-ﻼ',
                            astral: '\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]'
                        },
                        {
                            name: 'Armenian',
                            bmp: 'Ա-Ֆՙ-\u055Fա-և\u058A\u058D-\u058Fﬓ-ﬗ'
                        },
                        {
                            name: 'Avestan',
                            astral: '\uD802[\uDF00-\uDF35\uDF39-\uDF3F]'
                        },
                        {
                            name: 'Balinese',
                            bmp: 'ᬀ-ᭋ᭐-\u1B7C'
                        },
                        {
                            name: 'Bamum',
                            bmp: 'ꚠ-\uA6F7',
                            astral: '\uD81A[\uDC00-\uDE38]'
                        },
                        {
                            name: 'Bassa_Vah',
                            astral: '\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]'
                        },
                        {
                            name: 'Batak',
                            bmp: 'ᯀ-᯳\u1BFC-\u1BFF'
                        },
                        {
                            name: 'Bengali',
                            bmp: 'ঀ-ঃঅ-ঌএঐও-নপ-রলশ-হ়-ৄেৈো-ৎৗড়ঢ়য়-ৣ০-\u09FB'
                        },
                        {
                            name: 'Bhaiksuki',
                            astral: '\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]'
                        },
                        {
                            name: 'Bopomofo',
                            bmp: '\u02EA\u02EBㄅ-ㄭㆠ-ㆺ'
                        },
                        {
                            name: 'Brahmi',
                            astral: '\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]'
                        },
                        {
                            name: 'Braille',
                            bmp: '\u2800-\u28FF'
                        },
                        {
                            name: 'Buginese',
                            bmp: 'ᨀ-ᨛ\u1A1E\u1A1F'
                        },
                        {
                            name: 'Buhid',
                            bmp: 'ᝀ-ᝓ'
                        },
                        {
                            name: 'Canadian_Aboriginal',
                            bmp: '\u1400-ᙿᢰ-ᣵ'
                        },
                        {
                            name: 'Carian',
                            astral: '\uD800[\uDEA0-\uDED0]'
                        },
                        {
                            name: 'Caucasian_Albanian',
                            astral: '\uD801[\uDD30-\uDD63\uDD6F]'
                        },
                        {
                            name: 'Chakma',
                            astral: '\uD804[\uDD00-\uDD34\uDD36-\uDD43]'
                        },
                        {
                            name: 'Cham',
                            bmp: 'ꨀ-ꨶꩀ-ꩍ꩐-꩙\uAA5C-\uAA5F'
                        },
                        {
                            name: 'Cherokee',
                            bmp: 'Ꭰ-\u13F5\u13F8-\u13FD\uAB70-\uABBF'
                        },
                        {
                            name: 'Common',
                            bmp: '\0-@\\x5B-`\\x7B-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7ʹ-\u02DF\u02E5-\u02E9ˬ-\u02FFʹ\u037E\u0385\u0387\u0589\u0605\u060C\u061B\u061C\u061Fـ\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3᳡ᳩ-ᳬᳮ-ᳳᳵᳶ\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BE\u2100-\u2125\u2127-\u2129ℬ-ℱℳ-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u23FE\u2400-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2E00-\u2E44\u2FF0-\u2FFB\u3000-\u3004〆\u3008-\u3020\u3030-\u3037〼-\u303F\u309B\u309C\u30A0\u30FBー\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721ꞈ-\uA78A\uA830-\uA839\uA92Eꧏ\uAB5B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65ｰﾞﾟ\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD',
                            astral: '\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9B\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDF00-\uDF56\uDF60-\uDF71]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]|\uDB40[\uDC01\uDC20-\uDC7F]'
                        },
                        {
                            name: 'Coptic',
                            bmp: 'Ϣ-ϯⲀ-ⳳ\u2CF9-\u2CFF'
                        },
                        {
                            name: 'Cuneiform',
                            astral: '\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]'
                        },
                        {
                            name: 'Cypriot',
                            astral: '\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]'
                        },
                        {
                            name: 'Cyrillic',
                            bmp: 'Ѐ-҄҇-ԯ\u1C80-\u1C88ᴫᵸⷠ-ⷿꙀ-ꚟ\uFE2E\uFE2F'
                        },
                        {
                            name: 'Deseret',
                            astral: '\uD801[\uDC00-\uDC4F]'
                        },
                        {
                            name: 'Devanagari',
                            bmp: 'ऀ-ॐ॓-ॣ०-ॿ꣠-\uA8FD'
                        },
                        {
                            name: 'Duployan',
                            astral: '\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]'
                        },
                        {
                            name: 'Egyptian_Hieroglyphs',
                            astral: '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]'
                        },
                        {
                            name: 'Elbasan',
                            astral: '\uD801[\uDD00-\uDD27]'
                        },
                        {
                            name: 'Ethiopic',
                            bmp: 'ሀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፝-\u137Cᎀ-\u1399ⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮ'
                        },
                        {
                            name: 'Georgian',
                            bmp: 'Ⴀ-ჅჇჍა-ჺჼ-ჿⴀ-ⴥⴧⴭ'
                        },
                        {
                            name: 'Glagolitic',
                            bmp: 'Ⰰ-Ⱞⰰ-ⱞ',
                            astral: '\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]'
                        },
                        {
                            name: 'Gothic',
                            astral: '\uD800[\uDF30-\uDF4A]'
                        },
                        {
                            name: 'Grantha',
                            astral: '\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]'
                        },
                        {
                            name: 'Greek',
                            bmp: 'Ͱ-ͳ\u0375-ͷͺ-ͽͿ\u0384ΆΈ-ΊΌΎ-ΡΣ-ϡϰ-Ͽᴦ-ᴪᵝ-ᵡᵦ-ᵪᶿἀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ῄῆ-ΐῖ-Ί\u1FDD-\u1FEFῲ-ῴῶ-\u1FFEΩꭥ',
                            astral: '\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]'
                        },
                        {
                            name: 'Gujarati',
                            bmp: 'ઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-\u0AF1\u0AF9'
                        },
                        {
                            name: 'Gurmukhi',
                            bmp: 'ਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹ਼ਾ-ੂੇੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵ'
                        },
                        {
                            name: 'Han',
                            bmp: '\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5々〇〡-〩〸-〻㐀-䶵一-\u9FD5豈-舘並-龎',
                            astral: '[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                        },
                        {
                            name: 'Hangul',
                            bmp: 'ᄀ-ᇿ〮〯ㄱ-ㆎ\u3200-\u321E\u3260-\u327Eꥠ-ꥼ가-힣ힰ-ퟆퟋ-ퟻﾠ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ'
                        },
                        {
                            name: 'Hanunoo',
                            bmp: 'ᜠ-᜴'
                        },
                        {
                            name: 'Hatran',
                            astral: '\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]'
                        },
                        {
                            name: 'Hebrew',
                            bmp: '֑-ׇא-תװ-\u05F4יִ-זּטּ-לּמּנּסּףּפּצּ-ﭏ'
                        },
                        {
                            name: 'Hiragana',
                            bmp: 'ぁ-ゖゝ-ゟ',
                            astral: '\uD82C\uDC01|\uD83C\uDE00'
                        },
                        {
                            name: 'Imperial_Aramaic',
                            astral: '\uD802[\uDC40-\uDC55\uDC57-\uDC5F]'
                        },
                        {
                            name: 'Inherited',
                            bmp: '̀-ًͯ҅҆-ٰٕ॒॑᪰-\u1ABE᳐-᳔᳒-᳢᳠-᳨᳭᳴᳸᳹᷀-᷵\u1DFB-᷿‌‍⃐-〪⃰-゙゚〭︀-️︠-︭',
                            astral: '\uD800[\uDDFD\uDEE0]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]'
                        },
                        {
                            name: 'Inscriptional_Pahlavi',
                            astral: '\uD802[\uDF60-\uDF72\uDF78-\uDF7F]'
                        },
                        {
                            name: 'Inscriptional_Parthian',
                            astral: '\uD802[\uDF40-\uDF55\uDF58-\uDF5F]'
                        },
                        {
                            name: 'Javanese',
                            bmp: 'ꦀ-\uA9CD꧐-꧙\uA9DE\uA9DF'
                        },
                        {
                            name: 'Kaithi',
                            astral: '\uD804[\uDC80-\uDCC1]'
                        },
                        {
                            name: 'Kannada',
                            bmp: '\u0C80-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕೖೞೠ-ೣ೦-೯ೱೲ'
                        },
                        {
                            name: 'Katakana',
                            bmp: 'ァ-ヺヽ-ヿㇰ-ㇿ\u32D0-\u32FE\u3300-\u3357ｦ-ｯｱ-ﾝ',
                            astral: '\uD82C\uDC00'
                        },
                        {
                            name: 'Kayah_Li',
                            bmp: '꤀-꤭\uA92F'
                        },
                        {
                            name: 'Kharoshthi',
                            astral: '\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F-\uDE47\uDE50-\uDE58]'
                        },
                        {
                            name: 'Khmer',
                            bmp: 'ក-៝០-៩\u17F0-\u17F9\u19E0-\u19FF'
                        },
                        {
                            name: 'Khojki',
                            astral: '\uD804[\uDE00-\uDE11\uDE13-\uDE3E]'
                        },
                        {
                            name: 'Khudawadi',
                            astral: '\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]'
                        },
                        {
                            name: 'Lao',
                            bmp: 'ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໟ'
                        },
                        {
                            name: 'Latin',
                            bmp: 'A-Za-zªºÀ-ÖØ-öø-ʸˠ-ˤᴀ-ᴥᴬ-ᵜᵢ-ᵥᵫ-ᵷᵹ-ᶾḀ-ỿⁱⁿₐ-ₜKÅℲⅎⅠ-ↈⱠ-ⱿꜢ-ꞇꞋ-\uA7AEꞰ-\uA7B7ꟷ-ꟿꬰ-ꭚꭜ-ꭤﬀ-ﬆＡ-Ｚａ-ｚ'
                        },
                        {
                            name: 'Lepcha',
                            bmp: 'ᰀ-᰷\u1C3B-᱉ᱍ-ᱏ'
                        },
                        {
                            name: 'Limbu',
                            bmp: 'ᤀ-ᤞᤠ-ᤫᤰ-᤻\u1940\u1944-᥏'
                        },
                        {
                            name: 'Linear_A',
                            astral: '\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]'
                        },
                        {
                            name: 'Linear_B',
                            astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]'
                        },
                        {
                            name: 'Lisu',
                            bmp: 'ꓐ-\uA4FF'
                        },
                        {
                            name: 'Lycian',
                            astral: '\uD800[\uDE80-\uDE9C]'
                        },
                        {
                            name: 'Lydian',
                            astral: '\uD802[\uDD20-\uDD39\uDD3F]'
                        },
                        {
                            name: 'Mahajani',
                            astral: '\uD804[\uDD50-\uDD76]'
                        },
                        {
                            name: 'Malayalam',
                            bmp: 'ഁ-ഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-\u0D4F\u0D54-ൣ൦-ൿ'
                        },
                        {
                            name: 'Mandaic',
                            bmp: 'ࡀ-࡛\u085E'
                        },
                        {
                            name: 'Manichaean',
                            astral: '\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]'
                        },
                        {
                            name: 'Marchen',
                            astral: '\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]'
                        },
                        {
                            name: 'Meetei_Mayek',
                            bmp: 'ꫠ-꫶ꯀ-꯭꯰-꯹'
                        },
                        {
                            name: 'Mende_Kikakui',
                            astral: '\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]'
                        },
                        {
                            name: 'Meroitic_Cursive',
                            astral: '\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]'
                        },
                        {
                            name: 'Meroitic_Hieroglyphs',
                            astral: '\uD802[\uDD80-\uDD9F]'
                        },
                        {
                            name: 'Miao',
                            astral: '\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]'
                        },
                        {
                            name: 'Modi',
                            astral: '\uD805[\uDE00-\uDE44\uDE50-\uDE59]'
                        },
                        {
                            name: 'Mongolian',
                            bmp: '\u1800\u1801\u1804\u1806-\u180E᠐-᠙ᠠ-ᡷᢀ-ᢪ',
                            astral: '\uD805[\uDE60-\uDE6C]'
                        },
                        {
                            name: 'Mro',
                            astral: '\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]'
                        },
                        {
                            name: 'Multani',
                            astral: '\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]'
                        },
                        {
                            name: 'Myanmar',
                            bmp: 'က-\u109Fꧠ-ꧾꩠ-ꩿ'
                        },
                        {
                            name: 'Nabataean',
                            astral: '\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]'
                        },
                        {
                            name: 'New_Tai_Lue',
                            bmp: 'ᦀ-ᦫᦰ-ᧉ᧐-\u19DA\u19DE\u19DF'
                        },
                        {
                            name: 'Newa',
                            astral: '\uD805[\uDC00-\uDC59\uDC5B\uDC5D]'
                        },
                        {
                            name: 'Nko',
                            bmp: '߀-ߺ'
                        },
                        {
                            name: 'Ogham',
                            bmp: '\u1680-\u169C'
                        },
                        {
                            name: 'Ol_Chiki',
                            bmp: '᱐-\u1C7F'
                        },
                        {
                            name: 'Old_Hungarian',
                            astral: '\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]'
                        },
                        {
                            name: 'Old_Italic',
                            astral: '\uD800[\uDF00-\uDF23]'
                        },
                        {
                            name: 'Old_North_Arabian',
                            astral: '\uD802[\uDE80-\uDE9F]'
                        },
                        {
                            name: 'Old_Permic',
                            astral: '\uD800[\uDF50-\uDF7A]'
                        },
                        {
                            name: 'Old_Persian',
                            astral: '\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]'
                        },
                        {
                            name: 'Old_South_Arabian',
                            astral: '\uD802[\uDE60-\uDE7F]'
                        },
                        {
                            name: 'Old_Turkic',
                            astral: '\uD803[\uDC00-\uDC48]'
                        },
                        {
                            name: 'Oriya',
                            bmp: 'ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହ଼-ୄେୈୋ-୍ୖୗଡ଼ଢ଼ୟ-ୣ୦-\u0B77'
                        },
                        {
                            name: 'Osage',
                            astral: '\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]'
                        },
                        {
                            name: 'Osmanya',
                            astral: '\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]'
                        },
                        {
                            name: 'Pahawh_Hmong',
                            astral: '\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]'
                        },
                        {
                            name: 'Palmyrene',
                            astral: '\uD802[\uDC60-\uDC7F]'
                        },
                        {
                            name: 'Pau_Cin_Hau',
                            astral: '\uD806[\uDEC0-\uDEF8]'
                        },
                        {
                            name: 'Phags_Pa',
                            bmp: 'ꡀ-\uA877'
                        },
                        {
                            name: 'Phoenician',
                            astral: '\uD802[\uDD00-\uDD1B\uDD1F]'
                        },
                        {
                            name: 'Psalter_Pahlavi',
                            astral: '\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]'
                        },
                        {
                            name: 'Rejang',
                            bmp: 'ꤰ-꥓\uA95F'
                        },
                        {
                            name: 'Runic',
                            bmp: 'ᚠ-ᛪᛮ-ᛸ'
                        },
                        {
                            name: 'Samaritan',
                            bmp: 'ࠀ-࠭\u0830-\u083E'
                        },
                        {
                            name: 'Saurashtra',
                            bmp: 'ꢀ-\uA8C5\uA8CE-꣙'
                        },
                        {
                            name: 'Sharada',
                            astral: '\uD804[\uDD80-\uDDCD\uDDD0-\uDDDF]'
                        },
                        {
                            name: 'Shavian',
                            astral: '\uD801[\uDC50-\uDC7F]'
                        },
                        {
                            name: 'Siddham',
                            astral: '\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]'
                        },
                        {
                            name: 'SignWriting',
                            astral: '\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]'
                        },
                        {
                            name: 'Sinhala',
                            bmp: 'ංඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟ෦-෯ෲ-\u0DF4',
                            astral: '\uD804[\uDDE1-\uDDF4]'
                        },
                        {
                            name: 'Sora_Sompeng',
                            astral: '\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]'
                        },
                        {
                            name: 'Sundanese',
                            bmp: 'ᮀ-ᮿ\u1CC0-\u1CC7'
                        },
                        {
                            name: 'Syloti_Nagri',
                            bmp: 'ꠀ-\uA82B'
                        },
                        {
                            name: 'Syriac',
                            bmp: '\u0700-\u070D\u070F-݊ݍ-ݏ'
                        },
                        {
                            name: 'Tagalog',
                            bmp: 'ᜀ-ᜌᜎ-᜔'
                        },
                        {
                            name: 'Tagbanwa',
                            bmp: 'ᝠ-ᝬᝮ-ᝰᝲᝳ'
                        },
                        {
                            name: 'Tai_Le',
                            bmp: 'ᥐ-ᥭᥰ-ᥴ'
                        },
                        {
                            name: 'Tai_Tham',
                            bmp: 'ᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙\u1AA0-\u1AAD'
                        },
                        {
                            name: 'Tai_Viet',
                            bmp: 'ꪀ-ꫂꫛ-\uAADF'
                        },
                        {
                            name: 'Takri',
                            astral: '\uD805[\uDE80-\uDEB7\uDEC0-\uDEC9]'
                        },
                        {
                            name: 'Tamil',
                            bmp: 'ஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-\u0BFA'
                        },
                        {
                            name: 'Tangut',
                            astral: '\uD81B\uDFE0|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]'
                        },
                        {
                            name: 'Telugu',
                            bmp: 'ఀ-ఃఅ-ఌఎ-ఐఒ-నప-హఽ-ౄె-ైొ-్ౕౖౘ-\u0C5Aౠ-ౣ౦-౯\u0C78-\u0C7F'
                        },
                        {
                            name: 'Thaana',
                            bmp: 'ހ-ޱ'
                        },
                        {
                            name: 'Thai',
                            bmp: 'ก-ฺเ-\u0E5B'
                        },
                        {
                            name: 'Tibetan',
                            bmp: 'ༀ-ཇཉ-ཬཱ-ྗྙ-ྼ\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA'
                        },
                        {
                            name: 'Tifinagh',
                            bmp: 'ⴰ-ⵧⵯ\u2D70⵿'
                        },
                        {
                            name: 'Tirhuta',
                            astral: '\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]'
                        },
                        {
                            name: 'Ugaritic',
                            astral: '\uD800[\uDF80-\uDF9D\uDF9F]'
                        },
                        {
                            name: 'Vai',
                            bmp: 'ꔀ-ꘫ'
                        },
                        {
                            name: 'Warang_Citi',
                            astral: '\uD806[\uDCA0-\uDCF2\uDCFF]'
                        },
                        {
                            name: 'Yi',
                            bmp: 'ꀀ-ꒌ\uA490-\uA4C6'
                        }
                    ]);
                };
            },
            {}
        ],
        8: [
            function (require, module, exports) {
                var XRegExp = require('./xregexp');
                require('./addons/build')(XRegExp);
                require('./addons/matchrecursive')(XRegExp);
                require('./addons/unicode-base')(XRegExp);
                require('./addons/unicode-blocks')(XRegExp);
                require('./addons/unicode-categories')(XRegExp);
                require('./addons/unicode-properties')(XRegExp);
                require('./addons/unicode-scripts')(XRegExp);
                module.exports = XRegExp;
            },
            {
                './addons/build': 1,
                './addons/matchrecursive': 2,
                './addons/unicode-base': 3,
                './addons/unicode-blocks': 4,
                './addons/unicode-categories': 5,
                './addons/unicode-properties': 6,
                './addons/unicode-scripts': 7,
                './xregexp': 9
            }
        ],
        9: [
            function (require, module, exports) {
                'use strict';
                var REGEX_DATA = 'xregexp';
                var features = {
                    astral: false,
                    natives: false
                };
                var nativ = {
                    exec: RegExp.prototype.exec,
                    test: RegExp.prototype.test,
                    match: String.prototype.match,
                    replace: String.prototype.replace,
                    split: String.prototype.split
                };
                var fixed = {};
                var regexCache = {};
                var patternCache = {};
                var tokens = [];
                var defaultScope = 'default';
                var classScope = 'class';
                var nativeTokens = {
                    'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
                    'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
                };
                var replacementToken = /\$(?:{([\w$]+)}|(\d\d?|[\s\S]))/g;
                var correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined;
                var hasFlagsProp = /x/.flags !== undefined;
                var toString = {}.toString;
                function hasNativeFlag(flag) {
                    var isSupported = true;
                    try {
                        new RegExp('', flag);
                    } catch (exception) {
                        isSupported = false;
                    }
                    return isSupported;
                }
                var hasNativeU = hasNativeFlag('u');
                var hasNativeY = hasNativeFlag('y');
                var registeredFlags = {
                    g: true,
                    i: true,
                    m: true,
                    u: hasNativeU,
                    y: hasNativeY
                };
                function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
                    var p;
                    regex[REGEX_DATA] = { captureNames: captureNames };
                    if (isInternalOnly) {
                        return regex;
                    }
                    if (regex.__proto__) {
                        regex.__proto__ = XRegExp.prototype;
                    } else {
                        for (p in XRegExp.prototype) {
                            regex[p] = XRegExp.prototype[p];
                        }
                    }
                    regex[REGEX_DATA].source = xSource;
                    regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;
                    return regex;
                }
                function clipDuplicates(str) {
                    return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
                }
                function copyRegex(regex, options) {
                    if (!XRegExp.isRegExp(regex)) {
                        throw new TypeError('Type RegExp expected');
                    }
                    var xData = regex[REGEX_DATA] || {};
                    var flags = getNativeFlags(regex);
                    var flagsToAdd = '';
                    var flagsToRemove = '';
                    var xregexpSource = null;
                    var xregexpFlags = null;
                    options = options || {};
                    if (options.removeG) {
                        flagsToRemove += 'g';
                    }
                    if (options.removeY) {
                        flagsToRemove += 'y';
                    }
                    if (flagsToRemove) {
                        flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');
                    }
                    if (options.addG) {
                        flagsToAdd += 'g';
                    }
                    if (options.addY) {
                        flagsToAdd += 'y';
                    }
                    if (flagsToAdd) {
                        flags = clipDuplicates(flags + flagsToAdd);
                    }
                    if (!options.isInternalOnly) {
                        if (xData.source !== undefined) {
                            xregexpSource = xData.source;
                        }
                        if (xData.flags != null) {
                            xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;
                        }
                    }
                    regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? xData.captureNames.slice(0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);
                    return regex;
                }
                function dec(hex) {
                    return parseInt(hex, 16);
                }
                function getContextualTokenSeparator(match, scope, flags) {
                    if (match.input.charAt(match.index - 1) === '(' || match.input.charAt(match.index + match[0].length) === ')' || isPatternNext(match.input, match.index + match[0].length, flags, '[?*+]|{\\d+(?:,\\d*)?}')) {
                        return '';
                    }
                    return '(?:)';
                }
                function getNativeFlags(regex) {
                    return hasFlagsProp ? regex.flags : nativ.exec.call(/\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];
                }
                function hasNamedCapture(regex) {
                    return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
                }
                function hex(dec) {
                    return parseInt(dec, 10).toString(16);
                }
                function indexOf(array, value) {
                    var len = array.length;
                    var i;
                    for (i = 0; i < len; ++i) {
                        if (array[i] === value) {
                            return i;
                        }
                    }
                    return -1;
                }
                function isPatternNext(pattern, pos, flags, needlePattern) {
                    var inlineCommentPattern = '\\(\\?#[^)]*\\)';
                    var lineCommentPattern = '#[^#\\n]*';
                    var patternsToIgnore = flags.indexOf('x') > -1 ? [
                        '\\s',
                        lineCommentPattern,
                        inlineCommentPattern
                    ] : [inlineCommentPattern];
                    return nativ.test.call(new RegExp('^(?:' + patternsToIgnore.join('|') + ')*(?:' + needlePattern + ')'), pattern.slice(pos));
                }
                function isType(value, type) {
                    return toString.call(value) === '[object ' + type + ']';
                }
                function pad4(str) {
                    while (str.length < 4) {
                        str = '0' + str;
                    }
                    return str;
                }
                function prepareFlags(pattern, flags) {
                    var i;
                    if (clipDuplicates(flags) !== flags) {
                        throw new SyntaxError('Invalid duplicate regex flag ' + flags);
                    }
                    pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function ($0, $1) {
                        if (nativ.test.call(/[gy]/, $1)) {
                            throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);
                        }
                        flags = clipDuplicates(flags + $1);
                        return '';
                    });
                    for (i = 0; i < flags.length; ++i) {
                        if (!registeredFlags[flags.charAt(i)]) {
                            throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));
                        }
                    }
                    return {
                        pattern: pattern,
                        flags: flags
                    };
                }
                function prepareOptions(value) {
                    var options = {};
                    if (isType(value, 'String')) {
                        XRegExp.forEach(value, /[^\s,]+/, function (match) {
                            options[match] = true;
                        });
                        return options;
                    }
                    return value;
                }
                function registerFlag(flag) {
                    if (!/^[\w$]$/.test(flag)) {
                        throw new Error('Flag must be a single character A-Za-z0-9_$');
                    }
                    registeredFlags[flag] = true;
                }
                function runTokens(pattern, flags, pos, scope, context) {
                    var i = tokens.length;
                    var leadChar = pattern.charAt(pos);
                    var result = null;
                    var match;
                    var t;
                    while (i--) {
                        t = tokens[i];
                        if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && flags.indexOf(t.flag) === -1) {
                            continue;
                        }
                        match = XRegExp.exec(pattern, t.regex, pos, 'sticky');
                        if (match) {
                            result = {
                                matchLength: match[0].length,
                                output: t.handler.call(context, match, scope, flags),
                                reparse: t.reparse
                            };
                            break;
                        }
                    }
                    return result;
                }
                function setAstral(on) {
                    features.astral = on;
                }
                function setNatives(on) {
                    RegExp.prototype.exec = (on ? fixed : nativ).exec;
                    RegExp.prototype.test = (on ? fixed : nativ).test;
                    String.prototype.match = (on ? fixed : nativ).match;
                    String.prototype.replace = (on ? fixed : nativ).replace;
                    String.prototype.split = (on ? fixed : nativ).split;
                    features.natives = on;
                }
                function toObject(value) {
                    if (value == null) {
                        throw new TypeError('Cannot convert null or undefined to object');
                    }
                    return value;
                }
                function XRegExp(pattern, flags) {
                    if (XRegExp.isRegExp(pattern)) {
                        if (flags !== undefined) {
                            throw new TypeError('Cannot supply flags when copying a RegExp');
                        }
                        return copyRegex(pattern);
                    }
                    pattern = pattern === undefined ? '' : String(pattern);
                    flags = flags === undefined ? '' : String(flags);
                    if (XRegExp.isInstalled('astral') && flags.indexOf('A') === -1) {
                        flags += 'A';
                    }
                    if (!patternCache[pattern]) {
                        patternCache[pattern] = {};
                    }
                    if (!patternCache[pattern][flags]) {
                        var context = {
                            hasNamedCapture: false,
                            captureNames: []
                        };
                        var scope = defaultScope;
                        var output = '';
                        var pos = 0;
                        var result;
                        var applied = prepareFlags(pattern, flags);
                        var appliedPattern = applied.pattern;
                        var appliedFlags = applied.flags;
                        while (pos < appliedPattern.length) {
                            do {
                                result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
                                if (result && result.reparse) {
                                    appliedPattern = appliedPattern.slice(0, pos) + result.output + appliedPattern.slice(pos + result.matchLength);
                                }
                            } while (result && result.reparse);
                            if (result) {
                                output += result.output;
                                pos += result.matchLength || 1;
                            } else {
                                var token = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];
                                output += token;
                                pos += token.length;
                                if (token === '[' && scope === defaultScope) {
                                    scope = classScope;
                                } else if (token === ']' && scope === classScope) {
                                    scope = defaultScope;
                                }
                            }
                        }
                        patternCache[pattern][flags] = {
                            pattern: nativ.replace.call(output, /(?:\(\?:\))+/g, '(?:)'),
                            flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),
                            captures: context.hasNamedCapture ? context.captureNames : null
                        };
                    }
                    var generated = patternCache[pattern][flags];
                    return augment(new RegExp(generated.pattern, generated.flags), generated.captures, pattern, flags);
                }
                XRegExp.prototype = new RegExp();
                XRegExp.version = '3.2.0';
                XRegExp._clipDuplicates = clipDuplicates;
                XRegExp._hasNativeFlag = hasNativeFlag;
                XRegExp._dec = dec;
                XRegExp._hex = hex;
                XRegExp._pad4 = pad4;
                XRegExp.addToken = function (regex, handler, options) {
                    options = options || {};
                    var optionalFlags = options.optionalFlags;
                    var i;
                    if (options.flag) {
                        registerFlag(options.flag);
                    }
                    if (optionalFlags) {
                        optionalFlags = nativ.split.call(optionalFlags, '');
                        for (i = 0; i < optionalFlags.length; ++i) {
                            registerFlag(optionalFlags[i]);
                        }
                    }
                    tokens.push({
                        regex: copyRegex(regex, {
                            addG: true,
                            addY: hasNativeY,
                            isInternalOnly: true
                        }),
                        handler: handler,
                        scope: options.scope || defaultScope,
                        flag: options.flag,
                        reparse: options.reparse,
                        leadChar: options.leadChar
                    });
                    XRegExp.cache.flush('patterns');
                };
                XRegExp.cache = function (pattern, flags) {
                    if (!regexCache[pattern]) {
                        regexCache[pattern] = {};
                    }
                    return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));
                };
                XRegExp.cache.flush = function (cacheName) {
                    if (cacheName === 'patterns') {
                        patternCache = {};
                    } else {
                        regexCache = {};
                    }
                };
                XRegExp.escape = function (str) {
                    return nativ.replace.call(toObject(str), /[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
                };
                XRegExp.exec = function (str, regex, pos, sticky) {
                    var cacheKey = 'g';
                    var addY = false;
                    var fakeY = false;
                    var match;
                    var r2;
                    addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);
                    if (addY) {
                        cacheKey += 'y';
                    } else if (sticky) {
                        fakeY = true;
                        cacheKey += 'FakeY';
                    }
                    regex[REGEX_DATA] = regex[REGEX_DATA] || {};
                    r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
                        addG: true,
                        addY: addY,
                        source: fakeY ? regex.source + '|()' : undefined,
                        removeY: sticky === false,
                        isInternalOnly: true
                    }));
                    pos = pos || 0;
                    r2.lastIndex = pos;
                    match = fixed.exec.call(r2, str);
                    if (fakeY && match && match.pop() === '') {
                        match = null;
                    }
                    if (regex.global) {
                        regex.lastIndex = match ? r2.lastIndex : 0;
                    }
                    return match;
                };
                XRegExp.forEach = function (str, regex, callback) {
                    var pos = 0;
                    var i = -1;
                    var match;
                    while (match = XRegExp.exec(str, regex, pos)) {
                        callback(match, ++i, str, regex);
                        pos = match.index + (match[0].length || 1);
                    }
                };
                XRegExp.globalize = function (regex) {
                    return copyRegex(regex, { addG: true });
                };
                XRegExp.install = function (options) {
                    options = prepareOptions(options);
                    if (!features.astral && options.astral) {
                        setAstral(true);
                    }
                    if (!features.natives && options.natives) {
                        setNatives(true);
                    }
                };
                XRegExp.isInstalled = function (feature) {
                    return !!features[feature];
                };
                XRegExp.isRegExp = function (value) {
                    return toString.call(value) === '[object RegExp]';
                };
                XRegExp.match = function (str, regex, scope) {
                    var global = regex.global && scope !== 'one' || scope === 'all';
                    var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';
                    var result;
                    var r2;
                    regex[REGEX_DATA] = regex[REGEX_DATA] || {};
                    r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
                        addG: !!global,
                        removeG: scope === 'one',
                        isInternalOnly: true
                    }));
                    result = nativ.match.call(toObject(str), r2);
                    if (regex.global) {
                        regex.lastIndex = scope === 'one' && result ? result.index + result[0].length : 0;
                    }
                    return global ? result || [] : result && result[0];
                };
                XRegExp.matchChain = function (str, chain) {
                    return function recurseChain(values, level) {
                        var item = chain[level].regex ? chain[level] : { regex: chain[level] };
                        var matches = [];
                        function addMatch(match) {
                            if (item.backref) {
                                if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {
                                    throw new ReferenceError('Backreference to undefined group: ' + item.backref);
                                }
                                matches.push(match[item.backref] || '');
                            } else {
                                matches.push(match[0]);
                            }
                        }
                        for (var i = 0; i < values.length; ++i) {
                            XRegExp.forEach(values[i], item.regex, addMatch);
                        }
                        return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
                    }([str], 0);
                };
                XRegExp.replace = function (str, search, replacement, scope) {
                    var isRegex = XRegExp.isRegExp(search);
                    var global = search.global && scope !== 'one' || scope === 'all';
                    var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';
                    var s2 = search;
                    var result;
                    if (isRegex) {
                        search[REGEX_DATA] = search[REGEX_DATA] || {};
                        s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
                            addG: !!global,
                            removeG: scope === 'one',
                            isInternalOnly: true
                        }));
                    } else if (global) {
                        s2 = new RegExp(XRegExp.escape(String(search)), 'g');
                    }
                    result = fixed.replace.call(toObject(str), s2, replacement);
                    if (isRegex && search.global) {
                        search.lastIndex = 0;
                    }
                    return result;
                };
                XRegExp.replaceEach = function (str, replacements) {
                    var i;
                    var r;
                    for (i = 0; i < replacements.length; ++i) {
                        r = replacements[i];
                        str = XRegExp.replace(str, r[0], r[1], r[2]);
                    }
                    return str;
                };
                XRegExp.split = function (str, separator, limit) {
                    return fixed.split.call(toObject(str), separator, limit);
                };
                XRegExp.test = function (str, regex, pos, sticky) {
                    return !!XRegExp.exec(str, regex, pos, sticky);
                };
                XRegExp.uninstall = function (options) {
                    options = prepareOptions(options);
                    if (features.astral && options.astral) {
                        setAstral(false);
                    }
                    if (features.natives && options.natives) {
                        setNatives(false);
                    }
                };
                XRegExp.union = function (patterns, flags, options) {
                    options = options || {};
                    var conjunction = options.conjunction || 'or';
                    var numCaptures = 0;
                    var numPriorCaptures;
                    var captureNames;
                    function rewrite(match, paren, backref) {
                        var name = captureNames[numCaptures - numPriorCaptures];
                        if (paren) {
                            ++numCaptures;
                            if (name) {
                                return '(?<' + name + '>';
                            }
                        } else if (backref) {
                            return '\\' + (+backref + numPriorCaptures);
                        }
                        return match;
                    }
                    if (!(isType(patterns, 'Array') && patterns.length)) {
                        throw new TypeError('Must provide a nonempty array of patterns to merge');
                    }
                    var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
                    var output = [];
                    var pattern;
                    for (var i = 0; i < patterns.length; ++i) {
                        pattern = patterns[i];
                        if (XRegExp.isRegExp(pattern)) {
                            numPriorCaptures = numCaptures;
                            captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || [];
                            output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));
                        } else {
                            output.push(XRegExp.escape(pattern));
                        }
                    }
                    var separator = conjunction === 'none' ? '' : '|';
                    return XRegExp(output.join(separator), flags);
                };
                fixed.exec = function (str) {
                    var origLastIndex = this.lastIndex;
                    var match = nativ.exec.apply(this, arguments);
                    var name;
                    var r2;
                    var i;
                    if (match) {
                        if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {
                            r2 = copyRegex(this, {
                                removeG: true,
                                isInternalOnly: true
                            });
                            nativ.replace.call(String(str).slice(match.index), r2, function () {
                                var len = arguments.length;
                                var i;
                                for (i = 1; i < len - 2; ++i) {
                                    if (arguments[i] === undefined) {
                                        match[i] = undefined;
                                    }
                                }
                            });
                        }
                        if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
                            for (i = 1; i < match.length; ++i) {
                                name = this[REGEX_DATA].captureNames[i - 1];
                                if (name) {
                                    match[name] = match[i];
                                }
                            }
                        }
                        if (this.global && !match[0].length && this.lastIndex > match.index) {
                            this.lastIndex = match.index;
                        }
                    }
                    if (!this.global) {
                        this.lastIndex = origLastIndex;
                    }
                    return match;
                };
                fixed.test = function (str) {
                    return !!fixed.exec.call(this, str);
                };
                fixed.match = function (regex) {
                    var result;
                    if (!XRegExp.isRegExp(regex)) {
                        regex = new RegExp(regex);
                    } else if (regex.global) {
                        result = nativ.match.apply(this, arguments);
                        regex.lastIndex = 0;
                        return result;
                    }
                    return fixed.exec.call(regex, toObject(this));
                };
                fixed.replace = function (search, replacement) {
                    var isRegex = XRegExp.isRegExp(search);
                    var origLastIndex;
                    var captureNames;
                    var result;
                    if (isRegex) {
                        if (search[REGEX_DATA]) {
                            captureNames = search[REGEX_DATA].captureNames;
                        }
                        origLastIndex = search.lastIndex;
                    } else {
                        search += '';
                    }
                    if (isType(replacement, 'Function')) {
                        result = nativ.replace.call(String(this), search, function () {
                            var args = arguments;
                            var i;
                            if (captureNames) {
                                args[0] = new String(args[0]);
                                for (i = 0; i < captureNames.length; ++i) {
                                    if (captureNames[i]) {
                                        args[0][captureNames[i]] = args[i + 1];
                                    }
                                }
                            }
                            if (isRegex && search.global) {
                                search.lastIndex = args[args.length - 2] + args[0].length;
                            }
                            return replacement.apply(undefined, args);
                        });
                    } else {
                        result = nativ.replace.call(this == null ? this : String(this), search, function () {
                            var args = arguments;
                            return nativ.replace.call(String(replacement), replacementToken, function ($0, $1, $2) {
                                var n;
                                if ($1) {
                                    n = +$1;
                                    if (n <= args.length - 3) {
                                        return args[n] || '';
                                    }
                                    n = captureNames ? indexOf(captureNames, $1) : -1;
                                    if (n < 0) {
                                        throw new SyntaxError('Backreference to undefined group ' + $0);
                                    }
                                    return args[n + 1] || '';
                                }
                                if ($2 === '$') {
                                    return '$';
                                }
                                if ($2 === '&' || +$2 === 0) {
                                    return args[0];
                                }
                                if ($2 === '`') {
                                    return args[args.length - 1].slice(0, args[args.length - 2]);
                                }
                                if ($2 === '\'') {
                                    return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
                                }
                                $2 = +$2;
                                if (!isNaN($2)) {
                                    if ($2 > args.length - 3) {
                                        throw new SyntaxError('Backreference to undefined group ' + $0);
                                    }
                                    return args[$2] || '';
                                }
                                throw new SyntaxError('Invalid token ' + $0);
                            });
                        });
                    }
                    if (isRegex) {
                        if (search.global) {
                            search.lastIndex = 0;
                        } else {
                            search.lastIndex = origLastIndex;
                        }
                    }
                    return result;
                };
                fixed.split = function (separator, limit) {
                    if (!XRegExp.isRegExp(separator)) {
                        return nativ.split.apply(this, arguments);
                    }
                    var str = String(this);
                    var output = [];
                    var origLastIndex = separator.lastIndex;
                    var lastLastIndex = 0;
                    var lastLength;
                    limit = (limit === undefined ? -1 : limit) >>> 0;
                    XRegExp.forEach(str, separator, function (match) {
                        if (match.index + match[0].length > lastLastIndex) {
                            output.push(str.slice(lastLastIndex, match.index));
                            if (match.length > 1 && match.index < str.length) {
                                Array.prototype.push.apply(output, match.slice(1));
                            }
                            lastLength = match[0].length;
                            lastLastIndex = match.index + lastLength;
                        }
                    });
                    if (lastLastIndex === str.length) {
                        if (!nativ.test.call(separator, '') || lastLength) {
                            output.push('');
                        }
                    } else {
                        output.push(str.slice(lastLastIndex));
                    }
                    separator.lastIndex = origLastIndex;
                    return output.length > limit ? output.slice(0, limit) : output;
                };
                XRegExp.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function (match, scope) {
                    if (match[1] === 'B' && scope === defaultScope) {
                        return match[0];
                    }
                    throw new SyntaxError('Invalid escape ' + match[0]);
                }, {
                    scope: 'all',
                    leadChar: '\\'
                });
                XRegExp.addToken(/\\u{([\dA-Fa-f]+)}/, function (match, scope, flags) {
                    var code = dec(match[1]);
                    if (code > 1114111) {
                        throw new SyntaxError('Invalid Unicode code point ' + match[0]);
                    }
                    if (code <= 65535) {
                        return '\\u' + pad4(hex(code));
                    }
                    if (hasNativeU && flags.indexOf('u') > -1) {
                        return match[0];
                    }
                    throw new SyntaxError('Cannot use Unicode code point above \\u{FFFF} without flag u');
                }, {
                    scope: 'all',
                    leadChar: '\\'
                });
                XRegExp.addToken(/\[(\^?)\]/, function (match) {
                    return match[1] ? '[\\s\\S]' : '\\b\\B';
                }, { leadChar: '[' });
                XRegExp.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, { leadChar: '(' });
                XRegExp.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, { flag: 'x' });
                XRegExp.addToken(/\./, function () {
                    return '[\\s\\S]';
                }, {
                    flag: 's',
                    leadChar: '.'
                });
                XRegExp.addToken(/\\k<([\w$]+)>/, function (match) {
                    var index = isNaN(match[1]) ? indexOf(this.captureNames, match[1]) + 1 : +match[1];
                    var endIndex = match.index + match[0].length;
                    if (!index || index > this.captureNames.length) {
                        throw new SyntaxError('Backreference to undefined group ' + match[0]);
                    }
                    return '\\' + index + (endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ? '' : '(?:)');
                }, { leadChar: '\\' });
                XRegExp.addToken(/\\(\d+)/, function (match, scope) {
                    if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {
                        throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' + match[0]);
                    }
                    return match[0];
                }, {
                    scope: 'all',
                    leadChar: '\\'
                });
                XRegExp.addToken(/\(\?P?<([\w$]+)>/, function (match) {
                    if (!isNaN(match[1])) {
                        throw new SyntaxError('Cannot use integer as capture name ' + match[0]);
                    }
                    if (match[1] === 'length' || match[1] === '__proto__') {
                        throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);
                    }
                    if (indexOf(this.captureNames, match[1]) > -1) {
                        throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);
                    }
                    this.captureNames.push(match[1]);
                    this.hasNamedCapture = true;
                    return '(';
                }, { leadChar: '(' });
                XRegExp.addToken(/\((?!\?)/, function (match, scope, flags) {
                    if (flags.indexOf('n') > -1) {
                        return '(?:';
                    }
                    this.captureNames.push(null);
                    return '(';
                }, {
                    optionalFlags: 'n',
                    leadChar: '('
                });
                module.exports = XRegExp;
            },
            {}
        ]
    }, {}, [8])(8);
}));
/*passbolt-mad/util/validation*/
define('passbolt-mad/util/validation', [
    'exports',
    'xregexp',
    'passbolt-mad/util/lang/i18n'
], function (exports, _xregexp, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _xregexp2 = _interopRequireDefault(_xregexp);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var Validation = can.Construct.extend('mad.Validation', {
        validate: function validate(rule, value, values, options) {
            if ((typeof rule === 'undefined' ? 'undefined' : _typeof(rule)) == 'object') {
                options = rule;
                if (typeof rule.rule == 'undefined') {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'rule.rule');
                }
                if (rule.rule.indexOf('/') == '0') {
                    rule = 'regex';
                } else if ($.isArray(rule.rule)) {
                    options.params = rule.rule.slice(1);
                    rule = rule.rule[0];
                } else {
                    rule = rule.rule;
                }
            }
            if (typeof Validation[rule] == 'undefined') {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'rule');
            }
            return Validation[rule](value, values, options);
        },
        _getAlphaRegExp: function _getAlphaRegExp(type) {
            var returnValue = '\\p{L}';
            if (type) {
                switch (type) {
                case 'ASCII':
                    returnValue = 'a-zA-Z';
                    break;
                default:
                    returnValue = '\\p{' + type + '}';
                }
            }
            return returnValue;
        },
        regex: function regex(value, values, options) {
            options = options || {};
            var returnValue = true, regexp = options.rule, not = options.not || false;
            if (regexp.indexOf('/') == 0) {
                regexp = regexp.substr(1, regexp.length - (regexp.length - regexp.lastIndexOf('/') + 1));
            }
            var xregexp = new _xregexp2.default(regexp);
            var match = xregexp.test(value);
            if (not && match || !not && !match) {
                returnValue = options.message || __('The regex is not validated');
            }
            return returnValue;
        },
        notEmpty: function notEmpty(value, values, options) {
            options = options || {};
            if (typeof value == 'undefined' || value == null || $.isArray(value) && !value.length || $.trim(value) == '') {
                return options.message || __('Should not be empty');
            }
            return true;
        },
        notBlank: function notBlank(value, values, options) {
            return this.notEmpty(value, values, options);
        },
        uuid: function uuid(value, values, options) {
            options = options || {};
            var regexp = '^[abcdef0-9]{8}-[abcdef0-9]{4}-[abcdef0-9]{4}-[abcdef0-9]{4}-[abcdef0-9]{12}$';
            var xregexp = new _xregexp2.default(regexp);
            if (!xregexp.test(value)) {
                return options.message || __('Not valid uuid');
            }
            return true;
        },
        alphaNumeric: function alphaNumeric(value, values, options) {
            options = options || {};
            var alphaRegExp = Validation._getAlphaRegExp(options.type);
            var xregexp = new _xregexp2.default('^[' + alphaRegExp + ' \'0-9]*$');
            if (!xregexp.test(value)) {
                return __('Only alpha-numeric characters allowed');
            }
            return true;
        },
        alpha: function alpha(value, values, options) {
            options = options || {};
            var alphaRegExp = Validation._getAlphaRegExp(options.type);
            var xregexp = (0, _xregexp2.default)('^[' + alphaRegExp + ' \']*$');
            if (!xregexp.test(value)) {
                return __('Only ' + options.type + ' characters allowed');
            }
            return true;
        },
        utf8Extended: function utf8Extended(value, values, options) {
            options = options || {};
            var message = options.message || __('Only utf8 characters allowed.');
            if (typeof value !== 'string') {
                return message;
            }
            return true;
        },
        utf8: function utf8(value, values, options) {
            options = options || {};
            var message = options.message || __('Only utf8 characters allowed (except emoticons).');
            if (typeof value !== 'string') {
                return message;
            }
            if (/(?:[\uD800-\uDBFF][\uDC00-\uDFFF])/.test(value)) {
                return message;
            }
            return true;
        },
        num: function num(value) {
            var xregexp = (0, _xregexp2.default)('^-?[0-9]+.?[0-9]*$');
            if (!xregexp.test(value)) {
                return __('Only numeric characters allowed');
            }
            return true;
        },
        required: function required(value, values, options) {
            options = options || {};
            var xregexp = (0, _xregexp2.default)('^[s\n\t ]*$');
            if (typeof value == 'undefined' || value === null || xregexp.test(value)) {
                return options.message || __('This information is required');
            }
            return true;
        },
        text: function text(value) {
            var xregexp = (0, _xregexp2.default)('<(.|\n)*?>');
            if (xregexp.test(value)) {
                return __('No HTML tags allowed');
            }
            return true;
        },
        url: function url(value) {
            var regex = '^\t\t\t\t([a-z0-9+.-]+):\t\t\t\t\t(?:\t\t\t\t\t\t(?:((?:[a-z0-9-._~!$&\'()*+,;=:]|%[0-9A-F]{2})*)@)?\t\t\t\t\t\t((?:[a-z0-9-._~!$&\'()*+,;=]|%[0-9A-F]{2})*)\t\t\t\t\t\t(?::(d*))?\t\t\t\t\t\t(/(?:[a-z0-9-._~!$&\'()*+,;=:@/]|%[0-9A-F]{2})*)?\t\t\t\t\t|\t\t\t\t\t\t(/?(?:[a-z0-9-._~!$&\'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&\'()*+,;=:@/]|%[0-9A-F]{2})*)?\t\t\t\t)\t\t\t\t(?:\t\t\t\t\t((?:[a-z0-9-._~!$&\'()*+,;=:/?@]|%[0-9A-F]{2})*)\t\t\t\t)?\t\t\t\t(?:\t\t\t\t\t#((?:[a-z0-9-._~!$&\'()*+,;=:/?@]|%[0-9A-F]{2})*)\t\t\t\t)?\t\t\t$';
            var xregexp = (0, _xregexp2.default)(regex);
            if (xregexp.test(value)) {
                return __('Not valid url.');
            }
            return true;
        },
        nospace: function nospace(value) {
            var xregexp = (0, _xregexp2.default)('[ ]+');
            if (xregexp.test(value)) {
                return __('No space are allowed');
            }
            return true;
        },
        email: function email(value, values, options) {
            options = options || {};
            var hostnameRegexp = '(?:[_\\p{L}0-9][-_\\p{L}0-9]*\\.)*(?:[\\p{L}0-9][-\\p{L}0-9]{0,62})\\.(?:(?:[a-z]{2}\\.)?[a-z]{2,})';
            var emailRegexp = '^[\\p{L}0-9!#$%&\'*+/=?^_`{|}~-]+(?:\\.[\\p{L}0-9!#$%&\'*+/=?^_`{|}~-]+)*@' + hostnameRegexp + '$';
            var xregexp = (0, _xregexp2.default)(emailRegexp);
            if (!xregexp.test(value)) {
                return options.message || __('Only email format is allowed');
            }
            return true;
        },
        date: function date(value, values, options) {
            value = value || '';
            options = options || {};
            var format = options.format || 'dd/mm/yyyy', yearPos = null, monthPos = null, dayPos = null, days = [
                    0,
                    31,
                    29,
                    31,
                    30,
                    31,
                    30,
                    31,
                    31,
                    30,
                    31,
                    30,
                    31
                ], dateRegExp = '', returnValue = true;
            switch (format) {
            case 'm/d/y':
                dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{2}|\d{4})$/;
                monthPos = 1;
                dayPos = 2;
                yearPos = 3;
                break;
            case 'mm/dd/yy':
                dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{2})$/;
                monthPos = 1;
                dayPos = 2;
                yearPos = 3;
                break;
            case 'mm/dd/yyyy':
                dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{4})$/;
                monthPos = 1;
                dayPos = 2;
                yearPos = 3;
                break;
            case 'dd/mm/yyyy':
                dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{4})$/;
                monthPos = 2;
                dayPos = 1;
                yearPos = 3;
                break;
            case 'd/m/yy':
                dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{2}|\d{4})$/;
                monthPos = 2;
                dayPos = 1;
                yearPos = 3;
                break;
            case 'y/m/d':
                dateRegExp = /^(\d{2}|\d{4})[./-](\d{1,2})[./-](\d{1,2})$/;
                monthPos = 2;
                dayPos = 3;
                yearPos = 1;
                break;
            case 'yy/mm/dd':
                dateRegExp = /^(\d{4}|\d{1,2})[./-](\d{1,2})[./-](\d{1,2})$/;
                monthPos = 2;
                dayPos = 3;
                yearPos = 1;
                break;
            case 'yyyy/mm/dd':
                dateRegExp = /^(\d{4})[./-](\d{1,2})[./-](\d{1,2})$/;
                monthPos = 2;
                dayPos = 3;
                yearPos = 1;
                break;
            }
            var dateParts = value.match(dateRegExp);
            if (!dateParts) {
                returnValue = __('The date format is incorect, expected : ') + format;
            } else {
                var year = dateParts[yearPos] * 1;
                var month = dateParts[monthPos] * 1;
                var day = dateParts[dayPos] * 1;
                if (day < 1 || day > days[month] || month < 1 || month > 12) {
                    returnValue = __('The date format is incorect, expected : ') + format;
                }
                if (month == 2 && day == 29) {
                    var isLeapYear = year % 4 != 0 ? false : year % 100 != 0 ? true : year % 1000 != 0 ? false : true;
                    if (!isLeapYear) {
                        returnValue = __('The year %s is not a leap year', year);
                    }
                }
            }
            return returnValue;
        },
        lengthBetween: function lengthBetween(value, values, options) {
            value = value || '';
            options = options || [];
            var returnValue = true, min = options.params[0] || null, max = options.params[1] || null;
            if (min != null && value.length < min || max != null && value.length > max) {
                returnValue = options.message ? __(options.message, min, max) : __('Must be between %s and %s characters long', min, max);
            }
            return returnValue;
        },
        foreignRule: function foreignRule(value, options) {
            var returnValue = true;
            if (options.model && options.model.validateRules && options.attribute) {
                for (var i in options.model.validateRules[options.attribute]) {
                    var rule = options.model.validateRules[options.attribute][i];
                    var foreignReturnValue = Validation.validate(rule, value);
                    if (foreignReturnValue !== true) {
                        returnValue = foreignReturnValue;
                        break;
                    }
                }
            }
            return returnValue;
        },
        choice: function choice(value, options) {
            var returnValue = true, choices = [];
            value = typeof value == 'undefined' ? null : value;
            if (options.choices) {
                choices = options.choices;
            } else if (options.callback) {
                choices = options.callback.apply(this);
            }
            if (choices.indexOf(value) == -1) {
                returnValue = __('%s is not a valid value', value);
            }
            return returnValue;
        }
    }, {});
    exports.default = Validation;
});
/*passbolt-mad/model/model*/
define('passbolt-mad/model/model', [
    'exports',
    'passbolt-mad/model/serializer/cake_serializer',
    'passbolt-mad/model/list',
    'passbolt-mad/util/validation',
    'can/model/model',
    'can/map/attributes/attributes'
], function (exports, _cake_serializer, _list, _validation) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    var _list2 = _interopRequireDefault(_list);
    var _validation2 = _interopRequireDefault(_validation);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Model = can.Model.extend('mad.Model', {
        forceStore: false,
        madStore: new can.Model.List(),
        validationRules: {},
        isModelAttribute: function isModelAttribute(name) {
            return /model[s]?$/.test(this.attributes[name]);
        },
        isMultipleAttribute: function isMultipleAttribute(name) {
            return /models$/.test(this.attributes[name]);
        },
        parseModel: function parseModel(data, xhr) {
            data = data || {};
            if (typeof data.header != 'undefined') {
                data = data.body;
                data = _cake_serializer2.default.from(data, this);
            } else if (data[this.shortName]) {
                data = _cake_serializer2.default.from(data, this);
            }
            return data;
        },
        getValidationRules: function getValidationRules(validationCase) {
            if (typeof validationCase == 'undefined' || validationCase == null) {
                validationCase = 'default';
            }
            return this.validationRules || {};
        },
        getAttributeRule: function getAttributeRule(attrName, ruleName, validationCase) {
            var rules = this.getValidationRules(validationCase);
            var rule = null;
            if ($.isArray(rules[attrName])) {
                for (var i in rules[attrName]) {
                    if (rules[attrName][i].rule && rules[attrName][i].rule == 'required') {
                        rule = rules[attrName][i];
                    }
                }
            }
            return rule;
        },
        search: function search(data, key, value) {
            var returnValue = [], split = key.split('.'), modelName = split[0], attrName = split[1];
            for (var i in data) {
                if ($.isArray(data[i][modelName])) {
                    for (var j in data[i][modelName]) {
                        if (data[i][modelName][j][attrName] == value) {
                            returnValue.push(data[i]);
                        }
                    }
                } else {
                    if (data[i][modelName][attrName] == value) {
                        returnValue.push(data[i]);
                    }
                }
                if (data[i].children) {
                    var childrenSearch = Model.search(data[i].children, key, value);
                    if (childrenSearch.length) {
                        returnValue = $.merge(returnValue, childrenSearch);
                    }
                }
            }
            return returnValue;
        },
        searchOne: function searchOne(data, key, value) {
            var returnValue = null;
            var searchResults = Model.search(data, key, value);
            if (searchResults.length) {
                returnValue = searchResults[0];
            }
            return returnValue;
        },
        validateAttribute: function validateAttribute(attrName, value, values, validationCase) {
            var returnValue = [];
            if (typeof validationCase == 'undefined') {
                validationCase = 'default';
            }
            var rules = this.getValidationRules(validationCase);
            if (typeof rules[attrName] != 'undefined') {
                var requiredRule = this.getAttributeRule(attrName, 'required', validationCase);
                if (requiredRule != null) {
                    var requiredResult = _validation2.default.validate(requiredRule, value);
                    if (requiredResult !== true) {
                        returnValue.push(requiredResult);
                        return returnValue;
                    }
                } else {
                    var requiredResult = _validation2.default.validate('required', value);
                    if (requiredResult !== true) {
                        return returnValue;
                    }
                }
                var attributeRules = rules[attrName];
                for (var i in attributeRules) {
                    var validateResult = _validation2.default.validate(attributeRules[i], value, values);
                    if (validateResult !== true) {
                        returnValue.push(validateResult);
                    }
                }
            }
            return returnValue;
        }
    }, {});
    exports.default = Model;
    _patchCircularDependency(_cake_serializer2);
    _patchCircularDependency(_list2);
    _patchCircularDependency(_validation2);
    function _patchCircularDependency(obj) {
        var defaultExport;
        Object.defineProperty(obj.default, 'default', {
            configurable: true,
            set: function (value) {
                if (obj.default.__esModule) {
                    obj.default = value;
                }
                defaultExport = value;
            },
            get: function () {
                return defaultExport;
            }
        });
    }
});
/*passbolt-mad/net/response*/
define('passbolt-mad/net/response', [
    'exports',
    'passbolt-mad/model/model'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Response = _model2.default.extend('mad.net.Response', {
        attributes: {
            header: 'json',
            body: 'json'
        },
        STATUS_ERROR: 'error',
        STATUS_NOTICE: 'notice',
        STATUS_SUCCESS: 'success',
        STATUS_WARNING: 'warning',
        RESPONSE_ID_UNDEFINED: 'undefined',
        RESPONSE_CONTROLLER_UNDEFINED: 'undefined',
        RESPONSE_ACTION_UNDEFINED: 'undefined',
        getResponse: function getResponse(type, data) {
            var returnValue = null, header = {}, body = null;
            switch (type) {
            case 'unreachable':
                header = {
                    id: Response.RESPONSE_ID_UNDEFINED,
                    status: Response.STATUS_ERROR,
                    controller: Response.RESPONSE_CONTROLLER_UNDEFINED,
                    action: Response.RESPONSE_ACTION_UNDEFINED,
                    title: __('Unable to reach the server'),
                    message: __('The url is probably incorrectly formatted')
                };
                body = data;
                break;
            }
            returnValue = new Response({
                header: header,
                body: body
            });
            return returnValue;
        },
        isResponse: function isResponse(data) {
            var returnValue = false;
            if (typeof data != 'undefined' && data != null) {
                if (data.header) {
                    returnValue = true;
                }
            }
            return returnValue;
        },
        getData: function getData(data) {
            return data.body;
        }
    }, {
        getCode: function getCode() {
            return this.attr('header').code;
        },
        getStatus: function getStatus() {
            return this.attr('header').status;
        },
        getTitle: function getTitle() {
            return this.attr('header').title;
        },
        getMessage: function getMessage() {
            return this.attr('header').message;
        },
        getAction: function getAction() {
            return this.attr('header').action;
        },
        getController: function getController() {
            return this.attr('header').controller;
        },
        getData: function getData() {
            return this.attr('body');
        }
    });
    exports.default = Response;
});
/*passbolt-mad/net/response_handler*/
define('passbolt-mad/net/response_handler', [
    'exports',
    'passbolt-mad/config/config',
    'passbolt-mad/net/response',
    'can/construct/construct'
], function (exports, _config, _response) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _config2 = _interopRequireDefault(_config);
    var _response2 = _interopRequireDefault(_response);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ResponseHandler = can.Construct.extend('mad.net.ResponseHandler', {}, {
        defaults: { defaultErrorHandlerClass: 'mad.error.ErrorHandler' },
        'response': null,
        'request': null,
        'callback': null,
        _getErrorHandlerClass: function _getErrorHandlerClass() {
            var ErrorHandlerClass = this.defaults.defaultErrorHandlerClass;
            var configErrorHandler = _config2.default.read('net.ErrorHandlerClassName');
            if (configErrorHandler !== undefined) {
                ErrorHandlerClass = configErrorHandler;
            }
            return ErrorHandlerClass;
        },
        init: function init(response, request, callbacks) {
            this.response = response;
            this.request = request;
            this.callbacks = callbacks || {};
        },
        handle: function handle() {
            this._log();
            switch (this.response.getStatus('status')) {
            case _response2.default.STATUS_ERROR:
                this._error();
                break;
            case _response2.default.STATUS_NOTICE:
                this._notice();
                break;
            case _response2.default.STATUS_SUCCESS:
                this._success();
                break;
            case _response2.default.STATUS_WARNING:
                this._warning();
                break;
            }
        },
        _log: function _log() {
            var message = this.response.getStatus().toUpperCase() + ' ' + this.request.type.toUpperCase() + ' ' + this.request.url + '  ' + this.response.getController() + ' ' + this.response.getAction() + ' (' + this.response.getTitle() + ')';
        },
        _success: function _success() {
            if (this.callbacks.success) {
                this.callbacks.success(this.response, this.request);
            }
        },
        _error: function _error() {
            var ErrorHandlerClass = can.getObject(this._getErrorHandlerClass());
            ErrorHandlerClass.handleError(this.response.getStatus(), this.response.getTitle(), this.response.getMessage(), this.response.getData());
            if (this.callbacks.error) {
                this.callbacks.error(this.response, this.request);
            }
        },
        _notice: function _notice() {
            var ErrorHandlerClass = can.getObject(this._getErrorHandlerClass());
            ErrorHandlerClass.handleError(this.response.getStatus(), this.response.getTitle(), this.response.getMessage(), this.response.getData());
            if (this.callbacks.notice) {
                this.callbacks.notice(this.response, this.request);
            }
        },
        _warning: function _warning() {
            var ErrorHandlerClass = can.getObject(this._getErrorHandlerClass());
            ErrorHandlerClass.handleError(this.response.getStatus(), this.response.getTitle(), this.response.getMessage(), this.response.getData());
            if (this.callbacks.warning) {
                this.callbacks.warning(this.response, this.request);
            }
        }
    });
    exports.default = ResponseHandler;
});
/*passbolt-mad/config/config.json*/
define('passbolt-mad/config/config.json', [], function () {
    return {
        'core': {
            'components': [
                'EventBus',
                'AppController'
            ]
        },
        'app': {
            'debug': 1,
            'url': 'http://localhost',
            'controllerElt': 'body',
            'namespace': 'app',
            'ControllerClassName': ''
        },
        'error': { 'ErrorHandlerClassName': 'mad.error.ErrorHandler' },
        'i18n': { 'dictionnaryUrl': 'dictionnaries/EN-en.json' },
        'net': { 'ResponseHandlerClassName': 'mad.net.ResponseHandler' }
    };
});
/*passbolt-mad/bootstrap*/
define('passbolt-mad/bootstrap', [
    'exports',
    'passbolt-mad/config/config',
    'passbolt-mad/helper/html',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/net/response_handler',
    'passbolt-mad/config/config.json'
], function (exports, _config, _html, _bus, _i18n, _response_handler, _config3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _config2 = _interopRequireDefault(_config);
    var _html2 = _interopRequireDefault(_html);
    var _bus2 = _interopRequireDefault(_bus);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _response_handler2 = _interopRequireDefault(_response_handler);
    var _config4 = _interopRequireDefault(_config3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _config2.default.load(_config4.default);
    var Bootstrap = can.Construct.extend('mad.Bootstrap', { defaults: { callbacks: { ready: null } } }, {
        init: function init(options) {
            this.options = {};
            options = options || {};
            $.extend(true, this.options, Bootstrap.defaults, options);
            var appUrl = _config2.default.read('app.url');
            if (typeof appUrl == 'undefined') {
                throw mad.Exception.get(mad.error.MISSING_CONFIG, 'app.url');
            }
            mad.setGlobal('APP_URL', appUrl);
            var ErrorHandlerClass = can.getObject(_config2.default.read('error.ErrorHandlerClassName'));
            if (!ErrorHandlerClass) {
                throw mad.Exception.get(mad.error.MISSING_CONFIG, 'error.ErrorHandlerClassName');
            }
            _config2.default.write('error.ErrorHandlerClass', ErrorHandlerClass);
            var ResponseHandlerClass = can.getObject(_config2.default.read('net.ResponseHandlerClassName'));
            if (!ResponseHandlerClass) {
                throw mad.Exception.get(mad.error.MISSING_CONFIG, 'net.ResponseHandlerClassName');
            }
            _config2.default.write('net.ResponseHandlerClass', ResponseHandlerClass);
            var AppControllerClass = can.getObject(_config2.default.read('app.ControllerClassName'));
            if (!AppControllerClass) {
                throw mad.Exception.get(mad.error.MISSING_CONFIG, 'app.ControllerClassName');
            }
            _config2.default.write('app.AppControllerClass', AppControllerClass);
            if (!$(_config2.default.read('app.controllerElt')).length) {
                throw mad.Exception.get(mad.error.MISSING_CONFIG, 'app.controllerElt');
            }
            var ns = can.getObject(_config2.default.read('app.namespace'), window, true);
            var components = _config2.default.read('core.components');
            for (var i in components) {
                if (components[i] == 'Devel' && (_config2.default.read('app.debug') == null || _config2.default.read('app.debug') == 0)) {
                    continue;
                }
                this['init' + components[i]]();
            }
        },
        initAppController: function initAppController() {
            var self = this;
            _bus2.default.bind('app_ready', function () {
                if (self.options.callbacks.ready) {
                    self.options.callbacks.ready();
                }
            });
            var AppControllerClass = can.getObject(_config2.default.read('app.ControllerClassName'));
            var app = new AppControllerClass($(_config2.default.read('app.controllerElt')));
            app.start();
        },
        initEventBus: function initEventBus() {
            var elt = _html2.default.create($(_config2.default.read('app.controllerElt')), 'before', '<div/>');
            var bus = _bus2.default.singleton(elt);
            mad.bus = bus;
        },
        initDevel: function initDevel() {
            var elt = _html2.default.create($(_config2.default.read('app.controllerElt')), 'before', '<div/>');
            var dev = new mad.devel.Devel(elt);
            mad.dev = dev;
        }
    });
    exports.default = Bootstrap;
});
/*passbolt-mad/error/error_handler*/
define('passbolt-mad/error/error_handler', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var ErrorHandler = can.Construct.extend('mad.error.ErrorHandler', {
        _log: function _log(status, title, message, data) {
            var log = status.toUpperCase() + ' ' + title + ' ' + '(' + message + ')';
            if (data) {
            }
        },
        handleException: function handleException(exception) {
            mad.error.ErrorHandler._log('exception', exception.name, exception.message, exception.stack || null);
            throw exception;
        },
        handleError: function handleError(status, title, message, data) {
            mad.error.ErrorHandler._log(status, title, message || '', data || null);
        }
    }, {});
    exports.default = ErrorHandler;
});
/*app/error/error_handler*/
define('app/error/error_handler', [
    'exports',
    'passbolt-mad/error/error_handler'
], function (exports, _error_handler) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _error_handler2 = _interopRequireDefault(_error_handler);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ErrorHandler = _error_handler2.default.extend('passbolt.error.ErrorHandler', {});
    exports.default = ErrorHandler;
});
/*passbolt-mad/view/view*/
define('passbolt-mad/view/view', [
    'exports',
    'passbolt-mad/control/control',
    'passbolt-mad/helper/html'
], function (exports, _control, _html) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _control2 = _interopRequireDefault(_control);
    var _html2 = _interopRequireDefault(_html);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var View = _control2.default.extend('mad.View', {
        defaults: {
            template: null,
            element: null
        },
        render: function render(uri, data) {
            data = data || {};
            data['_mad'] = mad;
            return can.view.render(uri, data);
        }
    }, {
        getController: function getController() {
            return this.options.controller;
        },
        addClass: function addClass(className) {
            this.element.addClass(className);
        },
        hide: function hide() {
            this.element.hide();
        },
        loading: function loading(_loading) {
            if (_loading) {
                this.element.prepend('<div class="js_loading" />');
            } else {
                $('.js_loading', this.element).remove();
            }
        },
        removeClass: function removeClass(className) {
            this.element.removeClass(className);
        },
        position: function position(options) {
            _html2.default.position(this.element, options);
        },
        render: function render() {
            return View.render(this.options.template, this.getController().getViewData());
        },
        insertInDom: function insertInDom(html) {
            this.element.html(html);
        },
        show: function show() {
            this.element.show();
        }
    });
    exports.default = View;
});
/*passbolt-mad/view/component/dialog*/
define('passbolt-mad/view/component/dialog', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Dialog = _view2.default.extend('mad.view.component.Dialog', {}, {
        setTitle: function setTitle(title) {
            $('.dialog-header h2 .dialog-header-title', this.element).text(title);
        },
        setSubtitle: function setSubtitle(subTitle) {
            $('.dialog-header h2 .dialog-header-subtitle', this.element).text(subTitle);
        },
        '.dialog-close click': function dialogCloseClick(el, ev) {
            ev.preventDefault();
            this.element.remove();
        },
        '{window} keyup': function windowKeyup(el, ev) {
            if (ev.keyCode == 27) {
                this.element.remove();
            }
        },
        ' .js-dialog-cancel click': function jsDialogCancelClick(el, ev) {
            this.element.remove();
        }
    });
    exports.default = Dialog;
});
/*can/view/ejs/ejs*/
define('can/view/ejs/ejs', [
    'can/util/util',
    'can/view/view',
    'can/util/string/string',
    'can/compute/compute',
    'can/view/scanner',
    'can/view/render'
], function (can) {
    var extend = can.extend, EJS = function (options) {
            if (this.constructor !== EJS) {
                var ejs = new EJS(options);
                return function (data, helpers) {
                    return ejs.render(data, helpers);
                };
            }
            if (typeof options === 'function') {
                this.template = { fn: options };
                return;
            }
            extend(this, options);
            this.template = this.scanner.scan(this.text, this.name);
        };
    can.EJS = EJS;
    EJS.prototype.render = function (object, extraHelpers) {
        object = object || {};
        return this.template.fn.call(object, object, new EJS.Helpers(object, extraHelpers || {}));
    };
    extend(EJS.prototype, {
        scanner: new can.view.Scanner({
            text: {
                outStart: 'with(_VIEW) { with (_CONTEXT) {',
                outEnd: '}}',
                argNames: '_CONTEXT,_VIEW',
                context: 'this'
            },
            tokens: [
                [
                    'templateLeft',
                    '<%%'
                ],
                [
                    'templateRight',
                    '%>'
                ],
                [
                    'returnLeft',
                    '<%=='
                ],
                [
                    'escapeLeft',
                    '<%='
                ],
                [
                    'commentLeft',
                    '<%#'
                ],
                [
                    'left',
                    '<%'
                ],
                [
                    'right',
                    '%>'
                ],
                [
                    'returnRight',
                    '%>'
                ]
            ],
            helpers: [{
                    name: /\s*\(([\$\w]+)\)\s*->([^\n]*)/,
                    fn: function (content) {
                        var quickFunc = /\s*\(([\$\w]+)\)\s*->([^\n]*)/, parts = content.match(quickFunc);
                        return 'can.proxy(function(__){var ' + parts[1] + '=can.$(__);' + parts[2] + '}, this);';
                    }
                }],
            transform: function (source) {
                return source.replace(/<%([\s\S]+?)%>/gm, function (whole, part) {
                    var brackets = [], foundBracketPair, i;
                    part.replace(/[{}]/gm, function (bracket, offset) {
                        brackets.push([
                            bracket,
                            offset
                        ]);
                    });
                    do {
                        foundBracketPair = false;
                        for (i = brackets.length - 2; i >= 0; i--) {
                            if (brackets[i][0] === '{' && brackets[i + 1][0] === '}') {
                                brackets.splice(i, 2);
                                foundBracketPair = true;
                                break;
                            }
                        }
                    } while (foundBracketPair);
                    if (brackets.length >= 2) {
                        var result = ['<%'], bracket, last = 0;
                        for (i = 0; bracket = brackets[i]; i++) {
                            result.push(part.substring(last, last = bracket[1]));
                            if (bracket[0] === '{' && i < brackets.length - 1 || bracket[0] === '}' && i > 0) {
                                result.push(bracket[0] === '{' ? '{ %><% ' : ' %><% }');
                            } else {
                                result.push(bracket[0]);
                            }
                            ++last;
                        }
                        result.push(part.substring(last), '%>');
                        return result.join('');
                    } else {
                        return '<%' + part + '%>';
                    }
                });
            }
        })
    });
    EJS.Helpers = function (data, extras) {
        this._data = data;
        this._extras = extras;
        extend(this, extras);
    };
    EJS.Helpers.prototype = {
        list: function (list, cb) {
            can.each(list, function (item, i) {
                cb(item, i, list);
            });
        },
        each: function (list, cb) {
            if (can.isArray(list)) {
                this.list(list, cb);
            } else {
                can.view.lists(list, cb);
            }
        }
    };
    can.view.register({
        suffix: 'ejs',
        script: function (id, src) {
            return 'can.EJS(function(_CONTEXT,_VIEW) { ' + new EJS({
                text: src,
                name: id
            }).template.out + ' })';
        },
        renderer: function (id, text) {
            return EJS({
                text: text,
                name: id
            });
        }
    });
    can.ejs.Helpers = EJS.Helpers;
    return can;
});
/*passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/lib/can/viewEjsSystem', [], function(){ return {}; });
/*passbolt-mad/view/template/helper/componentTag.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/helper/componentTag.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_helper_componentTag_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<');
                ___v1ew.push(can.view.txt(1, '', 1, this, function () {
                    return tag;
                }));
                ___v1ew.push(' id="');
                ___v1ew.push(can.view.txt(true, '', 'id', this, function () {
                    return id;
                }));
                ___v1ew.push('"\n');
                ___v1ew.push(can.view.txt(0, '', 1, this, function () {
                    var ___v1ew = [];
                    for (var name in attributes) {
                        ___v1ew.push('\n    ');
                        ___v1ew.push(can.view.txt(1, '', 1, this, function () {
                            return attrName;
                        }));
                        ___v1ew.push('="');
                        ___v1ew.push(can.view.txt(true, '', 'null', this, function () {
                            return attributes[name];
                        }));
                        ___v1ew.push('"\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n', can.view.pending({ scope: this }), '/>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/helper/component*/
define('passbolt-mad/helper/component', [
    'exports',
    'passbolt-mad/helper/html',
    'passbolt-mad/view/view',
    'passbolt-mad/view/template/helper/componentTag.ejs!',
    'can/construct/construct'
], function (exports, _html, _view, _componentTag) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _html2 = _interopRequireDefault(_html);
    var _view2 = _interopRequireDefault(_view);
    var _componentTag2 = _interopRequireDefault(_componentTag);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ComponentHelper = can.Construct.extend('mad.helper.Component', {
        create: function create(refElement, position, ComponentClass, options) {
            options = options || {};
            var classAttributes = {};
            if (typeof ComponentClass.defaults.attributes != 'undefined') {
                classAttributes = ComponentClass.defaults.attributes;
            }
            var attributes = $.extend({}, classAttributes, options.attributes);
            if (refElement.length == 0) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'refElement');
            }
            var componentHtml = _view2.default.render(_componentTag2.default, {
                id: options.id || '',
                tag: options.tag || ComponentClass.defaults.tag,
                attributes: attributes
            });
            var $component = _html2.default.create(refElement, position, componentHtml);
            return new ComponentClass($component, options);
        }
    }, {});
    exports.default = ComponentHelper;
});
/*passbolt-mad/util/array/array*/
define('passbolt-mad/util/array/array', [
    'exports',
    'passbolt-mad/util/util'
], function (exports, _util) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _util2 = _interopRequireDefault(_util);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _util2.default.array = _util2.default.array || {};
    _util2.default.array.intersect = function (arr1, arr2) {
        return arr1.filter(function (n) {
            return arr2.indexOf(n) > -1;
        });
    };
    exports.default = _util2.default.array;
});
/*passbolt-mad/model/state*/
define('passbolt-mad/model/state', [
    'exports',
    'passbolt-mad/model/model'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var State = _model2.default.extend('mad.model.State', {
        attributes: {
            previous: 'can.List',
            current: 'can.List'
        }
    }, {
        init: function init() {
            this.previous = new can.List([]);
            this.current = new can.List([]);
        },
        is: function is(state) {
            if (state == null && !this.current.length) {
                return true;
            }
            return this.current.indexOf(state) != -1 ? true : false;
        },
        was: function was(state) {
            if (state == null && !this.previous.length) {
                return true;
            }
            return this.previous.indexOf(state) != -1 ? true : false;
        },
        setState: function setState(states) {
            if (typeof states == 'undefined') {
                states = [];
            }
            states = $.isArray(states) ? states : [states];
            this.previous.replace(this.current.attr());
            this.current.replace(states);
        },
        addState: function addState(states) {
            states = $.isArray(states) ? states : [states];
            this.previous.replace(this.current.attr());
            $.each(this.current.attr(), function (i, val) {
                states.push(val);
            });
            this.current.replace(states);
        },
        removeState: function removeState(states) {
            states = $.isArray(states) ? states : [states];
            var newStates = [];
            this.previous.replace(this.current.attr());
            $.each(this.current.attr(), function (i, val) {
                if (states.indexOf(val) == -1) {
                    newStates.push(val);
                }
            });
            this.current.replace(newStates);
        },
        toString: function toString(separator) {
            if (typeof separator == 'undefined') {
                separator = ',';
            }
            return this.current.join(separator);
        }
    });
    exports.default = State;
});
/*passbolt-mad/component/component*/
define('passbolt-mad/component/component', [
    'exports',
    'passbolt-mad/util/array/array',
    'passbolt-mad/control/control',
    'passbolt-mad/control/bus',
    'passbolt-mad/model/state',
    'passbolt-mad/view/view'
], function (exports, _array, _control, _bus, _state, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _array2 = _interopRequireDefault(_array);
    var _control2 = _interopRequireDefault(_control);
    var _bus2 = _interopRequireDefault(_bus);
    var _state2 = _interopRequireDefault(_state);
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var Component = _control2.default.extend('mad.Component', {
        defaults: {
            icon: null,
            label: 'ComponentController',
            cssClasses: ['js_component'],
            state: 'ready',
            tag: 'div',
            template: null,
            viewClass: _view2.default,
            viewData: {},
            silentLoading: true
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            if (!this.options.viewClass instanceof _view2.default) {
                throw new mad.error.WrongParameter('options.viewClass', 'mad.View');
            }
            this.state = new _state2.default();
            for (var i in options.cssClasses) {
                if (!this.element.hasClass(this.options.cssClasses[i])) {
                    this.element.addClass(this.options.cssClasses[i]);
                }
            }
        },
        destroy: function destroy() {
            if (this.state.is('loading')) {
                _bus2.default.trigger('passbolt_component_loading_complete', [this]);
            }
            this.state.unbind('label');
            if (typeof this.element != 'undefined' && this.element != null) {
                var currentStates = this.state.current.attr();
                for (var i in currentStates) {
                    this.element.removeClass(currentStates[i]);
                }
                for (var i in this.options.cssClasses) {
                    this.element.removeClass(this.options.cssClasses[i]);
                }
            }
            if (this.view) {
                this.view.destroy();
            }
            this._super();
        },
        _goNextStates: function _goNextStates() {
            var leaving = [], entering = [], previous = this.state.previous.attr(), current = this.state.current.attr(), staying = _array2.default.intersect(previous, current);
            leaving = previous.filter(function (item) {
                return staying.indexOf(item) == -1;
            });
            entering = current.filter(function (item) {
                return staying.indexOf(item) == -1;
            });
            for (var i in leaving) {
                this.element.removeClass(leaving[i]);
                var previousStateListener = this['state' + can.capitalize(leaving[i])];
                if (previousStateListener) {
                    previousStateListener.call(this, false);
                }
            }
            for (var i in entering) {
                this.element.addClass(entering[i]);
                var newStateListener = this['state' + can.capitalize(entering[i])];
                if (newStateListener) {
                    newStateListener.call(this, true);
                }
            }
        },
        setState: function setState(statesName) {
            this.state.setState(statesName);
            this._goNextStates();
            return this;
        },
        setViewData: function setViewData(name, value) {
            if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) == 'object') {
                var data = name;
                for (var i in data) {
                    this.setViewData(i, data[i]);
                }
            } else {
                this.options.viewData[name] = value;
            }
            return this;
        },
        getViewData: function getViewData(name) {
            if (typeof name == 'undefined') {
                return this.options.viewData;
            }
            return this.options.viewData[name];
        },
        refresh: function refresh() {
            if (this.element == null) {
                console.warn('Try to refresh a component which doesn\'t have a DOM element.');
                return;
            }
            this.element.empty();
            if (this.options.template && this.options.template != null) {
                this.beforeRender();
                var render = this.view.render();
                render = this.afterRender(render);
                this.view.insertInDom(render);
            }
            this.afterStart();
            this.setState(this.options.state);
            return this;
        },
        start: function start() {
            this.setState('loading');
            this.beforeStart();
            this.initView();
            if (this.options.template) {
                this.beforeRender();
                var render = this.view.render();
                render = this.afterRender(render);
                this.view.insertInDom(render);
            }
            this.afterStart();
            this.setState(this.options.state);
            return this;
        },
        initView: function initView() {
            this.view = new this.options.viewClass(this.element, {
                template: this.options.template,
                cssClasses: this.options.cssClasses,
                controller: this
            });
            this.setViewData('controller', this);
            this.setViewData('icon', this.options.icon);
            this.setViewData('label', this.options.label);
            this.setViewData('view', this.view);
        },
        beforeStart: function beforeStart() {
        },
        afterStart: function afterStart() {
        },
        beforeRender: function beforeRender() {
            this.setViewData('control', this);
        },
        afterRender: function afterRender(render) {
            return render;
        },
        render: function render(options) {
            this.start();
        },
        closest: function closest(Control) {
            var classCssSelector = '.' + Control._fullName, data = this.element.closest(classCssSelector).data();
            for (var i in data.controls) {
                if (data.controls[i].getClass().fullName == Control.fullName) {
                    return data.controls[i];
                }
            }
            ;
            return null;
        },
        stateLoading: function stateLoading(go) {
            if (this.view) {
                this.view.loading(go);
            }
            if (go) {
                if (_bus2.default.bus) {
                    _bus2.default.trigger('passbolt_component_loading_start', [this]);
                }
            } else {
                if (_bus2.default.bus) {
                    _bus2.default.trigger('passbolt_component_loading_complete', [this]);
                }
            }
        },
        stateReady: function stateReady(go) {
        },
        stateDisabled: function stateDisabled(go) {
        },
        stateHidden: function stateHidden(go) {
            if (go) {
                this.view.hide();
            } else {
                this.view.show();
            }
        }
    });
    exports.default = Component;
});
/*passbolt-mad/component/composite*/
define('passbolt-mad/component/composite', [
    'exports',
    'passbolt-mad/component/component'
], function (exports, _component) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Composite = _component2.default.extend('mad.component.Composite', { defaults: { label: 'Composite Component Controller' } }, {
        init: function init(el, options) {
            this._components = [];
            this._super(el, options);
        },
        getComponent: function getComponent(id) {
            return this._components[id];
        },
        addComponent: function addComponent(component) {
            this._components[component.getId()] = component;
            return component;
        }
    });
    exports.default = Composite;
});
/*passbolt-mad/view/template/component/free_composite/workspace.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/free_composite/workspace.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_free_composite_workspace_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="js_workspace grid_16 alpha omega">\n\t<!-----------------------------------------------------------------------------\n\tWorkspace header bar\n\t----------------------------------------------------------------------------->\n\t<div class="js_workspace_label grid_3 alpha">\n\t\t');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return label;
                }));
                ___v1ew.push('\n\t</div>\n\t\n\t<div class="js_workspace_actions_container grid_7"></div>\n\t\n\t<div class="js_workspace_view_actions_container grid_6 omega"></div>\n\t\n\t<div class="clear"></div>\n\t\n\t<!-----------------------------------------------------------------------------\n\tMain area\n\t----------------------------------------------------------------------------->\n\t\n\t<div class="js_workspace_sidebar_first grid_3 alpha">\n\t</div>\n\t\n\t<div class="js_workspace_main grid_7">\n\t</div>\n\t\n\t<div class="js_workspace_sidebar_second grid_6 omega">\n\t</div>\n\t\n\t<div class="clear"></div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/free_composite*/
define('passbolt-mad/component/free_composite', [
    'exports',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/composite',
    'passbolt-mad/view/template/component/free_composite/workspace.ejs!'
], function (exports, _component, _composite, _workspace) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _composite2 = _interopRequireDefault(_composite);
    var _workspace2 = _interopRequireDefault(_workspace);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FreeComposite = _composite2.default.extend('mad.component.FreeComposite', {
        defaults: {
            label: 'WorkspaceController',
            template: _workspace2.default
        }
    }, {
        addComponent: function addComponent(ComponentClass, componentOptions, area) {
            area = area || 'mad-container-main';
            var $area = $('.' + area, this.element);
            var component = _component2.default.create($area, 'inside_replace', ComponentClass, componentOptions);
            return this._super(component);
        }
    });
    exports.default = FreeComposite;
});
/*passbolt-mad/view/template/component/dialog/dialog.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/dialog/dialog.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_dialog_dialog_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="dialog">\n    <div class="dialog-header">\n        <h2><span class="dialog-header-title">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return label;
                }));
                ___v1ew.push('</span> <span class="dialog-header-subtitle"></span></h2>\n        <a class="dialog-close">\n            <i class="fa fa-close"></i>\n            <span class="visuallyhidden">close</span>\n        </a>\n    </div>\n    <div class="js_dialog_content dialog-content">\n    </div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/dialog*/
define('passbolt-mad/component/dialog', [
    'exports',
    'passbolt-mad/view/component/dialog',
    'passbolt-mad/component/free_composite',
    'passbolt-mad/helper/html',
    'passbolt-mad/view/template/component/dialog/dialog.ejs!'
], function (exports, _dialog, _free_composite, _html, _dialog3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dialog2 = _interopRequireDefault(_dialog);
    var _free_composite2 = _interopRequireDefault(_free_composite);
    var _html2 = _interopRequireDefault(_html);
    var _dialog4 = _interopRequireDefault(_dialog3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Dialog = _free_composite2.default.extend('mad.component.Dialog', {
        defaults: {
            label: 'Dialog Controller',
            viewClass: _dialog2.default,
            template: _dialog4.default,
            cssClasses: ['dialog-wrapper'],
            tag: 'div'
        },
        closeLatest: function closeLatest() {
            $('.dialog-wrapper:last').remove();
        }
    }, {
        init: function init(el, options) {
            var refElt = mad.config.rootElement, position = 'first';
            var $existingDialog = $('.dialog-wrapper:last');
            if ($existingDialog.length) {
                refElt = $existingDialog;
                position = 'after';
            }
            var $el = _html2.default.create(refElt, position, '<div/>');
            this.setup($el, options);
            this._super($el, options);
        },
        add: function add(Class, options) {
            if (typeof options == 'undefined' || options == null) {
                options = {};
            }
            var component = this.addComponent(Class, options, 'js_dialog_content');
            component.start();
            return component;
        },
        setTitle: function setTitle(title) {
            this.view.setTitle(title);
        },
        setSubtitle: function setSubtitle(subtitle) {
            this.view.setSubtitle(subtitle);
        }
    });
    exports.default = Dialog;
});
/*app/view/template/component/session/session_expired.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/session/session_expired.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_session_session_expired_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content">\n    <p>\n        ');
                ___v1ew.push(can.view.txt(1, 'p', 0, this, function () {
                    return __('Your session has expired, you will be automatically redirected to the login page.');
                }));
                ___v1ew.push('\n    </p>\n</div>\n<div class="submit-wrapper clearfix">\n    <input id="confirm-button" type="submit" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('OK');
                }));
                ___v1ew.push('" class="button primary"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/session/session_expired*/
define('app/component/session/session_expired', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/config/config',
    'app/view/template/component/session/session_expired.ejs!'
], function (exports, _component, _config, _session_expired) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _config2 = _interopRequireDefault(_config);
    var _session_expired2 = _interopRequireDefault(_session_expired);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SessionExpiredComponent = _component2.default.extend('passbolt.component.session.SessionExpired', {
        defaults: {
            label: 'Session Expired Controller',
            template: _session_expired2.default,
            timeToRedirect: 5000,
            countDownInterval: null
        }
    }, {
        afterStart: function afterStart() {
            var self = this, initialTime = new Date().getTime();
            this.options.countDownInterval = setInterval(function () {
                var elapsedTime = new Date().getTime() - initialTime;
                if (elapsedTime > self.options.timeToRedirect) {
                    clearInterval(self.options.countDownInterval);
                    location.href = _config2.default.read('app.url');
                }
            }, 1000);
        },
        destroy: function destroy() {
            if (this.options.countDownInterval != null) {
                clearInterval(this.options.countDownInterval);
            }
        },
        ' .submit-wrapper input click': function submitWrapperInputClick(el, ev) {
            clearInterval(this.options.countDownInterval);
            location.href = _config2.default.read('app.url');
        }
    });
    exports.default = SessionExpiredComponent;
});
/*app/net/response_handler*/
define('app/net/response_handler', [
    'exports',
    'passbolt-mad/component/dialog',
    'passbolt-mad/control/bus',
    'passbolt-mad/net/response_handler',
    'app/component/session/session_expired'
], function (exports, _dialog, _bus, _response_handler, _session_expired) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dialog2 = _interopRequireDefault(_dialog);
    var _bus2 = _interopRequireDefault(_bus);
    var _response_handler2 = _interopRequireDefault(_response_handler);
    var _session_expired2 = _interopRequireDefault(_session_expired);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ResponseHandler = _response_handler2.default.extend('passbolt.net.ResponseHandler', {}, {
        '_success': function _success() {
            if (_bus2.default.bus && (this.request.silentNotify == undefined || !this.request.silentNotify)) {
                _bus2.default.trigger('passbolt_notify', {
                    title: this.response.header.title,
                    status: this.response.header.status,
                    data: this.response
                });
            }
            this._super();
        },
        '_error': function _error() {
            if (_bus2.default.bus && (this.request.silentNotify == undefined || !this.request.silentNotify)) {
                _bus2.default.trigger('passbolt_notify', {
                    title: this.response.header.title,
                    status: this.response.header.status,
                    data: this.response
                });
            }
            if (this.response.getStatus() == mad.net.Response.STATUS_ERROR && this.response.getCode() == 403) {
                if ($('.session-expired-dialog').length > 0) {
                    return;
                }
                var dialog = new _dialog2.default(null, {
                    label: __('Session expired'),
                    cssClasses: [
                        'session-expired-dialog',
                        'dialog-wrapper'
                    ]
                }).start();
                dialog.add(_session_expired2.default, {});
            } else {
                this.response.attr('header').title = this.response.getMessage();
            }
            this._super();
        }
    });
    exports.default = ResponseHandler;
});
/*passbolt-mad/net/ajax*/
define('passbolt-mad/net/ajax', [
    'exports',
    'can/construct/construct',
    'passbolt-mad/config/config',
    'passbolt-mad/control/bus',
    'passbolt-mad/net/response',
    'passbolt-mad/net/response_handler'
], function (exports, _construct, _config, _bus, _response, _response_handler) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _construct2 = _interopRequireDefault(_construct);
    var _config2 = _interopRequireDefault(_config);
    var _bus2 = _interopRequireDefault(_bus);
    var _response2 = _interopRequireDefault(_response);
    var _response_handler2 = _interopRequireDefault(_response_handler);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var Ajax = can.Construct.extend('mad.net.Ajax', {
        defaults: { defaultResponseHandlerClass: 'mad.net.ResponseHandler' },
        _getResponseHandlerClass: function _getResponseHandlerClass() {
            var ResponseHandlerClass = this.defaults.defaultResponseHandlerClass;
            var configHandler = _config2.default.read('net.ResponseHandlerClassName');
            if (configHandler !== undefined) {
                ResponseHandlerClass = configHandler;
            }
            return ResponseHandlerClass;
        },
        request: function request(_request) {
            _request.originParams = $.extend({}, _request.params);
            _request.url = can.sub(_request.url, _request.params, true);
            _request.dataType = _request.dataType || 'json';
            _request.data = _request.params;
            _request.type = _request.type ? _request.type.toUpperCase() : 'GET';
            if (typeof _request.silentLoading == 'undefined') {
                _request.silentLoading = true;
                if (_request.type == 'POST' || _request.type == 'DELETE' || _request.type == 'PUT') {
                    _request.silentLoading = false;
                }
            }
            if (typeof mad.bus != 'undefined') {
                _bus2.default.trigger('mad_ajax_request_start', _request);
            }
            var returnValue = can.ajax(_request).pipe(function (data, textStatus, jqXHR) {
                var response = new _response2.default(data), deferred = null;
                if (response.getStatus() == _response2.default.STATUS_ERROR) {
                    deferred = $.Deferred();
                    deferred.rejectWith(this, [
                        jqXHR,
                        'error',
                        response
                    ]);
                    return deferred;
                }
                deferred = $.Deferred();
                deferred.resolveWith(this, [
                    data.body,
                    response,
                    _request
                ]);
                return deferred;
            }, function (jqXHR, textStatus, data) {
                var jsonData = null;
                var response = null;
                try {
                    if (_typeof(jqXHR.responseText) != undefined) {
                        jsonData = $.parseJSON(jqXHR.responseText);
                    }
                } catch (e) {
                }
                if (_response2.default.isResponse(jsonData)) {
                    response = new _response2.default(jsonData);
                } else {
                    response = _response2.default.getResponse('unreachable');
                }
                var deferred = $.Deferred();
                deferred.rejectWith(this, [
                    jqXHR,
                    response.getStatus(),
                    response,
                    _request
                ]);
                return deferred;
            });
            var self = this;
            returnValue.then(function (data, response, request) {
                if (typeof mad.bus != 'undefined') {
                    _bus2.default.trigger('mad_ajax_request_complete', request);
                }
                var ResponseHandlerClass = self._getResponseHandlerClass();
                var ResponseHandlerClass = can.getObject(ResponseHandlerClass);
                var responseHandler = new ResponseHandlerClass(response, request);
                responseHandler.handle();
            });
            returnValue.fail(function (jqXHR, textStatus, response) {
                if (typeof mad.bus != 'undefined') {
                    _bus2.default.trigger('mad_ajax_request_complete', _request);
                }
                var ResponseHandlerClass = self._getResponseHandlerClass();
                var ResponseHandlerClass = can.getObject(ResponseHandlerClass);
                var responseHandler = new ResponseHandlerClass(response, _request);
                responseHandler.handle();
            });
            return returnValue;
        }
    }, {});
    exports.default = Ajax;
});
/*passbolt-mad/view/component/tree*/
define('passbolt-mad/view/component/tree', [
    'exports',
    'passbolt-mad/view/view',
    'passbolt-mad/helper/html'
], function (exports, _view, _html) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    var _html2 = _interopRequireDefault(_html);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Tree = _view2.default.extend('mad.view.component.Tree', {}, {
        getItemElement: function getItemElement(item) {
            var control = this.getController();
            return $('#' + control.options.prefixItemId + item.id, this.element);
        },
        insertItem: function insertItem(item, refItem, position) {
            position = position || 'last';
            var self = this, $item = null, $refElement = null, itemRender = '', control = this.getController();
            var mappedItem = control.getMap().mapObject(item);
            if (control.options.prefixItemId != '' && control.options.prefixItemId != undefined) {
                mappedItem.id = control.options.prefixItemId + mappedItem.id;
            }
            control.setViewData('mappedItem', mappedItem);
            var hasChildren = mappedItem.children && mappedItem.children.length ? true : false;
            control.setViewData('hasChildren', hasChildren);
            var cssClasses = [];
            if (typeof mappedItem['cssClasses'] != 'undefined') {
                cssClasses = cssClasses.concat(mappedItem['cssClasses']);
            }
            control.setViewData('cssClasses', cssClasses);
            if (refItem !== undefined && refItem !== null) {
                $refElement = this.getItemElement(refItem);
                if (!$refElement.length) {
                    throw new mad.Exception.get('No HTMLElement found for the given item (%0).', [refItem.id]);
                }
                switch (position) {
                case 'first':
                case 'last':
                case 'inside':
                    var $refList = $refElement.find('ul:first');
                    if (!$refList.length) {
                        $refElement = $('<ul></ul>').appendTo($refElement);
                    } else {
                        $refElement = $refList;
                    }
                    break;
                case 'before':
                case 'after':
                    $refElement = $refElement;
                    break;
                }
            } else {
                $refElement = this.element;
            }
            itemRender = _view2.default.render(control.options.itemTemplate, control.getViewData());
            $item = _html2.default.create($refElement, position, itemRender);
            can.data($item, control.getItemClass().fullName, item);
            return $item;
        },
        removeItem: function removeItem(item) {
            this.getItemElement(item).remove();
        },
        refreshItem: function refreshItem(item) {
            var self = this, $item = this.getItemElement(item), control = this.getController();
            var mappedItem = control.getMap().mapObject(item);
            mappedItem.id = control.options.prefixItemId + mappedItem.id;
            control.setViewData('mappedItem', mappedItem);
            var hasChildren = mappedItem.children && mappedItem.children.length ? true : false;
            control.setViewData('hasChildren', hasChildren);
            var cssClasses = [];
            if (typeof mappedItem['cssClasses'] != 'undefined') {
                cssClasses = cssClasses.concat(mappedItem['cssClasses']);
            }
            control.setViewData('cssClasses', cssClasses);
            var itemRender = _view2.default.render(control.options.itemTemplate, control.getViewData());
            $item.replaceWith(itemRender);
            $item = this.getItemElement(item);
            can.data($item, control.getItemClass().fullName, item);
            if (hasChildren) {
                can.each(item.children, function (item, i) {
                    self.insertItem(item, mappedItem.id, 'last');
                });
            }
            return $item;
        },
        reset: function reset() {
            $('li', this.element).remove();
        },
        selectItem: function selectItem(item) {
            this.unselectAll();
            var $item = this.getItemElement(item);
            $('.row:first', $item).addClass('selected');
        },
        unselectItem: function unselectItem(item) {
            var $item = this.getItemElement(item);
            $item.removeClass('selected');
        },
        unselectAll: function unselectAll() {
            $('.row.selected', this.element).removeClass('selected');
        },
        rightSelectItem: function rightSelectItem(item) {
        },
        hoverItem: function hoverItem(item, element, srcEvent) {
        },
        'li .main-cell a click': function liMainCellAClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null, li = el.parents('li:first'), itemClass = this.getController().getItemClass();
            if (itemClass) {
                data = li.data(itemClass.fullName);
            } else {
                data = li[0].id;
            }
            this.element.trigger('item_selected', [
                data,
                ev
            ]);
            return false;
        },
        'li a contextmenu': function liAContextmenu(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            if (ev.which == 3) {
                var data = null, li = el.parents('li:first'), itemClass = this.getController().getItemClass();
                if (itemClass) {
                    data = li.data(itemClass.fullName);
                } else {
                    data = li[0].id;
                }
                this.element.trigger('item_right_selected', [
                    data,
                    ev
                ]);
            }
            return false;
        },
        'li a hover': function liAHover(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null, li = el.parents('li:first'), itemClass = this.getController().getItemClass();
            if (itemClass) {
                data = li.data(itemClass.fullName);
            } else {
                data = li[0].id;
            }
            this.element.trigger('item_hovered', [
                data,
                ev
            ]);
            return false;
        }
    });
    exports.default = Tree;
});
/*passbolt-mad/view/component/dropdown_menu*/
define('passbolt-mad/view/component/dropdown_menu', [
    'exports',
    'passbolt-mad/view/component/tree'
], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var DropdownMenu = mad.view.component.DropdownMenu = mad.view.component.Tree.extend('mad.view.component.DropdownMenu', {}, {
        open: function open(item) {
            var li = $('#' + item.id, this.element);
            li.removeClass('closed').addClass('opened');
            var control = $('.control:first', li);
            control.removeClass('open').addClass('close');
        },
        close: function close(item) {
            var li = $('#' + item.id, this.element);
            li.removeClass('opened').addClass('closed');
            var control = $('.control:first', li);
            control.removeClass('close').addClass('open');
        },
        'li mouseover': function liMouseover(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null;
            if (this.getController().getItemClass()) {
                data = el.data(this.getController().getItemClass().fullName);
            } else {
                data = el[0].id;
            }
            this.element.trigger('item_opened', data);
        },
        'li mouseleave': function liMouseleave(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null;
            if (this.getController().getItemClass()) {
                data = el.data(this.getController().getItemClass().fullName);
            } else {
                data = el[0].id;
            }
            this.element.trigger('item_closed', data);
        }
    });
    exports.default = DropdownMenu;
});
/*passbolt-mad/view/component/contextual_menu*/
define('passbolt-mad/view/component/contextual_menu', [
    'exports',
    'passbolt-mad/view/component/dropdown_menu'
], function (exports, _dropdown_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dropdown_menu2 = _interopRequireDefault(_dropdown_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ContextualMenu = _dropdown_menu2.default.extend('mad.view.component.ContextualMenu', {}, {
        '{document} click': function documentClick(el, ev) {
            if (!this.element.is(el) && !$(this.getController().options.source).is(ev.target)) {
                this.element.remove();
            }
        },
        ' contextmenu': function contextmenu(el, ev) {
            ev.preventDefault();
        }
    });
    exports.default = ContextualMenu;
});
/*passbolt-mad/model/action*/
define('passbolt-mad/model/action', [
    'exports',
    'passbolt-mad/model/model',
    'passbolt-mad/model/state'
], function (exports, _model, _state) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    var _state2 = _interopRequireDefault(_state);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Action = _model2.default.extend('mad.model.Action', {
        attributes: {
            id: 'string',
            label: 'string',
            name: 'string',
            icon: 'string',
            action: 'function',
            cssClasses: 'array',
            initial_state: 'string',
            state: mad.model.State.model,
            active: 'boolean'
        }
    }, {
        init: function init() {
            if (typeof this.initial_state == 'undefined') {
                this.initial_state = 'ready';
            }
            this.state = new mad.model.State();
            this.state.setState(this.initial_state);
            if (typeof this.cssClasses == 'undefined' || this.cssClasses == null) {
                this.cssClasses = [];
            }
        },
        execute: function execute(data) {
            if (this.action) {
                this.action(data);
            }
        }
    });
    exports.default = Action;
});
/*passbolt-mad/util/map/map*/
define('passbolt-mad/util/map/map', [
    'exports',
    'passbolt-mad/util/util'
], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var MadMap = can.Construct.extend('mad.Map', {
        mapObject: function mapObject(object, map) {
            console.warn('Please call the function mapObject directly on the map object.');
            return map.mapObject(object);
        },
        mapObjects: function mapObjects(arr, map) {
            console.warn('Please call the function mapObject directly on the map object.');
            return map.mapObjects(arr);
        }
    }, {
        map: {},
        init: function init(map) {
            this.map = map;
        },
        _getObjFieldPointer: function _getObjFieldPointer(object, key) {
            var returnValue = object, split = key.split('.');
            for (var i = 0; i < split.length; i++) {
                if (returnValue[split[i]] === undefined) {
                    return null;
                }
                returnValue = returnValue[split[i]];
            }
            return returnValue;
        },
        getModelTargetFieldsNames: function getModelTargetFieldsNames() {
            var returnValue = [];
            for (var key in this.map) {
                if (typeof this.map[key] == 'string') {
                    returnValue.push(this.map[key]);
                }
            }
            return returnValue;
        },
        mapObject: function mapObject(object) {
            var returnValue = {};
            for (var key in this.map) {
                var mapKeyElts = key.split('.'), current = returnValue, position = 0;
                for (var i in mapKeyElts) {
                    var mapKeyElt = mapKeyElts[i];
                    if (position == mapKeyElts.length - 1) {
                        if (_typeof(this.map[key]) == 'object') {
                            var func = this.map[key].func;
                            var keyToMap = this.map[key].key;
                            var objectFieldToMap = this._getObjFieldPointer(object, keyToMap);
                            if (objectFieldToMap != null) {
                                current[mapKeyElt] = func(objectFieldToMap, this, object, returnValue);
                            }
                        } else {
                            var objectFieldToMap = this._getObjFieldPointer(object, this.map[key]);
                            if (objectFieldToMap != null) {
                                current[mapKeyElt] = objectFieldToMap;
                            }
                        }
                    } else {
                        if (typeof current[mapKeyElt] == 'undefined')
                            current[mapKeyElt] = [];
                        current = current[mapKeyElt];
                    }
                    position++;
                }
            }
            return returnValue;
        },
        mapObjects: function mapObjects(data) {
            var self = this;
            var returnValue = [];
            can.each(data, function (elt, i) {
                returnValue[i] = self.mapObject(data[i]);
            });
            return returnValue;
        }
    });
    exports.default = MadMap;
});
/*passbolt-mad/view/template/component/tree/treeItem.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/tree/treeItem.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_tree_treeItem_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" class="');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="row">\n\t\t<div class="main-cell-wrapper">\n\t\t\t<div class="main-cell">\n\t\t\t\t<a><span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n');
                ___v1ew.push(can.view.txt(0, 'li', 0, this, function () {
                    var ___v1ew = [];
                    if (hasChildren) {
                        ___v1ew.push('\n\t<ul>\n\t</ul>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/tree*/
define('passbolt-mad/component/tree', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/util/map/map',
    'passbolt-mad/model/model',
    'passbolt-mad/view/component/tree',
    'passbolt-mad/view/template/component/tree/treeItem.ejs!'
], function (exports, _component, _map, _model, _tree, _treeItem) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _map2 = _interopRequireDefault(_map);
    var _model2 = _interopRequireDefault(_model);
    var _tree2 = _interopRequireDefault(_tree);
    var _treeItem2 = _interopRequireDefault(_treeItem);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var Tree = _component2.default.extend('mad.component.Tree', {
        defaults: {
            label: 'Tree Component',
            cssClasses: ['tree'],
            tag: 'ul',
            viewClass: _tree2.default,
            itemTemplate: _treeItem2.default,
            itemClass: _model2.default,
            items: new can.Model.List(),
            map: null,
            prefixItemId: '',
            callbacks: {
                item_selected: null,
                item_right_selected: null,
                item_hovered: null
            }
        }
    }, {
        init: function init(el, options) {
            options.items = new options.itemClass.List();
            if (options.map == null) {
                options.map = this._getDefaultMap();
            }
            this._super(el, options);
        },
        _getDefaultMap: function _getDefaultMap() {
            return new _map2.default({
                id: 'id',
                label: {
                    key: 'id',
                    func: function func(value, map, rowObject) {
                        var fields = [
                            'label',
                            'title',
                            'name',
                            'id'
                        ];
                        for (var i in fields) {
                            if (typeof rowObject[fields[i]] != 'undefined') {
                                return rowObject[fields[i]];
                            }
                        }
                        return null;
                    }
                },
                children: {
                    key: 'children',
                    func: _map2.default.mapObjects
                }
            });
        },
        insertItem: function insertItem(item, refItem, position) {
            var self = this;
            if (this.getItemClass() == null) {
                throw mad.Exception.get('The associated itemClass can not be null');
            }
            if (!(item instanceof this.getItemClass())) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'item');
            }
            this.options.items.push(item);
            this.view.insertItem(item, refItem, position);
            if (_typeof(this.options.map.map.children) != undefined && this.options.map.map.children != null) {
                var children = this.options.map._getObjFieldPointer(item, this.options.map.map.children.key);
                if ((typeof children === 'undefined' ? 'undefined' : _typeof(children)) != undefined && children != null && children.length > 0) {
                    can.each(children, function (childItem, i) {
                        self.insertItem(childItem, item, 'last');
                    });
                }
            }
        },
        removeItem: function removeItem(item) {
            var position = this.options.items.indexOf(item);
            if (position != -1) {
                this.options.items.splice(position, 1);
                this.view.removeItem(item);
            }
        },
        refreshItem: function refreshItem(item) {
            if (this.getItemClass() == null) {
                throw new mad.Exception('The associated itemClass can not be null');
            }
            if (!(item instanceof this.getItemClass())) {
                throw new mad.error.WrongParameter('item', this.getItemClass().fullName);
            }
            this.view.refreshItem(item);
        },
        reset: function reset() {
            this.options.items.splice(0);
            this.view.reset();
        },
        load: function load(items) {
            if ((typeof items === 'undefined' ? 'undefined' : _typeof(items)) == undefined || items == null) {
                return;
            } else if (items instanceof can.Model.List) {
                var itemsList = items;
                items = [];
                itemsList.each(function (item) {
                    items.push(item);
                });
            }
            for (var i in items) {
                this.insertItem(items[i]);
            }
        },
        getItemClass: function getItemClass() {
            return this.options.itemClass;
        },
        setItemClass: function setItemClass(itemClass) {
            this.options.itemClass = itemClass;
        },
        getMap: function getMap() {
            return this.options.map;
        },
        setMap: function setMap(map) {
            this.options.map = map;
        },
        selectItem: function selectItem(item) {
            this.view.selectItem(item);
        },
        rightSelectItem: function rightSelectItem(item) {
            this.view.rightSelectItem(item);
        },
        unselectItem: function unselectItem(item) {
            this.view.unselectAll();
        },
        hoverItem: function hoverItem(item) {
            this.view.hoverItem(item);
        },
        unselectAll: function unselectAll() {
            this.view.unselectAll();
        },
        ' item_selected': function item_selected(el, ev, item, srcEv) {
            this.selectItem(item);
            if (this.options.callbacks.itemSelected) {
                this.options.callbacks.itemSelected(el, ev, item, srcEv);
            }
        },
        ' item_right_selected': function item_right_selected(el, ev, item, srcEv) {
            this.rightSelectItem(item);
            if (this.options.callbacks.itemRightSelected) {
                this.options.callbacks.itemRightSelected(el, ev, item, srcEv);
            }
        },
        ' item_hovered': function item_hovered(el, ev, item, srcEv) {
            this.hoverItem(item);
            if (this.options.callbacks.itemHovered) {
                this.options.callbacks.itemHovered(el, ev, item, srcEv);
            }
        }
    });
    exports.default = Tree;
});
/*passbolt-mad/view/template/component/menu/menu_item.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/menu/menu_item.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_menu_menu_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="row">\n\t\t<div class="main-cell-wrapper">\n\t\t\t<div class="main-cell">\n\t\t\t\t<a><span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n');
                ___v1ew.push(can.view.txt(0, 'li', 0, this, function () {
                    var ___v1ew = [];
                    if (hasChildren) {
                        ___v1ew.push('\n\t<ul>\n\t</ul>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/menu*/
define('passbolt-mad/component/menu', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/component/tree',
    'passbolt-mad/view/template/component/menu/menu_item.ejs!'
], function (exports, _action, _map, _tree, _tree3, _menu_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _tree4 = _interopRequireDefault(_tree3);
    var _menu_item2 = _interopRequireDefault(_menu_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Menu = _tree2.default.extend('mad.component.Menu', {
        defaults: {
            label: 'Menu',
            cssClasses: ['menu'],
            viewClass: _tree4.default,
            itemTemplate: _menu_item2.default,
            itemClass: _action2.default,
            map: new _map2.default({
                id: 'id',
                label: 'label',
                cssClasses: {
                    key: 'cssClasses',
                    func: function func(value, map, item, mappedValues) {
                        var mappedValue = $.merge([], value);
                        if (typeof item.state != 'undefined') {
                            mappedValue = $.merge(mappedValue, item.state.current);
                        }
                        return mappedValue.join(' ');
                    }
                },
                children: {
                    key: 'children',
                    func: _map2.default.mapObjects
                }
            })
        }
    }, {
        setItemState: function setItemState(id, stateName) {
            for (var i in this.options.items) {
                if (this.options.items[i].id == id) {
                    this.options.items[i].state.setState(stateName);
                    this.refreshItem(this.options.items[i]);
                    return;
                }
            }
            throw mad.Exception.get('The item [%0] is not an item of the menu', [id]);
        },
        ' item_selected': function item_selected(el, ev, item) {
            this._super(el, ev, item);
            if (!item.state.is('disabled')) {
                item.execute(this);
            }
        }
    });
    exports.default = Menu;
});
/*passbolt-mad/view/template/component/dropdown_menu/dropdown_menu.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/dropdown_menu/dropdown_menu.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_dropdown_menu_dropdown_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="row">\n\t\t<div class="main-cell-wrapper">\n\t\t\t<div class="main-cell">\n\t\t\t\t<a><span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n');
                ___v1ew.push(can.view.txt(0, 'li', 0, this, function () {
                    var ___v1ew = [];
                    if (hasChildren) {
                        ___v1ew.push('\n\t<ul>\n\t</ul>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/dropdown_menu*/
define('passbolt-mad/component/dropdown_menu', [
    'exports',
    'passbolt-mad/component/menu',
    'passbolt-mad/view/component/dropdown_menu',
    'passbolt-mad/view/template/component/dropdown_menu/dropdown_menu.ejs!'
], function (exports, _menu, _dropdown_menu, _dropdown_menu3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _menu2 = _interopRequireDefault(_menu);
    var _dropdown_menu2 = _interopRequireDefault(_dropdown_menu);
    var _dropdown_menu4 = _interopRequireDefault(_dropdown_menu3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DropdownMenu = _menu2.default.extend('mad.component.DropdownMenu', {
        defaults: {
            label: 'Drop Down Menu Component',
            viewClass: _dropdown_menu2.default,
            itemTemplate: _dropdown_menu4.default,
            cssClasses: ['dropdownmenu'],
            callbacks: {
                item_selected: null,
                item_right_selected: null,
                item_hovered: null
            }
        }
    }, {
        open: function open(item) {
            this.view.open(item);
        },
        close: function close(item) {
            this.view.close(item);
        },
        ' item_opened': function item_opened(el, ev, item) {
            this.open(item);
        },
        ' item_closed': function item_closed(el, ev, item) {
            this.close(item);
        }
    });
    exports.default = DropdownMenu;
});
/*passbolt-mad/component/contextual_menu*/
define('passbolt-mad/component/contextual_menu', [
    'exports',
    'passbolt-mad/view/component/contextual_menu',
    'passbolt-mad/component/dropdown_menu',
    'passbolt-mad/helper/html'
], function (exports, _contextual_menu, _dropdown_menu, _html) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _dropdown_menu2 = _interopRequireDefault(_dropdown_menu);
    var _html2 = _interopRequireDefault(_html);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ContextualMenu = _dropdown_menu2.default.extend('mad.component.ContextualMenu', {
        defaults: {
            viewClass: _contextual_menu2.default,
            cssClasses: ['contextual-menu'],
            source: null,
            coordinates: {
                x: null,
                y: null
            }
        },
        remove: function remove() {
            $('#js_contextual_menu', $(mad.config.rootElement)).remove();
        }
    }, {
        init: function init(el, options) {
            if (el == null || !el.length) {
                if ($('#js_contextual_menu').length != 0) {
                    $('#js_contextual_menu').remove();
                }
                var $el = _html2.default.create(mad.config.rootElement, 'first', '<ul id="js_contextual_menu" />');
                this.setup($el);
            }
            this._super($el, options);
        },
        afterStart: function afterStart() {
            this._super();
            this.view.position({ 'coordinates': this.options.coordinates });
        },
        destroy: function destroy() {
            this._super();
            mad.component.ContextualMenu.remove();
        }
    });
    exports.default = ContextualMenu;
});
/*app/model/filter*/
define('app/model/filter', [
    'exports',
    'passbolt-mad/model/model'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Filter = _model2.default.extend('passbolt.model.Filter', {
        attributes: {
            id: 'string',
            label: 'string',
            rules: 'object',
            order: 'array'
        }
    }, {
        init: function init() {
            if (!this.id) {
                this.attr('id', uuid());
            }
            if (!this.rules) {
                this.rules = new can.Map();
            }
            if (!this.order) {
                this.order = new can.Map();
            } else if (typeof this.order.attr() === 'string') {
                this.order = new can.Map(this.order.attr());
            }
        },
        getOrders: function getOrders() {
            if (this.order) {
                return this.order.attr();
            }
            return [];
        },
        getRule: function getRule(name) {
            return this.rules.attr(name);
        },
        setRule: function setRule(name, value) {
            this.rules.attr(name, value);
        },
        getRules: function getRules(excludedRules) {
            var rules = this.rules ? this.rules.serialize() : {};
            if (excludedRules && excludedRules.length) {
                for (var i in excludedRules) {
                    if (typeof rules[excludedRules[i]] != 'undefined') {
                        delete rules[excludedRules[i]];
                    }
                }
            }
            return rules;
        }
    });
    exports.default = Filter;
});
/*app/view/component/navigation/filter*/
define('app/view/component/navigation/filter', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FilterView = _view2.default.extend('passbolt.view.component.navigation.Filter', {}, {
        'form submit': function formSubmit(el, ev) {
            this.element.trigger('update');
        }
    });
    exports.default = FilterView;
});
/*passbolt-mad/model/attribute*/
define('passbolt-mad/model/attribute', [
    'exports',
    'passbolt-mad/model/model'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Attribute = _model2.default.extend('mad.model.Attribute', {
        attributes: {
            name: 'string',
            type: 'string',
            modelReference: 'object',
            multiple: 'boolean'
        },
        getModelAttributeValue: function getModelAttributeValue(modelRef, instance) {
            var returnValue = [], attributes = Attribute.getModelAttributes(modelRef), pointer = instance;
            for (var i = 1; i < attributes.length; i++) {
                if (attributes[i - 1].isMultiple()) {
                    returnValue = [];
                    pointer.each(function (subInstance) {
                        returnValue.push(subInstance[attributes[i].getName()]);
                    });
                } else {
                    pointer = can.getObject(attributes[i].getName(), pointer);
                    returnValue = pointer;
                }
            }
            return returnValue;
        },
        getModelAttributes: function getModelAttributes(str) {
            var returnValue = [];
            var matches = str.match(/[\.]?[A-Z][^.]*/), modelName = str.substr(0, matches.index + matches[0].length), subAttributesStr = str.substr(modelName.length + 1), model = can.getObject(modelName);
            returnValue.push(new Attribute({
                name: modelName,
                multiple: false,
                modelReference: model
            }));
            var subsplit = subAttributesStr.split('.');
            for (var i in subsplit) {
                var attributeType = model.attributes[subsplit[i]], name = '', multiple = false;
                if (/models?$/.test(attributeType)) {
                    var matches = attributeType.match(/(.*)\.models?$/);
                    name = subsplit[i];
                    model = can.getObject(matches[1]);
                    multiple = /models$/.test(attributeType);
                } else {
                    name = subsplit[i];
                    model = undefined;
                }
                returnValue.push(new Attribute({
                    name: name,
                    multiple: multiple,
                    modelReference: model
                }));
            }
            return returnValue;
        }
    }, {
        getModelReference: function getModelReference() {
            return this.modelReference;
        },
        getName: function getName() {
            return this.name;
        },
        isMultiple: function isMultiple() {
            return this.multiple;
        }
    });
    exports.default = Attribute;
});
/*passbolt-mad/view/form/element*/
define('passbolt-mad/view/form/element', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Element = _view2.default.extend('mad.view.form.Element', {}, {
        getName: function getName() {
            return this.element.attr('name');
        },
        setValue: function setValue(value) {
        },
        reset: function reset() {
        }
    });
    exports.default = Element;
});
/*passbolt-mad/form/element*/
define('passbolt-mad/form/element', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/view/form/element'
], function (exports, _component, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Element = _component2.default.extend('mad.form.Element', {
        defaults: {
            label: 'Form Element Component',
            cssClasses: ['form-element'],
            tag: null,
            viewClass: _element2.default,
            modelReference: null,
            validate: true,
            validateFunction: null,
            defaultValue: null,
            value: null,
            callbacks: {
                changed: function changed(el, ev, value) {
                }
            }
        }
    }, {
        init: function init(el, options) {
            this.defaultValue = options.value;
            this.value = options.value;
            this._super(el, options);
        },
        getModelReference: function getModelReference() {
            return this.options.modelReference;
        },
        getValidateFunction: function getValidateFunction() {
            return this.options.validateFunction;
        },
        requireValidation: function requireValidation() {
            return this.options.validate;
        },
        setModelReference: function setModelReference(modelReference) {
            this.options.modelReference = modelReference;
        },
        getValue: function getValue() {
            return this.value;
        },
        reset: function reset() {
            this.setState('reset');
            this.setValue(this.options.value);
            this.setState('ready');
        },
        setValue: function setValue(value) {
            this.value = value;
            this.view.setValue(this.value);
            return this;
        },
        afterStart: function afterStart() {
            this.setValue(this.options.value);
        },
        stateReset: function stateReset(go) {
            this.setState('ready');
        },
        stateReady: function stateReady(go) {
        },
        stateError: function stateError(go) {
        },
        stateDisabled: function stateDisabled(go) {
            if (go) {
                this.element.attr('disabled', 'disabled').addClass('disabled');
            } else {
                this.element.removeAttr('disabled').removeClass('disabled');
            }
        },
        ' changed': function changed(el, ev, data) {
            this.value = data.value;
            if (this.options.callbacks.changed) {
                this.options.callbacks.changed(this.value);
            }
        }
    });
    exports.default = Element;
});
/*passbolt-mad/form/feedback*/
define('passbolt-mad/form/feedback', [
    'exports',
    'passbolt-mad/component/component'
], function (exports, _component) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Feedback = _component2.default.extend('mad.form.Feedback', {
        defaults: {
            label: 'Form Feedback Component',
            message: null
        }
    }, {
        setMessage: function setMessage(message) {
            this.element.text(message);
            return this;
        }
    });
    exports.default = Feedback;
});
/*passbolt-mad/view/form/form*/
define('passbolt-mad/view/form/form', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Form = _view2.default.extend('mad.view.Form', {}, {
        setElementState: function setElementState(element, state) {
            var eltId = element.getId(), $label = $('label[for="' + eltId + '"]'), $wrapper = element.element.parent('.js_form_element_wrapper');
            switch (state) {
            case 'success':
                if ($label) {
                    $label.removeClass('error');
                }
                if ($wrapper) {
                    $wrapper.removeClass('error');
                }
                break;
            case 'error':
                if ($label) {
                    $label.addClass('error');
                }
                if ($wrapper) {
                    $wrapper.addClass('error');
                }
                break;
            }
        }
    });
    exports.default = Form;
});
/*passbolt-mad/form/form*/
define('passbolt-mad/form/form', [
    'exports',
    'passbolt-mad/model/attribute',
    'passbolt-mad/component/component',
    'passbolt-mad/form/element',
    'passbolt-mad/form/feedback',
    'passbolt-mad/view/form/form',
    'passbolt-mad/model/model'
], function (exports, _attribute, _component, _element, _feedback, _form, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _attribute2 = _interopRequireDefault(_attribute);
    var _component2 = _interopRequireDefault(_component);
    var _element2 = _interopRequireDefault(_element);
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Form = _component2.default.extend('mad.Form', {
        defaults: {
            label: 'Form Component',
            cssClasses: ['form'],
            tag: 'form',
            viewClass: _form2.default,
            callbacks: {
                error: null,
                submit: null
            },
            action: null,
            validateOnChange: 'afterFirstValidation'
        }
    }, {
        init: function init(el, options) {
            this.elements = {};
            this.feedbackElements = {};
            this.data = {};
            this.validations = 0;
            this._super(el, options);
        },
        beforeRender: function beforeRender() {
            this.setViewData('action', this.options.action);
        },
        reset: function reset() {
            this.validations = 0;
            for (var eltId in this.elements) {
                var element = this.elements[eltId], feedbackElement = this.feedbackElements[element.getId()];
                element.setValue(this.options.defaultValue);
                if (feedbackElement != undefined) {
                    feedbackElement.setMessage('').setState('success');
                }
            }
        },
        load: function load(data) {
            for (var eltId in this.elements) {
                var element = this.getElement(eltId), eltModelRef = element.getModelReference(), value = null;
                if (eltModelRef != null) {
                    if (!(data instanceof _model2.default)) {
                        throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'data');
                    }
                    value = _attribute2.default.getModelAttributeValue(eltModelRef, data);
                } else {
                    value = data[eltId];
                }
                if (typeof value !== 'undefined') {
                    element.setValue(value);
                }
            }
        },
        getElement: function getElement(eltId) {
            return this.elements[eltId];
        },
        addElement: function addElement(element, feedback) {
            if (!(element instanceof mad.form.Element)) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'element');
            }
            var modelReference = element.getModelReference();
            if (modelReference != null) {
                var modelPresentInForm = false, modelAttr = _attribute2.default.getModelAttributes(modelReference), modelName = modelAttr[modelAttr.length - 2].name;
                for (var eltId in this.elements) {
                    var eltModelRef = this.elements[eltId].getModelReference();
                    if (eltModelRef != null) {
                        var eltModelAttr = _attribute2.default.getModelAttributes(eltModelRef), eltModelName = modelAttr[eltModelAttr.length - 2].name;
                        if (modelName == eltModelName) {
                            modelPresentInForm = true;
                            break;
                        }
                    }
                }
                if (!modelPresentInForm) {
                    var model = can.getObject(modelName);
                    if (model !== undefined) {
                        model.getValidationRules(this.options.action);
                    }
                }
            }
            var eltId = element.getId();
            this.elements[eltId] = element;
            if (typeof feedback != 'undefined') {
                this.feedbackElements[eltId] = feedback;
            }
            return element;
        },
        removeElement: function removeElement(element) {
            if (!(element instanceof _element2.default) || element == null) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'element');
            }
            var eltId = element.getId(), element = this.getElement(eltId);
            if (element == undefined) {
                throw mad.Exception.get(mad.error.ELEMENT_NOT_FOUND, eltId);
            }
            delete this.elements[eltId];
            delete this.feedbackElements[eltId];
        },
        getData: function getData() {
            var returnValue = {};
            for (var eltId in this.elements) {
                var element = this.getElement(eltId), eltModelRef = element.getModelReference(), eltValue = element.getValue();
                if (eltModelRef == null || eltModelRef == undefined) {
                    returnValue[eltId] = eltValue;
                } else {
                    var fieldAttrs = _attribute2.default.getModelAttributes(eltModelRef), pointer = returnValue;
                    for (var i = 0; i < fieldAttrs.length; i++) {
                        var eltSubModelRef = fieldAttrs[i].getModelReference();
                        if (eltSubModelRef == null || eltModelRef == undefined) {
                            if (fieldAttrs[i - 1].isMultiple()) {
                                if (eltValue != null) {
                                    can.each(eltValue, function (val, prop) {
                                        var obj = {};
                                        obj[fieldAttrs[i].getName()] = val;
                                        pointer.push(obj);
                                    });
                                }
                            } else {
                                pointer[fieldAttrs[i].getName()] = eltValue;
                            }
                            break;
                        } else {
                            if (pointer[fieldAttrs[i].getName()] == undefined) {
                                pointer[fieldAttrs[i].getName()] = [];
                            }
                            pointer = pointer[fieldAttrs[i].getName()];
                        }
                    }
                }
            }
            return returnValue;
        },
        showErrors: function showErrors(errors) {
            for (var i in this.elements) {
                var element = this.elements[i];
                var eltModelRef = element.getModelReference();
                if (eltModelRef) {
                    var fieldAttrs = _attribute2.default.getModelAttributes(eltModelRef), modelFullName = fieldAttrs[fieldAttrs.length - 2].name, attrName = fieldAttrs[fieldAttrs.length - 1].name, modelName = modelFullName.substr(modelFullName.lastIndexOf('.') + 1), eltId = element.getId();
                    for (var j in errors) {
                        if (errors[modelName] != undefined && errors[modelName][attrName] != undefined) {
                            var error = '';
                            for (var errorRule in errors[modelName][attrName]) {
                                error = errors[modelName][attrName][errorRule] + ' ';
                            }
                            var eltStates = ['error'];
                            if (element.state.is('hidden')) {
                                eltStates.push('hidden');
                            }
                            element.setState(eltStates);
                            if (this.feedbackElements[eltId]) {
                                this.feedbackElements[eltId].setMessage(error).setState('error');
                            }
                            this.view.setElementState(this.elements[eltId], 'error');
                        }
                    }
                }
            }
        },
        validateElement: function validateElement(element) {
            var returnValue = true, eltModelRef = element.getModelReference(), validationResult = [], eltId = element.getId();
            if (element.requireValidation()) {
                var value = element.getValue(), validateFunction = element.getValidateFunction();
                if (validateFunction != null) {
                    var validateFuncResult = validateFunction(value, {});
                    if (validateFuncResult !== true) {
                        validationResult.push(validateFuncResult);
                    }
                } else if (eltModelRef != null) {
                    var fieldAttrs = _attribute2.default.getModelAttributes(eltModelRef), model = fieldAttrs[fieldAttrs.length - 2].getModelReference(), attrName = fieldAttrs[fieldAttrs.length - 1].getName();
                    if (model.validateAttribute) {
                        validationResult = model.validateAttribute(attrName, value, {}, this.options.action);
                    }
                }
                if (validationResult.length > 0) {
                    var eltStates = ['error'];
                    if (this.elements[eltId].state.is('hidden')) {
                        eltStates.push('hidden');
                    }
                    this.elements[eltId].setState(eltStates);
                    if (this.feedbackElements[eltId]) {
                        this.feedbackElements[eltId].setMessage(validationResult[0]).setState([]).setState('error');
                    }
                    this.view.setElementState(this.elements[eltId], 'error');
                    returnValue = false;
                } else {
                    var eltStates = ['success'];
                    if (this.elements[eltId].state.is('hidden')) {
                        eltStates.push('hidden');
                    }
                    this.elements[eltId].setState(eltStates);
                    if (this.feedbackElements[eltId]) {
                        this.feedbackElements[eltId].setMessage('').setState('success');
                    }
                    this.view.setElementState(this.elements[eltId], 'success');
                }
            }
            return returnValue;
        },
        validate: function validate() {
            var returnValue = true;
            for (var i in this.elements) {
                returnValue &= this.validateElement(this.elements[i]);
            }
            this.validations++;
            return returnValue;
        },
        ' submit': function submit(el, ev) {
            ev.preventDefault();
            if (this.validate()) {
                if (this.options.callbacks.submit) {
                    this.options.callbacks.submit(this.getData());
                }
            } else {
                if (this.options.callbacks.error) {
                    this.options.callbacks.error();
                }
            }
        },
        ' changed': function changed(el, ev, data) {
            var validateOnChange = this.options.validateOnChange === true || this.options.validateOnChange === 'afterFirstValidation' && this.validations > 0;
            if (validateOnChange) {
                var formElement = this.getElement(ev.target.id);
                if (formElement) {
                    this.validateElement(formElement);
                } else {
                    throw mad.Exception.get('No form element found.');
                }
            }
        }
    });
    exports.default = Form;
});
/*app/view/template/form/user/avatar.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/form/user/avatar.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_user_avatar_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content">\n\t<div class="input text input-password-wrapper">\n\t\t<div class="input required">\n\t\t\t<label for="js_field_avatar">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Avatar');
                }));
                ___v1ew.push('</label>\n\t\t\t<input class="required" type="file" id="js_field_avatar" placeholder="select an image"/>\n\t\t</div>\n\t</div>\n</div>\n<div class="submit-wrapper clearfix">\n    <input type="submit" class="button primary" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('save');
                }));
                ___v1ew.push('" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    <a class="js-dialog-cancel cancel">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return __('cancel');
                }));
                ___v1ew.push('</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/user/edit_avatar*/
define('app/form/user/edit_avatar', [
    'exports',
    'passbolt-mad/form/form',
    'app/view/template/form/user/avatar.ejs!'
], function (exports, _form, _avatar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _form2 = _interopRequireDefault(_form);
    var _avatar2 = _interopRequireDefault(_avatar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditAvatarForm = _form2.default.extend('passbolt.form.user.Avatar', { defaults: { template: _avatar2.default } }, {
        afterStart: function afterStart() {
            this.on();
        }
    });
    exports.default = EditAvatarForm;
});
/*app/model/group*/
define('app/model/group', [
    'exports',
    'passbolt-mad/net/ajax',
    'app/model/group_user',
    'passbolt-mad/model/model',
    'passbolt-mad/model/serializer/cake_serializer',
    'app/model/user'
], function (exports, _ajax, _group_user, _model, _cake_serializer, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _model2 = _interopRequireDefault(_model);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Group = _model2.default.extend('passbolt.model.Group', {
        attributes: {
            id: 'string',
            name: 'string',
            created: 'string',
            modified: 'string',
            Modifier: 'passbolt.model.User.model',
            GroupUser: 'passbolt.model.GroupUser.models'
        },
        validationRules: {
            id: [{ rule: 'uuid' }],
            name: [
                {
                    rule: 'required',
                    message: __('A name is required.')
                },
                {
                    rule: [
                        'lengthBetween',
                        0,
                        255
                    ],
                    message: __('The name length should be maximum %s characters.', 255)
                },
                {
                    rule: 'utf8Extended',
                    message: __('The name should be a valid utf8 string.')
                }
            ]
        },
        findAll: function findAll(params) {
            return _ajax2.default.request({
                url: APP_URL + 'groups.json',
                type: 'GET',
                params: params
            });
        },
        findOne: function findOne(params) {
            return _ajax2.default.request({
                url: APP_URL + 'groups/{id}.json',
                type: 'GET',
                params: params
            });
        },
        destroy: function destroy(id) {
            var params = { id: id };
            return _ajax2.default.request({
                url: APP_URL + 'groups/{id}.json',
                type: 'DELETE',
                params: params
            });
        }
    }, {
        isGroupManager: function isGroupManager(user) {
            var isGroupManager = false;
            if (this.GroupUser != undefined) {
                this.GroupUser.forEach(function (groupUser) {
                    if (groupUser.user_id == user.id && groupUser.is_admin == true) {
                        isGroupManager = true;
                    }
                });
            }
            return isGroupManager;
        },
        isAllowedToEdit: function isAllowedToEdit(user) {
            var isGroupManager = this.isGroupManager(user), isAdmin = user.Role.name == 'admin';
            return isGroupManager || isAdmin;
        },
        deleteDryRun: function deleteDryRun(id) {
            var params = { id: id };
            return _ajax2.default.request({
                url: APP_URL + 'groups/{id}/dry-run.json',
                type: 'DELETE',
                params: params,
                silentNotify: true
            });
        }
    });
    exports.default = Group;
    _patchCircularDependency(_ajax2);
    _patchCircularDependency(_group_user2);
    _patchCircularDependency(_model2);
    _patchCircularDependency(_cake_serializer2);
    _patchCircularDependency(_user2);
    function _patchCircularDependency(obj) {
        var defaultExport;
        Object.defineProperty(obj.default, 'default', {
            configurable: true,
            set: function (value) {
                if (obj.default.__esModule) {
                    obj.default = value;
                }
                defaultExport = value;
            },
            get: function () {
                return defaultExport;
            }
        });
    }
});
/*app/model/group_user*/
define('app/model/group_user', [
    'exports',
    'passbolt-mad/net/ajax',
    'app/model/group',
    'passbolt-mad/model/model',
    'passbolt-mad/model/serializer/cake_serializer',
    'app/model/user'
], function (exports, _ajax, _group, _model, _cake_serializer, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _group2 = _interopRequireDefault(_group);
    var _model2 = _interopRequireDefault(_model);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupUser = _model2.default.extend('passbolt.model.GroupUser', {
        validateRules: {},
        attributes: {
            id: 'string',
            group_id: 'string',
            user_id: 'string',
            User: 'passbolt.model.User.model',
            Group: 'passbolt.model.Group.model'
        },
        membershipType: {
            0: __('Member'),
            1: __('Group manager')
        }
    }, {});
    exports.default = GroupUser;
    _patchCircularDependency(_ajax2);
    _patchCircularDependency(_group2);
    _patchCircularDependency(_model2);
    _patchCircularDependency(_cake_serializer2);
    _patchCircularDependency(_user2);
    function _patchCircularDependency(obj) {
        var defaultExport;
        Object.defineProperty(obj.default, 'default', {
            configurable: true,
            set: function (value) {
                if (obj.default.__esModule) {
                    obj.default = value;
                }
                defaultExport = value;
            },
            get: function () {
                return defaultExport;
            }
        });
    }
});
/*app/model/image_storage*/
define('app/model/image_storage', [
    'exports',
    'passbolt-mad/model/model'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ImageStorage = _model2.default.extend('passbolt.model.ImageStorage', {}, {
        imagePath: function imagePath(version) {
            if (typeof this.url == 'undefined') {
                return '';
            }
            if (typeof this.url[version] == 'undefined') {
                return '';
            } else {
                return this.url[version];
            }
        }
    });
    exports.default = ImageStorage;
});
/*app/model/profile*/
define('app/model/profile', [
    'exports',
    'passbolt-mad/net/ajax',
    'app/model/image_storage',
    'passbolt-mad/model/model',
    'passbolt-mad/model/serializer/cake_serializer'
], function (exports, _ajax, _image_storage, _model, _cake_serializer) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _image_storage2 = _interopRequireDefault(_image_storage);
    var _model2 = _interopRequireDefault(_model);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Profile = _model2.default.extend('passbolt.model.Profile', {
        attributes: {
            id: 'string',
            first_name: 'string',
            last_name: 'string',
            Avatar: 'passbolt.model.ImageStorage.model'
        },
        validationRules: {
            first_name: [
                {
                    rule: 'required',
                    message: __('A first name is required')
                },
                {
                    rule: 'notEmpty',
                    message: __('A first name is required')
                },
                {
                    rule: 'utf8',
                    message: __('First name should be a valid utf8 string.')
                },
                {
                    rule: [
                        'lengthBetween',
                        0,
                        255
                    ],
                    message: __('The first name length should be maximum 255 characters.')
                }
            ],
            last_name: [
                {
                    rule: 'required',
                    message: __('A last name is required')
                },
                {
                    rule: 'notEmpty',
                    message: __('A last name is required')
                },
                {
                    rule: 'utf8',
                    message: __('Last name should be a valid utf8 string.')
                },
                {
                    rule: [
                        'lengthBetween',
                        0,
                        255
                    ],
                    message: __('The last name length should be maximum 255 characters.')
                }
            ]
        }
    }, {
        avatarPath: function avatarPath(version) {
            if (typeof this.Avatar != 'undefined' && this.Avatar.url != undefined) {
                return this.Avatar.imagePath(version);
            } else {
                return 'img/avatar/user.png';
            }
        },
        fullName: function fullName() {
            return this.first_name + ' ' + this.last_name;
        }
    });
    exports.default = Profile;
});
/*app/model/user*/
define('app/model/user', [
    'exports',
    'passbolt-mad/net/ajax',
    'passbolt-mad/model/model',
    'passbolt-mad/model/serializer/cake_serializer',
    'app/model/group_user',
    'app/model/profile'
], function (exports, _ajax, _model, _cake_serializer, _group_user, _profile) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _model2 = _interopRequireDefault(_model);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _profile2 = _interopRequireDefault(_profile);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var User = _model2.default.extend('passbolt.model.User', {
        current: null,
        attributes: {
            id: 'string',
            username: 'string',
            email: 'string',
            role_id: 'string',
            active: 'boolean',
            last_logged_in: 'string',
            Profile: 'passbolt.model.Profile.model',
            GroupUser: 'passbolt.model.GroupUser.models'
        },
        validationRules: {
            id: [{ rule: 'uuid' }],
            username: [
                {
                    rule: 'required',
                    message: __('A username is required.')
                },
                {
                    rule: 'notEmpty',
                    message: __('A username is required.')
                },
                {
                    rule: [
                        'lengthBetween',
                        0,
                        255
                    ],
                    message: __('The username length should be maximum 254 characters.')
                },
                {
                    rule: ['email'],
                    message: __('The username should be a valid email address.')
                }
            ]
        },
        getCurrent: function getCurrent() {
            return User.current;
        },
        setCurrent: function setCurrent(user) {
            User.current = user;
        },
        create: function create(attrs, success, error) {
            var self = this;
            var params = _cake_serializer2.default.to(attrs, this);
            return _ajax2.default.request({
                url: APP_URL + 'users',
                type: 'POST',
                params: params,
                success: success,
                error: error
            }).pipe(function (data, textStatus, jqXHR) {
                var def = $.Deferred();
                def.resolveWith(this, [_cake_serializer2.default.from(data, self)]);
                return def;
            });
        },
        destroy: function destroy(id, success, error) {
            var params = { id: id };
            return _ajax2.default.request({
                url: APP_URL + 'users/{id}',
                type: 'DELETE',
                params: params,
                success: success,
                error: error
            });
        },
        findAll: function findAll(params, success, error) {
            return _ajax2.default.request({
                url: APP_URL + 'users.json',
                type: 'GET',
                params: params,
                success: success,
                error: error
            });
        },
        findOne: function findOne(params, success, error) {
            var async = true;
            if (typeof params['async'] != 'undefined') {
                async = params['async'];
            }
            return _ajax2.default.request({
                url: APP_URL + 'users/{id}.json',
                type: 'GET',
                params: params,
                success: success,
                error: error,
                async: async
            });
        },
        update: function update(id, attrs, success, error) {
            var self = this;
            var params = _cake_serializer2.default.to(attrs, this);
            params.id = id;
            return _ajax2.default.request({
                url: APP_URL + 'users/{id}',
                type: 'PUT',
                params: params,
                success: success,
                error: error
            }).pipe(function (data, textStatus, jqXHR) {
                var def = $.Deferred();
                def.resolveWith(this, [_cake_serializer2.default.from(data, self)]);
                return def;
            });
        },
        updateAvatar: function updateAvatar(attrs, success, error) {
            var self = this;
            var params = new FormData();
            params.id = attrs['id'];
            params.append('id', attrs['id']);
            params.append('profile[avatar][file]', attrs.newAvatar);
            return _ajax2.default.request({
                url: APP_URL + 'users/{id}.json',
                type: 'POST',
                cache: false,
                contentType: false,
                processData: false,
                params: params,
                success: success,
                error: error
            }).pipe(function (data, textStatus, jqXHR) {
                var def = $.Deferred();
                def.resolveWith(this, [_cake_serializer2.default.from(data, self)]);
                return def;
            });
        }
    }, {
        saveAvatar: function saveAvatar(file) {
            this.attr('newAvatar', file);
            var def = can.Model._makeRequest(this, 'updateAvatar', null, null, 'updated');
            this.attr('newAvatar', null);
            return def;
        },
        deleteDryRun: function deleteDryRun(id, attrs, success, error) {
            var params = { id: id };
            return _ajax2.default.request({
                url: APP_URL + 'users/{id}/dry-run.json',
                type: 'DELETE',
                params: params,
                success: success,
                error: error,
                silentNotify: true
            });
        }
    });
    exports.default = User;
    _patchCircularDependency(_ajax2);
    _patchCircularDependency(_model2);
    _patchCircularDependency(_cake_serializer2);
    _patchCircularDependency(_group_user2);
    _patchCircularDependency(_profile2);
    function _patchCircularDependency(obj) {
        var defaultExport;
        Object.defineProperty(obj.default, 'default', {
            configurable: true,
            set: function (value) {
                if (obj.default.__esModule) {
                    obj.default = value;
                }
                defaultExport = value;
            },
            get: function () {
                return defaultExport;
            }
        });
    }
});
/*app/view/template/component/breadcrumb/breadcrumb.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/breadcrumb/breadcrumb.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_breadcrumb_breadcrumb_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<ul>\n</ul>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/breadcrumb/breadcrumb_item.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/breadcrumb/breadcrumb_item.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_breadcrumb_breadcrumb_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                if (typeof cssClasses == 'undefined') {
                    cssClasses = '';
                }
                ;
                ;
                ___v1ew.push('\n<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <div class="main-cell">\n        <a><span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n    </div>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/settings/workspace_breadcrumb*/
define('app/component/settings/workspace_breadcrumb', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/component',
    'app/model/filter',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu',
    'app/model/user',
    'app/view/template/component/breadcrumb/breadcrumb.ejs!',
    'app/view/template/component/breadcrumb/breadcrumb_item.ejs!'
], function (exports, _action, _component, _filter, _bus, _menu, _user, _breadcrumb, _breadcrumb_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _filter2 = _interopRequireDefault(_filter);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    var _user2 = _interopRequireDefault(_user);
    var _breadcrumb2 = _interopRequireDefault(_breadcrumb);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceBreadcrumbComponent = _component2.default.extend('passbolt.component.settings.WorkspaceBreadcrumb', {
        defaults: {
            template: _breadcrumb2.default,
            status: 'hidden',
            filter: null
        }
    }, {
        afterStart: function afterStart() {
            var menuSelector = '#' + this.getId() + ' ul';
            this.options.menu = new _menu2.default(menuSelector, { itemTemplate: _breadcrumb_item2.default });
            this.options.menu.start();
            this.menuItems = [];
            this.sectionMenuItems = [];
            var menuItem = new _action2.default({
                id: uuid(),
                label: __('All users'),
                action: function action() {
                    var filter = new _filter2.default({
                        label: __('All users'),
                        type: _filter2.default.SHORTCUT
                    });
                    _bus2.default.trigger('request_workspace', 'user');
                    _bus2.default.trigger('filter_users_browser', filter);
                }
            });
            this.menuItems.push(menuItem);
            var menuItem = new _action2.default({
                id: uuid(),
                label: _user2.default.getCurrent().Profile.fullName(),
                action: function action() {
                    _bus2.default.trigger('request_settings_section', 'profile');
                }
            });
            this.menuItems.push(menuItem);
            this.sectionMenuItems['profile'] = [new _action2.default({
                    id: uuid(),
                    label: __('Profile'),
                    action: function action() {
                        return;
                    }
                })];
            this.sectionMenuItems['keys'] = [new _action2.default({
                    id: uuid(),
                    label: __('Keys management'),
                    action: function action() {
                        return;
                    }
                })];
        },
        load: function load() {
        },
        destroy: function destroy() {
            $('#' + this.getId() + ' ul').empty();
            this._super();
        },
        refreshMenuItems: function refreshMenuItems(section) {
            var menuItems = this.sectionMenuItems[section] !== undefined ? $.merge($.merge([], this.menuItems), this.sectionMenuItems[section]) : this.menuItems;
            this.options.menu.reset();
            this.options.menu.load(menuItems);
        },
        '{mad.bus.element} request_settings_section': function madBusElementRequest_settings_section(el, ev, section) {
            this.refreshMenuItems(section);
        }
    });
    exports.default = WorkspaceBreadcrumbComponent;
});
/*sha1*/
'use strict';
(function (T) {
    function y(c, a, d) {
        var b = 0, f = [], k = 0, g, e, n, h, m, u, r, p = !1, q = !1, t = [], v = [], x, w = !1;
        d = d || {};
        g = d.encoding || 'UTF8';
        x = d.numRounds || 1;
        n = J(a, g);
        if (x !== parseInt(x, 10) || 1 > x)
            throw Error('numRounds must a integer >= 1');
        if ('SHA-1' === c)
            m = 512, u = K, r = U, h = 160;
        else if (u = function (a, d) {
                return L(a, d, c);
            }, r = function (a, d, b, f) {
                var k, e;
                if ('SHA-224' === c || 'SHA-256' === c)
                    k = (d + 65 >>> 9 << 4) + 15, e = 16;
                else if ('SHA-384' === c || 'SHA-512' === c)
                    k = (d + 129 >>> 10 << 5) + 31, e = 32;
                else
                    throw Error('Unexpected error in SHA-2 implementation');
                for (; a.length <= k;)
                    a.push(0);
                a[d >>> 5] |= 128 << 24 - d % 32;
                a[k] = d + b;
                b = a.length;
                for (d = 0; d < b; d += e)
                    f = L(a.slice(d, d + e), f, c);
                if ('SHA-224' === c)
                    a = [
                        f[0],
                        f[1],
                        f[2],
                        f[3],
                        f[4],
                        f[5],
                        f[6]
                    ];
                else if ('SHA-256' === c)
                    a = f;
                else if ('SHA-384' === c)
                    a = [
                        f[0].a,
                        f[0].b,
                        f[1].a,
                        f[1].b,
                        f[2].a,
                        f[2].b,
                        f[3].a,
                        f[3].b,
                        f[4].a,
                        f[4].b,
                        f[5].a,
                        f[5].b
                    ];
                else if ('SHA-512' === c)
                    a = [
                        f[0].a,
                        f[0].b,
                        f[1].a,
                        f[1].b,
                        f[2].a,
                        f[2].b,
                        f[3].a,
                        f[3].b,
                        f[4].a,
                        f[4].b,
                        f[5].a,
                        f[5].b,
                        f[6].a,
                        f[6].b,
                        f[7].a,
                        f[7].b
                    ];
                else
                    throw Error('Unexpected error in SHA-2 implementation');
                return a;
            }, 'SHA-224' === c)
            m = 512, h = 224;
        else if ('SHA-256' === c)
            m = 512, h = 256;
        else if ('SHA-384' === c)
            m = 1024, h = 384;
        else if ('SHA-512' === c)
            m = 1024, h = 512;
        else
            throw Error('Chosen SHA variant is not supported');
        e = z(c);
        this.setHMACKey = function (a, d, f) {
            var k;
            if (!0 === q)
                throw Error('HMAC key already set');
            if (!0 === p)
                throw Error('Cannot set HMAC key after finalizing hash');
            if (!0 === w)
                throw Error('Cannot set HMAC key after calling update');
            g = (f || {}).encoding || 'UTF8';
            d = J(d, g)(a);
            a = d.binLen;
            d = d.value;
            k = m >>> 3;
            f = k / 4 - 1;
            if (k < a / 8) {
                for (d = r(d, a, 0, z(c)); d.length <= f;)
                    d.push(0);
                d[f] &= 4294967040;
            } else if (k > a / 8) {
                for (; d.length <= f;)
                    d.push(0);
                d[f] &= 4294967040;
            }
            for (a = 0; a <= f; a += 1)
                t[a] = d[a] ^ 909522486, v[a] = d[a] ^ 1549556828;
            e = u(t, e);
            b = m;
            q = !0;
        };
        this.update = function (a) {
            var c, d, g, h = 0, p = m >>> 5;
            c = n(a, f, k);
            a = c.binLen;
            d = c.value;
            c = a >>> 5;
            for (g = 0; g < c; g += p)
                h + m <= a && (e = u(d.slice(g, g + p), e), h += m);
            b += h;
            f = d.slice(h >>> 5);
            k = a % m;
            w = !0;
        };
        this.getHash = function (a, d) {
            var g, m, n;
            if (!0 === q)
                throw Error('Cannot call getHash after setting HMAC key');
            n = M(d);
            switch (a) {
            case 'HEX':
                g = function (a) {
                    return N(a, n);
                };
                break;
            case 'B64':
                g = function (a) {
                    return O(a, n);
                };
                break;
            case 'BYTES':
                g = P;
                break;
            default:
                throw Error('format must be HEX, B64, or BYTES');
            }
            if (!1 === p)
                for (e = r(f, k, b, e), m = 1; m < x; m += 1)
                    e = r(e, h, 0, z(c));
            p = !0;
            return g(e);
        };
        this.getHMAC = function (a, d) {
            var g, n, t;
            if (!1 === q)
                throw Error('Cannot call getHMAC without first setting HMAC key');
            t = M(d);
            switch (a) {
            case 'HEX':
                g = function (a) {
                    return N(a, t);
                };
                break;
            case 'B64':
                g = function (a) {
                    return O(a, t);
                };
                break;
            case 'BYTES':
                g = P;
                break;
            default:
                throw Error('outputFormat must be HEX, B64, or BYTES');
            }
            !1 === p && (n = r(f, k, b, e), e = u(v, z(c)), e = r(n, h, m, e));
            p = !0;
            return g(e);
        };
    }
    function b(c, a) {
        this.a = c;
        this.b = a;
    }
    function V(c, a, d) {
        var b = c.length, f, k, e, l, n;
        a = a || [0];
        d = d || 0;
        n = d >>> 3;
        if (0 !== b % 2)
            throw Error('String of HEX type must be in byte increments');
        for (f = 0; f < b; f += 2) {
            k = parseInt(c.substr(f, 2), 16);
            if (isNaN(k))
                throw Error('String of HEX type contains invalid characters');
            l = (f >>> 1) + n;
            for (e = l >>> 2; a.length <= e;)
                a.push(0);
            a[e] |= k << 8 * (3 - l % 4);
        }
        return {
            value: a,
            binLen: 4 * b + d
        };
    }
    function W(c, a, d) {
        var b = [], f, k, e, l, b = a || [0];
        d = d || 0;
        k = d >>> 3;
        for (f = 0; f < c.length; f += 1)
            a = c.charCodeAt(f), l = f + k, e = l >>> 2, b.length <= e && b.push(0), b[e] |= a << 8 * (3 - l % 4);
        return {
            value: b,
            binLen: 8 * c.length + d
        };
    }
    function X(c, a, d) {
        var b = [], f = 0, e, g, l, n, h, m, b = a || [0];
        d = d || 0;
        a = d >>> 3;
        if (-1 === c.search(/^[a-zA-Z0-9=+\/]+$/))
            throw Error('Invalid character in base-64 string');
        g = c.indexOf('=');
        c = c.replace(/\=/g, '');
        if (-1 !== g && g < c.length)
            throw Error('Invalid \'=\' found in base-64 string');
        for (g = 0; g < c.length; g += 4) {
            h = c.substr(g, 4);
            for (l = n = 0; l < h.length; l += 1)
                e = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.indexOf(h[l]), n |= e << 18 - 6 * l;
            for (l = 0; l < h.length - 1; l += 1) {
                m = f + a;
                for (e = m >>> 2; b.length <= e;)
                    b.push(0);
                b[e] |= (n >>> 16 - 8 * l & 255) << 8 * (3 - m % 4);
                f += 1;
            }
        }
        return {
            value: b,
            binLen: 8 * f + d
        };
    }
    function N(c, a) {
        var d = '', b = 4 * c.length, f, e;
        for (f = 0; f < b; f += 1)
            e = c[f >>> 2] >>> 8 * (3 - f % 4), d += '0123456789abcdef'.charAt(e >>> 4 & 15) + '0123456789abcdef'.charAt(e & 15);
        return a.outputUpper ? d.toUpperCase() : d;
    }
    function O(c, a) {
        var d = '', b = 4 * c.length, f, e, g;
        for (f = 0; f < b; f += 3)
            for (g = f + 1 >>> 2, e = c.length <= g ? 0 : c[g], g = f + 2 >>> 2, g = c.length <= g ? 0 : c[g], g = (c[f >>> 2] >>> 8 * (3 - f % 4) & 255) << 16 | (e >>> 8 * (3 - (f + 1) % 4) & 255) << 8 | g >>> 8 * (3 - (f + 2) % 4) & 255, e = 0; 4 > e; e += 1)
                8 * f + 6 * e <= 32 * c.length ? d += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.charAt(g >>> 6 * (3 - e) & 63) : d += a.b64Pad;
        return d;
    }
    function P(c) {
        var a = '', d = 4 * c.length, b, f;
        for (b = 0; b < d; b += 1)
            f = c[b >>> 2] >>> 8 * (3 - b % 4) & 255, a += String.fromCharCode(f);
        return a;
    }
    function M(c) {
        var a = {
            outputUpper: !1,
            b64Pad: '='
        };
        c = c || {};
        a.outputUpper = c.outputUpper || !1;
        !0 === c.hasOwnProperty('b64Pad') && (a.b64Pad = c.b64Pad);
        if ('boolean' !== typeof a.outputUpper)
            throw Error('Invalid outputUpper formatting option');
        if ('string' !== typeof a.b64Pad)
            throw Error('Invalid b64Pad formatting option');
        return a;
    }
    function J(c, a) {
        var d;
        switch (a) {
        case 'UTF8':
        case 'UTF16BE':
        case 'UTF16LE':
            break;
        default:
            throw Error('encoding must be UTF8, UTF16BE, or UTF16LE');
        }
        switch (c) {
        case 'HEX':
            d = V;
            break;
        case 'TEXT':
            d = function (c, d, b) {
                var e = [], l = [], n = 0, h, m, u, r, p, e = d || [0];
                d = b || 0;
                u = d >>> 3;
                if ('UTF8' === a)
                    for (h = 0; h < c.length; h += 1)
                        for (b = c.charCodeAt(h), l = [], 128 > b ? l.push(b) : 2048 > b ? (l.push(192 | b >>> 6), l.push(128 | b & 63)) : 55296 > b || 57344 <= b ? l.push(224 | b >>> 12, 128 | b >>> 6 & 63, 128 | b & 63) : (h += 1, b = 65536 + ((b & 1023) << 10 | c.charCodeAt(h) & 1023), l.push(240 | b >>> 18, 128 | b >>> 12 & 63, 128 | b >>> 6 & 63, 128 | b & 63)), m = 0; m < l.length; m += 1) {
                            p = n + u;
                            for (r = p >>> 2; e.length <= r;)
                                e.push(0);
                            e[r] |= l[m] << 8 * (3 - p % 4);
                            n += 1;
                        }
                else if ('UTF16BE' === a || 'UTF16LE' === a)
                    for (h = 0; h < c.length; h += 1) {
                        b = c.charCodeAt(h);
                        'UTF16LE' === a && (m = b & 255, b = m << 8 | b >>> 8);
                        p = n + u;
                        for (r = p >>> 2; e.length <= r;)
                            e.push(0);
                        e[r] |= b << 8 * (2 - p % 4);
                        n += 2;
                    }
                return {
                    value: e,
                    binLen: 8 * n + d
                };
            };
            break;
        case 'B64':
            d = X;
            break;
        case 'BYTES':
            d = W;
            break;
        default:
            throw Error('format must be HEX, TEXT, B64, or BYTES');
        }
        return d;
    }
    function w(c, a) {
        return c << a | c >>> 32 - a;
    }
    function q(c, a) {
        return c >>> a | c << 32 - a;
    }
    function v(c, a) {
        var d = null, d = new b(c.a, c.b);
        return d = 32 >= a ? new b(d.a >>> a | d.b << 32 - a & 4294967295, d.b >>> a | d.a << 32 - a & 4294967295) : new b(d.b >>> a - 32 | d.a << 64 - a & 4294967295, d.a >>> a - 32 | d.b << 64 - a & 4294967295);
    }
    function Q(c, a) {
        var d = null;
        return d = 32 >= a ? new b(c.a >>> a, c.b >>> a | c.a << 32 - a & 4294967295) : new b(0, c.a >>> a - 32);
    }
    function Y(c, a, d) {
        return c & a ^ ~c & d;
    }
    function Z(c, a, d) {
        return new b(c.a & a.a ^ ~c.a & d.a, c.b & a.b ^ ~c.b & d.b);
    }
    function R(c, a, d) {
        return c & a ^ c & d ^ a & d;
    }
    function aa(c, a, d) {
        return new b(c.a & a.a ^ c.a & d.a ^ a.a & d.a, c.b & a.b ^ c.b & d.b ^ a.b & d.b);
    }
    function ba(c) {
        return q(c, 2) ^ q(c, 13) ^ q(c, 22);
    }
    function ca(c) {
        var a = v(c, 28), d = v(c, 34);
        c = v(c, 39);
        return new b(a.a ^ d.a ^ c.a, a.b ^ d.b ^ c.b);
    }
    function da(c) {
        return q(c, 6) ^ q(c, 11) ^ q(c, 25);
    }
    function ea(c) {
        var a = v(c, 14), d = v(c, 18);
        c = v(c, 41);
        return new b(a.a ^ d.a ^ c.a, a.b ^ d.b ^ c.b);
    }
    function fa(c) {
        return q(c, 7) ^ q(c, 18) ^ c >>> 3;
    }
    function ga(c) {
        var a = v(c, 1), d = v(c, 8);
        c = Q(c, 7);
        return new b(a.a ^ d.a ^ c.a, a.b ^ d.b ^ c.b);
    }
    function ha(c) {
        return q(c, 17) ^ q(c, 19) ^ c >>> 10;
    }
    function ia(c) {
        var a = v(c, 19), d = v(c, 61);
        c = Q(c, 6);
        return new b(a.a ^ d.a ^ c.a, a.b ^ d.b ^ c.b);
    }
    function B(c, a) {
        var d = (c & 65535) + (a & 65535);
        return ((c >>> 16) + (a >>> 16) + (d >>> 16) & 65535) << 16 | d & 65535;
    }
    function ja(c, a, d, b) {
        var f = (c & 65535) + (a & 65535) + (d & 65535) + (b & 65535);
        return ((c >>> 16) + (a >>> 16) + (d >>> 16) + (b >>> 16) + (f >>> 16) & 65535) << 16 | f & 65535;
    }
    function C(c, a, d, b, f) {
        var e = (c & 65535) + (a & 65535) + (d & 65535) + (b & 65535) + (f & 65535);
        return ((c >>> 16) + (a >>> 16) + (d >>> 16) + (b >>> 16) + (f >>> 16) + (e >>> 16) & 65535) << 16 | e & 65535;
    }
    function ka(c, a) {
        var d, e, f;
        d = (c.b & 65535) + (a.b & 65535);
        e = (c.b >>> 16) + (a.b >>> 16) + (d >>> 16);
        f = (e & 65535) << 16 | d & 65535;
        d = (c.a & 65535) + (a.a & 65535) + (e >>> 16);
        e = (c.a >>> 16) + (a.a >>> 16) + (d >>> 16);
        return new b((e & 65535) << 16 | d & 65535, f);
    }
    function la(c, a, d, e) {
        var f, k, g;
        f = (c.b & 65535) + (a.b & 65535) + (d.b & 65535) + (e.b & 65535);
        k = (c.b >>> 16) + (a.b >>> 16) + (d.b >>> 16) + (e.b >>> 16) + (f >>> 16);
        g = (k & 65535) << 16 | f & 65535;
        f = (c.a & 65535) + (a.a & 65535) + (d.a & 65535) + (e.a & 65535) + (k >>> 16);
        k = (c.a >>> 16) + (a.a >>> 16) + (d.a >>> 16) + (e.a >>> 16) + (f >>> 16);
        return new b((k & 65535) << 16 | f & 65535, g);
    }
    function ma(c, a, d, e, f) {
        var k, g, l;
        k = (c.b & 65535) + (a.b & 65535) + (d.b & 65535) + (e.b & 65535) + (f.b & 65535);
        g = (c.b >>> 16) + (a.b >>> 16) + (d.b >>> 16) + (e.b >>> 16) + (f.b >>> 16) + (k >>> 16);
        l = (g & 65535) << 16 | k & 65535;
        k = (c.a & 65535) + (a.a & 65535) + (d.a & 65535) + (e.a & 65535) + (f.a & 65535) + (g >>> 16);
        g = (c.a >>> 16) + (a.a >>> 16) + (d.a >>> 16) + (e.a >>> 16) + (f.a >>> 16) + (k >>> 16);
        return new b((g & 65535) << 16 | k & 65535, l);
    }
    function z(c) {
        var a, d;
        if ('SHA-1' === c)
            c = [
                1732584193,
                4023233417,
                2562383102,
                271733878,
                3285377520
            ];
        else
            switch (a = [
                    3238371032,
                    914150663,
                    812702999,
                    4144912697,
                    4290775857,
                    1750603025,
                    1694076839,
                    3204075428
                ], d = [
                    1779033703,
                    3144134277,
                    1013904242,
                    2773480762,
                    1359893119,
                    2600822924,
                    528734635,
                    1541459225
                ], c) {
            case 'SHA-224':
                c = a;
                break;
            case 'SHA-256':
                c = d;
                break;
            case 'SHA-384':
                c = [
                    new b(3418070365, a[0]),
                    new b(1654270250, a[1]),
                    new b(2438529370, a[2]),
                    new b(355462360, a[3]),
                    new b(1731405415, a[4]),
                    new b(41048885895, a[5]),
                    new b(3675008525, a[6]),
                    new b(1203062813, a[7])
                ];
                break;
            case 'SHA-512':
                c = [
                    new b(d[0], 4089235720),
                    new b(d[1], 2227873595),
                    new b(d[2], 4271175723),
                    new b(d[3], 1595750129),
                    new b(d[4], 2917565137),
                    new b(d[5], 725511199),
                    new b(d[6], 4215389547),
                    new b(d[7], 327033209)
                ];
                break;
            default:
                throw Error('Unknown SHA variant');
            }
        return c;
    }
    function K(c, a) {
        var d = [], b, e, k, g, l, n, h;
        b = a[0];
        e = a[1];
        k = a[2];
        g = a[3];
        l = a[4];
        for (h = 0; 80 > h; h += 1)
            d[h] = 16 > h ? c[h] : w(d[h - 3] ^ d[h - 8] ^ d[h - 14] ^ d[h - 16], 1), n = 20 > h ? C(w(b, 5), e & k ^ ~e & g, l, 1518500249, d[h]) : 40 > h ? C(w(b, 5), e ^ k ^ g, l, 1859775393, d[h]) : 60 > h ? C(w(b, 5), R(e, k, g), l, 2400959708, d[h]) : C(w(b, 5), e ^ k ^ g, l, 3395469782, d[h]), l = g, g = k, k = w(e, 30), e = b, b = n;
        a[0] = B(b, a[0]);
        a[1] = B(e, a[1]);
        a[2] = B(k, a[2]);
        a[3] = B(g, a[3]);
        a[4] = B(l, a[4]);
        return a;
    }
    function U(c, a, b, e) {
        var f;
        for (f = (a + 65 >>> 9 << 4) + 15; c.length <= f;)
            c.push(0);
        c[a >>> 5] |= 128 << 24 - a % 32;
        c[f] = a + b;
        b = c.length;
        for (a = 0; a < b; a += 16)
            e = K(c.slice(a, a + 16), e);
        return e;
    }
    function L(c, a, d) {
        var q, f, k, g, l, n, h, m, u, r, p, v, t, w, x, y, z, D, E, F, G, H, A = [], I;
        if ('SHA-224' === d || 'SHA-256' === d)
            r = 64, v = 1, H = Number, t = B, w = ja, x = C, y = fa, z = ha, D = ba, E = da, G = R, F = Y, I = e;
        else if ('SHA-384' === d || 'SHA-512' === d)
            r = 80, v = 2, H = b, t = ka, w = la, x = ma, y = ga, z = ia, D = ca, E = ea, G = aa, F = Z, I = S;
        else
            throw Error('Unexpected error in SHA-2 implementation');
        d = a[0];
        q = a[1];
        f = a[2];
        k = a[3];
        g = a[4];
        l = a[5];
        n = a[6];
        h = a[7];
        for (p = 0; p < r; p += 1)
            16 > p ? (u = p * v, m = c.length <= u ? 0 : c[u], u = c.length <= u + 1 ? 0 : c[u + 1], A[p] = new H(m, u)) : A[p] = w(z(A[p - 2]), A[p - 7], y(A[p - 15]), A[p - 16]), m = x(h, E(g), F(g, l, n), I[p], A[p]), u = t(D(d), G(d, q, f)), h = n, n = l, l = g, g = t(k, m), k = f, f = q, q = d, d = t(m, u);
        a[0] = t(d, a[0]);
        a[1] = t(q, a[1]);
        a[2] = t(f, a[2]);
        a[3] = t(k, a[3]);
        a[4] = t(g, a[4]);
        a[5] = t(l, a[5]);
        a[6] = t(n, a[6]);
        a[7] = t(h, a[7]);
        return a;
    }
    var e, S;
    e = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
    ];
    S = [
        new b(e[0], 3609767458),
        new b(e[1], 602891725),
        new b(e[2], 3964484399),
        new b(e[3], 2173295548),
        new b(e[4], 4081628472),
        new b(e[5], 3053834265),
        new b(e[6], 2937671579),
        new b(e[7], 3664609560),
        new b(e[8], 2734883394),
        new b(e[9], 1164996542),
        new b(e[10], 1323610764),
        new b(e[11], 3590304994),
        new b(e[12], 4068182383),
        new b(e[13], 991336113),
        new b(e[14], 633803317),
        new b(e[15], 3479774868),
        new b(e[16], 2666613458),
        new b(e[17], 944711139),
        new b(e[18], 2341262773),
        new b(e[19], 2007800933),
        new b(e[20], 1495990901),
        new b(e[21], 1856431235),
        new b(e[22], 3175218132),
        new b(e[23], 2198950837),
        new b(e[24], 3999719339),
        new b(e[25], 766784016),
        new b(e[26], 2566594879),
        new b(e[27], 3203337956),
        new b(e[28], 1034457026),
        new b(e[29], 2466948901),
        new b(e[30], 3758326383),
        new b(e[31], 168717936),
        new b(e[32], 1188179964),
        new b(e[33], 1546045734),
        new b(e[34], 1522805485),
        new b(e[35], 2643833823),
        new b(e[36], 2343527390),
        new b(e[37], 1014477480),
        new b(e[38], 1206759142),
        new b(e[39], 344077627),
        new b(e[40], 1290863460),
        new b(e[41], 3158454273),
        new b(e[42], 3505952657),
        new b(e[43], 106217008),
        new b(e[44], 3606008344),
        new b(e[45], 1432725776),
        new b(e[46], 1467031594),
        new b(e[47], 851169720),
        new b(e[48], 3100823752),
        new b(e[49], 1363258195),
        new b(e[50], 3750685593),
        new b(e[51], 3785050280),
        new b(e[52], 3318307427),
        new b(e[53], 3812723403),
        new b(e[54], 2003034995),
        new b(e[55], 3602036899),
        new b(e[56], 1575990012),
        new b(e[57], 1125592928),
        new b(e[58], 2716904306),
        new b(e[59], 442776044),
        new b(e[60], 593698344),
        new b(e[61], 3733110249),
        new b(e[62], 2999351573),
        new b(e[63], 3815920427),
        new b(3391569614, 3928383900),
        new b(3515267271, 566280711),
        new b(3940187606, 3454069534),
        new b(4118630271, 4000239992),
        new b(116418474, 1914138554),
        new b(174292421, 2731055270),
        new b(289380356, 3203993006),
        new b(460393269, 320620315),
        new b(685471733, 587496836),
        new b(852142971, 1086792851),
        new b(1017036298, 365543100),
        new b(1126000580, 2618297676),
        new b(1288033470, 3409855158),
        new b(1501505948, 4234509866),
        new b(1607167915, 987167468),
        new b(1816402316, 1246189591)
    ];
    'function' === typeof define && define.amd ? define('sha1', function () {
        return y;
    }) : 'undefined' !== typeof exports ? 'undefined' !== typeof module && module.exports ? module.exports = exports = y : exports = y : T.jsSHA = y;
}(this));
/*app/util/common*/
define('app/util/common', [
    'exports',
    'sha1',
    'xregexp',
    'passbolt-mad/component/component',
    'moment',
    'moment-timezone-with-data'
], function (exports, _sha, _xregexp, _component, _moment) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _sha2 = _interopRequireDefault(_sha);
    var _xregexp2 = _interopRequireDefault(_xregexp);
    var _component2 = _interopRequireDefault(_component);
    var _moment2 = _interopRequireDefault(_moment);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Common = _component2.default.extend('passbolt.Common', {
        uuid: function uuid(seed) {
            var shaObj = new _sha2.default('SHA-1', 'TEXT');
            shaObj.update(seed);
            var hashStr = shaObj.getHash('HEX').substring(0, 32);
            var search = (0, _xregexp2.default)('^(?<first>.{8})(?<second>.{4})(?<third>.{1})(?<fourth>.{3})(?<fifth>.{1})(?<sixth>.{3})(?<seventh>.{12}$)');
            var replace = (0, _xregexp2.default)('${first}-${second}-3${fourth}-a${sixth}-${seventh}');
            var uuid = _xregexp2.default.replace(hashStr, search, replace).replace(/\//g, '');
            return uuid;
        },
        datetimeToJSDate: function datetimeToJSDate(dateTime) {
            var dateTime = dateTime.split(' ');
            var date = dateTime[0];
            var time = dateTime[1];
            var dateArr = date.split('-');
            var timeArr = time.split(':');
            var dateObj = new Date(dateArr[0], dateArr[1] - 1, dateArr[2], timeArr[0], timeArr[1], timeArr[2]);
            return dateObj;
        },
        datetimeGetTimeAgo: function datetimeGetTimeAgo(dateTime) {
            var timeAgo = _moment2.default.tz(dateTime, cakephpConfig.app.server_timezone).fromNow();
            return timeAgo;
        }
    }, {});
    exports.default = Common;
});
/*app/view/template/component/gpgkey/keys.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/gpgkey/keys.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_gpgkey_keys_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="grid grid-responsive-12">\n\t<div class="row">\n\t\t<div class="col6 key-info">\n\t\t\t<h3>Information for public and secret key</h3>\n\t\t\t<table class="table-info" id="privkeyinfo">\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Key Id</td>\n\t\t\t\t\t<td class="keyId">\n\t\t\t\t\t\t<div class="input select tooltip-top"\n\t\t\t\t\t\t\t data-tooltip="sorry you can only have one key set at the moment">\n\t\t\t\t\t\t\t<select name="data[Key][0]" id="KeyId" disabled="disabled" class="">\n\t\t\t\t\t\t\t\t<option value="');
                ___v1ew.push(can.view.txt(true, 'option', 'value', this, function () {
                    return gpgkey.key_id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push(can.view.txt(1, 'option', 0, this, function () {
                    return gpgkey.key_id;
                }));
                ___v1ew.push('</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Uid</td>\n\t\t\t\t\t<td class="uid">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.uid;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Fingerprint</td>\n\t\t\t\t\t<td class="fingerprint">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.fingerprint;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Created</td>\n\t\t\t\t\t<td class="created">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.key_created;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Expires</td>\n\t\t\t\t\t<td class="expires">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.expires;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Key Length</td>\n\t\t\t\t\t<td class="length">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.bits;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Algorithm</td>\n\t\t\t\t\t<td class="algorithm">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.type;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t</div>\n\t\t<div class="col6 last key-export">\n            <h3>Public key block</h3>\n\t\t\t<div class="input textarea gpgkey" rel="publicKey">\n\t\t\t\t<textarea id="publicKeyUnarmored" class="fluid code" placeholder="" name="data[Gpgkey][key]"', can.view.pending({ scope: this }), '>');
                ___v1ew.push(can.view.txt(1, 'textarea', 0, this, function () {
                    return gpgkey.armored_key;
                }));
                ___v1ew.push('</textarea>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/gpgkey/keys*/
define('app/component/gpgkey/keys', [
    'exports',
    'app/util/common',
    'passbolt-mad/component/component',
    'app/model/user',
    'app/view/template/component/gpgkey/keys.ejs!'
], function (exports, _common, _component, _user, _keys) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _common2 = _interopRequireDefault(_common);
    var _component2 = _interopRequireDefault(_component);
    var _user2 = _interopRequireDefault(_user);
    var _keys2 = _interopRequireDefault(_keys);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Keys = _component2.default.extend('passbolt.component.gpgkey.Keys', { defaults: { template: _keys2.default } }, {
        beforeRender: function beforeRender() {
            this._super();
            var gpgKey = _user2.default.getCurrent().Gpgkey;
            this.setViewData('gpgkey', gpgKey);
        }
    });
    exports.default = Keys;
});
/*passbolt-mad/component/button*/
define('passbolt-mad/component/button', [
    'exports',
    'passbolt-mad/component/component'
], function (exports, _component) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Button = _component2.default.extend('mad.component.Button', {
        defaults: {
            label: 'Button Component',
            template: null,
            value: null,
            events: { click: null },
            tag: 'button'
        }
    }, {
        value: null,
        init: function init(el, options) {
            this._super(el, options);
            this.value = options.value;
        },
        getValue: function getValue() {
            return this.value;
        },
        setValue: function setValue(value) {
            this.value = value;
            return this;
        },
        click: function click(el, ev) {
            if (this.state.is('disabled')) {
                ev.stopImmediatePropagation();
            } else {
                if (this.options.events.click) {
                    this.options.events.click(this.element, ev, this.value);
                }
            }
        },
        stateDisabled: function stateDisabled(go) {
            if (go) {
                this.element.attr('disabled', 'disabled').addClass('disabled');
            } else {
                this.element.removeAttr('disabled').removeClass('disabled');
            }
        }
    });
    exports.default = Button;
});
/*app/view/template/component/settings/workspace_primary_menu.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/settings/workspace_primary_menu.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_settings_workspace_primary_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li>\n\t<a id="js_settings_wk_menu_edition_button" class="button section-profile">\n\t\t<i class="fa fa-fw fa-edit"></i>\n\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('edit');
                }));
                ___v1ew.push('</span>\n\t</a>\n    <a id="js_settings_wk_menu_download_public_key" class="button section-keys">\n        <i class="fa fa-fw fa-download"></i>\n        <span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Public');
                }));
                ___v1ew.push('</span>\n    </a>\n    <a id="js_settings_wk_menu_download_private_key" class="button section-keys">\n        <i class="fa fa-fw fa-download"></i>\n        <span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Private');
                }));
                ___v1ew.push('</span>\n    </a>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/settings/workspace_primary_menu*/
define('app/component/settings/workspace_primary_menu', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'app/view/template/component/settings/workspace_primary_menu.ejs!'
], function (exports, _button, _component, _bus, _workspace_primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SettingsWorkspaceMenu = _component2.default.extend('passbolt.component.settings.WorkspacePrimaryMenu', {
        defaults: {
            label: 'Settings Workspace Menu',
            template: _workspace_primary_menu2.default
        }
    }, {
        afterStart: function afterStart() {
            var editButton = new _button2.default($('#js_settings_wk_menu_edition_button'), {});
            editButton.start();
            this.options.editButton = editButton;
            var publicKeyButton = new _button2.default($('#js_settings_wk_menu_download_public_key'), {});
            publicKeyButton.start();
            this.options.publicKeyButton = publicKeyButton;
            var privateKeyButton = new _button2.default($('#js_settings_wk_menu_download_private_key'), {});
            privateKeyButton.start();
            this.options.privateKeyButton = privateKeyButton;
            this.on();
        },
        '{editButton.element} click': function editButtonElementClick(el, ev) {
            _bus2.default.trigger('request_profile_edition');
        },
        '{publicKeyButton.element} click': function publicKeyButtonElementClick(el, ev) {
            _bus2.default.trigger('passbolt.settings.download_public_key');
        },
        '{privateKeyButton.element} click': function privateKeyButtonElementClick(el, ev) {
            _bus2.default.trigger('passbolt.settings.download_private_key');
        },
        '{mad.bus.element} request_settings_section': function madBusElementRequest_settings_section(el, ev, section) {
            if (section == 'profile') {
                this.options.editButton.setState('ready');
                this.options.publicKeyButton.setState('hidden');
                this.options.privateKeyButton.setState('hidden');
            } else if (section == 'keys') {
                this.options.editButton.setState('hidden');
                this.options.publicKeyButton.setState('ready');
                this.options.privateKeyButton.setState('ready');
            }
        }
    });
    exports.default = SettingsWorkspaceMenu;
});
/*app/view/template/component/profile/profile.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/profile/profile.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_profile_profile_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="grid grid-responsive-12">\n\t<div class="row">\n\t\t<div class="profile col8">\n\t\t\t<h3>');
                ___v1ew.push(can.view.txt(1, 'h3', 0, this, function () {
                    return __('Profile');
                }));
                ___v1ew.push('</h3>\n\t\t\t<div class="section profile-detailed-information">\n\t\t\t\t<div class="avatar">\n\t\t\t\t\t<div class="value">\n\t\t\t\t\t\t<img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(user.Profile.avatarPath('medium'));
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="profile picture" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="edit">\n\t\t\t\t\t\t<a class="edit-avatar-action" title="');
                ___v1ew.push(can.view.txt(true, 'a', 'title', this, function () {
                    return __('Change Avatar');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t\t\t\t\t\t\t<i class="fa fa-camera"></i>\n\t\t\t\t\t\t\t<span class="help-text">Click here to upload a new picture.</span>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<table class="table-info profile">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<tr class="name">\n\t\t\t\t\t\t<td class="label">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Name');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td class="value">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class="email">\n\t\t\t\t\t\t<td class="label">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Email');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td class="value">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.username;
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class="role">\n\t\t\t\t\t\t<td class="label">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Role');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td class="value">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.Role.name;
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class="modified">\n\t\t\t\t\t\t<td class="label">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Modified');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t');
                var timeAgo = datetimeGetTimeAgo(user.Profile.attr('modified'));
                ;
                ;
                ___v1ew.push('\n\t\t\t\t\t\t<td class="value">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return timeAgo;
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class="created">\n\t\t\t\t\t\t<td class="label">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Created');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t');
                var timeAgo = datetimeGetTimeAgo(user.Profile.attr('created'));
                ;
                ;
                ___v1ew.push('\n\t\t\t\t\t\t<td class="value">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return timeAgo;
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class="publickey_keyid">\n\t\t\t\t\t\t<td class="label">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Public key');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td class="value">\n\t\t\t\t\t\t\t');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.Gpgkey.key_id;
                }));
                ___v1ew.push('\n\t\t\t\t\t\t\t<p><em>Note: Sorry, it is not possible to change your key at the moment. <!--<a>learn more \u203A</a>--></em></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/profile/profile*/
define('app/component/profile/profile', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'app/view/template/component/profile/profile.ejs!'
], function (exports, _component, _bus, _profile) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _profile2 = _interopRequireDefault(_profile);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ProfileComponent = _component2.default.extend('passbolt.component.profile.Profile', {
        defaults: {
            template: _profile2.default,
            user: null
        }
    }, {
        'beforeRender': function beforeRender() {
            this._super();
            this.setViewData('user', this.options.user);
        },
        '{user} updated': function userUpdated(user) {
            if (!this.state.is('disabled') && !this.state.is(null)) {
                this.refresh();
            }
        },
        '.edit-action click': function editActionClick(el, ev) {
            _bus2.default.trigger('request_profile_edition', this.options.user);
        },
        '.edit-avatar-action click': function editAvatarActionClick(el, ev) {
            _bus2.default.trigger('request_profile_avatar_edition', this.options.user);
        }
    });
    exports.default = ProfileComponent;
});
/*passbolt-mad/view/component/tab*/
define('passbolt-mad/view/component/tab', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Tab = _view2.default.extend('mad.view.component.Tab', {}, {
        selectTab: function selectTab(tabId) {
            this.getController().getComponent(tabId).view.addClass('selected');
            $('#js_tab_nav_' + tabId, this.element).find('a').addClass('selected');
        },
        unselectTab: function unselectTab(tabId) {
            this.getController().getComponent(tabId).view.removeClass('selected');
            $('#js_tab_nav_' + tabId, this.element).find('a').removeClass('selected');
        }
    });
    exports.default = Tab;
});
/*passbolt-mad/view/template/component/tab/tab.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/tab/tab.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_tab_tab_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    if (autoMenu) {
                        ___v1ew.push('\n<ul class="js_tabs_nav tabs-nav">\n</ul>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n<div class="js_tabs_content tabs-content">\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/tab*/
define('passbolt-mad/component/tab', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/composite',
    'passbolt-mad/component/menu',
    'passbolt-mad/view/component/tab',
    'passbolt-mad/view/template/component/tab/tab.ejs!'
], function (exports, _action, _component, _composite, _menu, _tab, _tab3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _composite2 = _interopRequireDefault(_composite);
    var _menu2 = _interopRequireDefault(_menu);
    var _tab2 = _interopRequireDefault(_tab);
    var _tab4 = _interopRequireDefault(_tab3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Tab = _composite2.default.extend('mad.component.Tab', {
        defaults: {
            label: 'Tab Controller',
            viewClass: _tab2.default,
            template: _tab4.default,
            autoMenu: true
        }
    }, {
        init: function init(el, opts) {
            this.enabledId = null;
            this._super(el, opts);
            this.setViewData('autoMenu', this.options.autoMenu);
        },
        afterStart: function afterStart() {
            if (this.options.autoMenu) {
                this.options.menu = new _menu2.default($('.js_tabs_nav', this.element));
                this.options.menu.start();
            }
            this.on();
        },
        '{menu.element} item_selected': function menuElementItem_selected(el, ev, item) {
            if (this.options.autoMenu) {
                var tabId = item.id.replace('js_tab_nav_', '');
                this.enableTab(tabId);
            }
        },
        enableTab: function enableTab(tabId) {
            if (this.enabledTabId) {
                this.getComponent(this.enabledTabId).setState('hidden');
                this.view.unselectTab(this.enabledTabId);
            }
            this.enabledTabId = tabId;
            var tab = this.getComponent(this.enabledTabId);
            if (tab.state.is(null)) {
                tab.start();
            } else if (tab.state.is('hidden')) {
                tab.setState('ready');
            }
            this.view.selectTab(this.enabledTabId);
        },
        addComponent: function addComponent(Class, options) {
            var defaultTabCss = ['tab-content'];
            if (typeof options.id != 'undefined') {
                options.id = options.id;
            } else {
                options.id = uuid();
            }
            if (this.options.autoMenu) {
                var menuEntry = new _action2.default({
                    id: 'js_tab_nav_' + options.id,
                    label: options.label
                });
                this.options.menu.insertItem(menuEntry);
            }
            if ($.isArray(options.cssClasses)) {
                $.merge(options.cssClasses, defaultTabCss);
            } else {
                options.cssClasses = defaultTabCss;
            }
            var component = _component2.default.create($('.js_tabs_content', this.element), 'last', Class, options);
            return this._super(component);
        }
    });
    exports.default = Tab;
});
/*passbolt-mad/form/choice_element*/
define('passbolt-mad/form/choice_element', [
    'exports',
    'passbolt-mad/form/element'
], function (exports, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ChoiceElement = _element2.default.extend('mad.form.ChoiceElement', {
        defaults: {
            availableValues: {},
            valueClasses: {}
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('availableValues', this.options.availableValues);
            this.setViewData('valueClasses', this.options.valueClasses);
        }
    });
    exports.default = ChoiceElement;
});
/*passbolt-mad/view/form/element/checkbox*/
define('passbolt-mad/view/form/element/checkbox', [
    'exports',
    'passbolt-mad/view/form/element'
], function (exports, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Checkbox = _element2.default.extend('mad.view.form.Checkbox', {}, {
        getValue: function getValue() {
            var returnValue = [];
            this.element.find('input:checked').each(function () {
                returnValue.push($(this).val());
            });
            return returnValue;
        },
        setValue: function setValue(value) {
            value = typeof value != 'undefined' && value != null ? value : [];
            this.element.find('input').each(function () {
                if (value.indexOf($(this).val()) != -1) {
                    $(this).attr('checked', true);
                    $(this)[0].checked = true;
                } else {
                    $(this)[0].checked = false;
                    $(this).removeAttr('checked');
                }
            });
        },
        'input click': function inputClick(el, ev) {
            ev.stopPropagation();
            if (el.is(':checked')) {
                this.element.trigger('checked', el.val());
            } else {
                this.element.trigger('unchecked', el.val());
            }
        },
        'input change': function inputChange(el, ev) {
            ev.stopPropagation();
            this.element.trigger('changed', { value: this.getValue() });
        }
    });
    exports.default = Checkbox;
});
/*passbolt-mad/view/template/form/checkbox.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/form/checkbox.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_form_checkbox_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    for (var value in availableValues) {
                        var u = uuid();
                        ___v1ew.push('\n<div class="input checkbox');
                        ___v1ew.push(can.view.txt(true, 'div', 'class', this, function () {
                            return valueClasses[value] !== undefined ? ' ' + valueClasses[value] : '';
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('\n\t<input type="checkbox" value="');
                        ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                            return value;
                        }));
                        ___v1ew.push('" id="checkbox');
                        ___v1ew.push(can.view.txt(true, 'input', 'id', this, function () {
                            return u;
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '/>');
                        ___v1ew.push('\n\t<label for="checkbox');
                        ___v1ew.push(can.view.txt(true, 'label', 'for', this, function () {
                            return u;
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push(can.view.txt(0, 'label', 0, this, function () {
                            return availableValues[value];
                        }));
                        ___v1ew.push('</label>\n</div>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/form/element/checkbox*/
define('passbolt-mad/form/element/checkbox', [
    'exports',
    'passbolt-mad/form/choice_element',
    'passbolt-mad/view/form/element/checkbox',
    'passbolt-mad/view/template/form/checkbox.ejs!'
], function (exports, _choice_element, _checkbox, _checkbox3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _choice_element2 = _interopRequireDefault(_choice_element);
    var _checkbox2 = _interopRequireDefault(_checkbox);
    var _checkbox4 = _interopRequireDefault(_checkbox3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Checkbox = _choice_element2.default.extend('mad.form.Checkbox', {
        defaults: {
            label: 'Checkbox Form Element',
            tag: 'div',
            template: _checkbox4.default,
            viewClass: _checkbox2.default
        }
    }, {});
    exports.default = Checkbox;
});
/*passbolt-mad/view/form/element/textbox*/
define('passbolt-mad/view/form/element/textbox', [
    'exports',
    'passbolt-mad/view/form/element'
], function (exports, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Textbox = _element2.default.extend('mad.view.form.Textbox', {}, {
        _changeTimeout: null,
        getValue: function getValue() {
            return this.element.val();
        },
        setValue: function setValue(value) {
            this.element.val(value);
        },
        ' input': function input(el, ev) {
            var self = this;
            var newValue = this.getValue();
            if (newValue.length >= this.getController().options.onChangeAfterLength) {
                if (this._changeTimeout != null) {
                    clearTimeout(this._changeTimeout);
                }
                this._changeTimeout = setTimeout(function () {
                    self.element.trigger('changed', { value: self.getValue() });
                }, this.getController().options.onChangeTimeout);
            }
        }
    });
    exports.default = Textbox;
});
/*passbolt-mad/form/element/textbox*/
define('passbolt-mad/form/element/textbox', [
    'exports',
    'passbolt-mad/form/element',
    'passbolt-mad/view/form/element/textbox'
], function (exports, _element, _textbox) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _element2 = _interopRequireDefault(_element);
    var _textbox2 = _interopRequireDefault(_textbox);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Textbox = _element2.default.extend('mad.form.Textbox', {
        defaults: {
            label: 'Textbox Form Element',
            tag: 'input',
            viewClass: _textbox2.default,
            onChangeTimeout: 0,
            onChangeAfterLength: 0
        }
    }, {});
    exports.default = Textbox;
});
/*app/view/template/form/user/create.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/form/user/create.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_user_create_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                var role = passbolt.model.User.getCurrent().Role.name;
                ;
                ;
                ___v1ew.push('\n');
                var user = this.controller.options.data;
                ;
                ;
                ___v1ew.push('\n<div class="form-content">\n\t<input type="hidden" name="passbolt.model.User.Group.id" id="js_field_group_id" class="form_field" />\n\t<div class="input text required">\n\t\t<label for="js_field_first_name">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('First Name');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.User.Profile.first_name" class="required" maxlength="50" type="text" id="js_field_first_name" placeholder="first name"/>\n\t\t<div id="js_field_first_name_feedback" class="message">\n\t\t</div>\n\t</div>\n\t<div class="input text required">\n\t\t<label for="js_field_last_name">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Last Name');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.User.Profile.last_name" class="required" maxlength="50" type="text" id="js_field_last_name" placeholder="last name"/>\n\t\t<div id="js_field_last_name_feedback" class="message">\n\t\t</div>\n\t</div>\n\t<div class="input text required clearfix">\n\t\t<label for="js_field_username">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Username / Email');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.User.username" class="required" maxlength="50" type="text" id="js_field_username" placeholder="email"');
                ___v1ew.push(can.view.txt(0, 'input', 1, this, function () {
                    var ___v1ew = [];
                    if (action != 'create') {
                        ___v1ew.push(' disabled');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n\t\t<div id="js_field_username_feedback" class="message">\n\t\t</div>\n\t</div>\n    ');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (role == 'admin') {
                        ___v1ew.push('\n\t<div class="input text required">\n\t\t<label for="js_field_role_id">');
                        ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                            return __('Role');
                        }));
                        ___v1ew.push('</label>\n\t\t<div id="js_field_role_id">\n\t\t\t<input name="passbolt.model.User.role_id" value="');
                        ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                            return cakephpConfig.roles.admin;
                        }));
                        ___v1ew.push('" type="checkbox" ', can.view.pending({ scope: this }), '/>');
                        ___v1ew.push('\n\t\t\t<span>This user is an administrator</span>\n\t\t</div>\n\t\t');
                        ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                            var ___v1ew = [];
                            if (action == 'create') {
                                ___v1ew.push('\n\t\t<div class="message helptext">Note: Administrators can add and delete users. They can also create groups and assign group managers. Admin can not see all passwords.</div>\n\t\t');
                            }
                            ;
                            return ___v1ew.join('');
                        }));
                        ___v1ew.push('\n\t\t<div id="js_field_role_id_feedback" class="message">\n\t\t</div>\n\t</div>\n    ');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</div>\n<div class="submit-wrapper clearfix">\n    <input type="submit" class="button primary" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('save');
                }));
                ___v1ew.push('" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    <a class="js-dialog-cancel cancel">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return __('cancel');
                }));
                ___v1ew.push('</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/user/create*/
define('app/form/user/create', [
    'exports',
    'passbolt-mad/form/element/checkbox',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox',
    'app/model/user',
    'app/view/template/form/user/create.ejs!'
], function (exports, _checkbox, _feedback, _form, _textbox, _user, _create) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _checkbox2 = _interopRequireDefault(_checkbox);
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _user2 = _interopRequireDefault(_user);
    var _create2 = _interopRequireDefault(_create);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.user.Create', {
        defaults: {
            action: 'create',
            template: _create2.default
        }
    }, {
        afterStart: function afterStart() {
            this.options.data.User = this.options.data.User || {};
            var isAdmin = _user2.default.getCurrent().Role.name == 'admin' ? true : false;
            var editingOwnProfile = false;
            if (this.options.data != undefined && this.options.data.id == _user2.default.getCurrent().id) {
                editingOwnProfile = true;
            }
            this.addElement(new _textbox2.default($('#js_field_first_name'), { modelReference: 'passbolt.model.User.Profile.first_name' }).start(), new _feedback2.default($('#js_field_first_name_feedback'), {}).start());
            this.addElement(new _textbox2.default($('#js_field_last_name'), { modelReference: 'passbolt.model.User.Profile.last_name' }).start(), new _feedback2.default($('#js_field_last_name_feedback'), {}).start());
            if (isAdmin === true) {
                var roles = {};
                roles[cakephpConfig.roles.admin] = __('This user is an administrator');
                roles[cakephpConfig.roles.user] = __('This user is a normal user');
                var valueClasses = {};
                valueClasses[cakephpConfig.roles.admin] = 'role-admin';
                valueClasses[cakephpConfig.roles.user] = 'role-user';
                this.options.role = new _checkbox2.default($('#js_field_role_id'), {
                    name: 'role_id',
                    modelReference: 'passbolt.model.User.role_id',
                    availableValues: roles,
                    valueClasses: valueClasses
                }).start();
                this.addElement(this.options.role, new _feedback2.default($('#js_field_role_id_feedback'), {}).start());
                this.options.role.setValue(cakephpConfig.roles.user);
                $('input[type=checkbox]', $('#js_field_role_id')).not('[value=\'' + cakephpConfig.roles.admin + '\']').hide().next('label').hide();
                if (editingOwnProfile == true) {
                    $('input[type=checkbox]', $('#js_field_role_id')).attr('disabled', true);
                    $('#js_field_role_id').parent().addClass('disabled');
                }
            }
            this.addElement(new _textbox2.default($('#js_field_username'), { modelReference: 'passbolt.model.User.username' }).start(), new _feedback2.default($('#js_field_username_feedback'), {}).start());
            this.on();
        },
        '{role.element} changed': function roleElementChanged(el, ev, val) {
            var adminSelected = $.inArray(cakephpConfig.roles.admin, val.value);
            if (adminSelected !== -1) {
                this.options.role.setValue(cakephpConfig.roles.admin);
            } else {
                this.options.role.setValue(cakephpConfig.roles.user);
            }
        }
    });
    exports.default = CreateForm;
});
/*app/view/template/component/settings/workspace.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/settings/workspace.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_settings_workspace_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="js_settings_workspace">\n    <div class="panel left">\n        <div class="navigation first">\n            <ul id="js_wk_settings_menu" class="clearfix">\n            </ul>\n        </div>\n    </div>\n    <div class="panel middle">\n\t\t<div id="js_wsp_settings_breadcrumb" class="breadcrumbs">\n\t\t</div>\n\t\t<div id="js_wk_settings_main">\n\t\t</div>\n    </div>\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/settings/workspace*/
define('app/component/settings/workspace', [
    'exports',
    'passbolt-mad/model/action',
    'app/form/user/edit_avatar',
    'app/component/settings/workspace_breadcrumb',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/dialog',
    'app/component/gpgkey/keys',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu',
    'app/component/settings/workspace_primary_menu',
    'app/component/profile/profile',
    'passbolt-mad/component/tab',
    'app/model/user',
    'app/form/user/create',
    'app/view/template/component/settings/workspace.ejs!'
], function (exports, _action, _edit_avatar, _workspace_breadcrumb, _component, _component3, _dialog, _keys, _bus, _menu, _workspace_primary_menu, _profile, _tab, _user, _create, _workspace) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _edit_avatar2 = _interopRequireDefault(_edit_avatar);
    var _workspace_breadcrumb2 = _interopRequireDefault(_workspace_breadcrumb);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _keys2 = _interopRequireDefault(_keys);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    var _profile2 = _interopRequireDefault(_profile);
    var _tab2 = _interopRequireDefault(_tab);
    var _user2 = _interopRequireDefault(_user);
    var _create2 = _interopRequireDefault(_create);
    var _workspace2 = _interopRequireDefault(_workspace);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SettingsWorkspaceComponent = _component2.default.extend('passbolt.component.settings.Workspace', {
        defaults: {
            name: 'settings_workspace',
            template: _workspace2.default,
            sections: [
                'profile',
                'keys'
            ],
            silentLoading: false
        }
    }, {
        afterStart: function afterStart() {
            this._initPrimaryMenu();
            this._initPrimarySidebar();
            this._initBreadcrumb();
            this._initTabs();
        },
        destroy: function destroy() {
            $('#js_wsp_primary_menu_wrapper').empty();
            $('#js_wsp_settings_breadcrumb').empty();
            this._super();
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var menu = _component4.default.create($('#js_wsp_primary_menu_wrapper'), 'last', _workspace_primary_menu2.default, {});
            menu.start();
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var component = new _workspace_breadcrumb2.default($('#js_wsp_settings_breadcrumb'), {});
            component.start();
            component.load();
        },
        _initPrimarySidebar: function _initPrimarySidebar() {
            var menu = new _menu2.default('#js_wk_settings_menu', {});
            menu.start();
            this.options.primarySidebarMenu = menu;
            var profileItem = new _action2.default({
                id: uuid(),
                name: 'profile',
                label: __('My profile'),
                action: function action() {
                    _bus2.default.trigger('request_settings_section', 'profile');
                }
            });
            menu.insertItem(profileItem);
            this.options.primarySidebarProfileItem = profileItem;
            var keysItem = new _action2.default({
                id: uuid(),
                name: 'keys',
                label: __('Manage your keys'),
                action: function action() {
                    _bus2.default.trigger('request_settings_section', 'keys');
                }
            });
            menu.insertItem(keysItem);
            this.options.primarySidebarKeysItem = keysItem;
        },
        _initTabs: function _initTabs() {
            var tabs = new _tab2.default('#js_wk_settings_main', { autoMenu: false });
            tabs.start();
            this.settingsTabsCtl = tabs;
            tabs.addComponent(_profile2.default, {
                id: 'js_settings_wk_profile_controller',
                label: 'profile',
                user: _user2.default.getCurrent()
            });
            tabs.addComponent(_keys2.default, {
                id: 'js_settings_wk_profile_keys_controller',
                label: 'keys'
            });
        },
        openEditUserDialog: function openEditUserDialog(user) {
            var self = this;
            var dialog = new _dialog2.default(null, {
                label: __('Edit profile'),
                cssClasses: [
                    'edit-profile-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var form = dialog.add(_create2.default, {
                data: user,
                action: 'edit',
                callbacks: {
                    submit: function submit(data) {
                        user.attr(data['passbolt.model.User']);
                        self._saveUser(user, form, dialog);
                    }
                }
            });
            form.load(user);
        },
        _saveUser: function _saveUser(user, form, dialog) {
            user.save().then(function () {
                dialog.remove();
            }, function (v) {
                form.showErrors(JSON.parse(v.responseText)['body']);
            });
        },
        openEditAvatarDialog: function openEditAvatarDialog(user) {
            var _this = this;
            var dialog = new _dialog2.default(null, { label: __('Edit Avatar') }).start();
            var form = dialog.add(_edit_avatar2.default, {
                data: user,
                callbacks: {
                    submit: function submit() {
                        return _this._saveAvatar(user, dialog);
                    }
                }
            });
            form.load(user);
        },
        _saveAvatar: function _saveAvatar(user, dialog) {
            var $fileField = $('#js_field_avatar');
            user.saveAvatar($fileField[0].files[0]);
            dialog.remove();
        },
        '{mad.bus.element} request_profile_edition': function madBusElementRequest_profile_edition(el, ev) {
            var user = _user2.default.getCurrent();
            this.openEditUserDialog(user);
        },
        '{mad.bus.element} request_profile_avatar_edition': function madBusElementRequest_profile_avatar_edition(el, ev, user) {
            this.openEditAvatarDialog(user);
        },
        '{mad.bus.element} request_settings_section': function madBusElementRequest_settings_section(el, ev, section) {
            var tabId = null, menuItem = null, menu = this.options.primarySidebarMenu;
            switch (section) {
            case 'keys':
                tabId = 'js_settings_wk_profile_keys_controller';
                menuItem = this.options.primarySidebarKeysItem;
                break;
            case 'profile':
                tabId = 'js_settings_wk_profile_controller';
                menuItem = this.options.primarySidebarProfileItem;
                break;
            }
            this.settingsTabsCtl.enableTab(tabId);
            $('#container').removeClass(this.options.sections.join(' ')).addClass(section);
            menu.selectItem(menuItem);
        },
        stateReady: function stateReady(go) {
            _bus2.default.trigger('request_settings_section', 'profile');
        },
        stateDisabled: function stateDisabled(go) {
            this._super(go);
            $('#container').removeClass(this.options.sections.join(' '));
        },
        stateHidden: function stateHidden(go) {
            this._super(go);
            $('#container').removeClass(this.options.sections.join(' '));
        }
    });
    exports.default = SettingsWorkspaceComponent;
});
/*app/component/user/workspace_breadcrumb*/
define('app/component/user/workspace_breadcrumb', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/component',
    'app/model/filter',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu',
    'app/view/template/component/breadcrumb/breadcrumb.ejs!',
    'app/view/template/component/breadcrumb/breadcrumb_item.ejs!'
], function (exports, _action, _component, _filter, _bus, _menu, _breadcrumb, _breadcrumb_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _filter2 = _interopRequireDefault(_filter);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    var _breadcrumb2 = _interopRequireDefault(_breadcrumb);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceBreadcrumb = _component2.default.extend('passbolt.component.user.WorkspaceBreadcrumb', {
        defaults: {
            template: _breadcrumb2.default,
            status: 'hidden',
            rootFilter: null
        }
    }, {
        afterStart: function afterStart() {
            var menuSelector = '#' + this.getId() + ' ul';
            this.options.menu = new _menu2.default(menuSelector, { itemTemplate: _breadcrumb_item2.default });
            this.options.menu.start();
        },
        parseFilter: function parseFilter(filter) {
            var menuItems = [], keywords = filter.getRule('keywords');
            var menuItem = new _action2.default({
                id: uuid(),
                label: __('All users'),
                filter: this.options.rootFilter
            });
            menuItems.push(menuItem);
            if (keywords && keywords != '') {
                var menuItem = new _action2.default({
                    id: uuid(),
                    label: __('Search : %s', keywords)
                });
                menuItems.push(menuItem);
            } else if (filter.id != 'default') {
                var menuItem = new _action2.default({
                    id: uuid(),
                    label: filter.label
                });
                menuItems.push(menuItem);
            }
            return menuItems;
        },
        load: function load(filter) {
            var menuItems = this.parseFilter(filter);
            this.options.menu.reset();
            this.options.menu.load(menuItems);
        },
        ' item_selected': function item_selected(el, ev, item) {
            if (item.filter) {
                _bus2.default.trigger('filter_workspace', item.filter);
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(element, evt, filter) {
            this.options.menu.reset();
            var menuItems = this.parseFilter(filter);
            this.options.menu.load(menuItems);
        }
    });
    exports.default = WorkspaceBreadcrumb;
});
/*passbolt-mad/view/component/button_dropdown*/
define('passbolt-mad/view/component/button_dropdown', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ButtonDropdown = _view2.default.extend('mad.view.component.ButtonDropdown', {}, {
        getDropdownContentElement: function getDropdownContentElement() {
            var contentElement = this.getController().options.contentElement;
            if (contentElement != null) {
                return $(contentElement);
            } else {
                return this.element.next();
            }
        },
        open: function open() {
            this.element.addClass('pressed');
            var $contentElement = this.getDropdownContentElement();
            $contentElement.addClass('visible');
            this.getController().state.addState('open');
        },
        close: function close() {
            this.element.removeClass('pressed');
            var $contentElement = this.getDropdownContentElement();
            $contentElement.removeClass('visible');
            if (this.getController().state.is('open'))
                this.getController().state.removeState('open');
        },
        'click': function click(el, ev) {
            if (this.getController().state.is('disabled')) {
                return false;
            }
            if (!this.getController().state.is('open')) {
                this.open();
            } else {
                this.close();
            }
            return false;
        },
        '{document} click': function documentClick(el, ev) {
            if (!this.element.is(el)) {
                this.close();
            }
        }
    });
    exports.default = ButtonDropdown;
});
/*passbolt-mad/view/template/component/button_dropdown/button_dropdown.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/button_dropdown/button_dropdown.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_button_dropdown_button_dropdown_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="dropdown">\n\t<a>\n\t\t<span>more</span>\n\t\t<i class="fa fa-fw fa-caret-down"></i>\n\t</a>\n\t<ul class="dropdown-content">\n\t\t<li><a>submenu1</a></li>\n\t\t<li><a>submenu2</a></li>\n\t</ul>\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/button_dropdown*/
define('passbolt-mad/component/button_dropdown', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/menu',
    'passbolt-mad/view/component/button_dropdown',
    'passbolt-mad/view/template/component/button_dropdown/button_dropdown.ejs!'
], function (exports, _button, _menu, _button_dropdown, _button_dropdown3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _menu2 = _interopRequireDefault(_menu);
    var _button_dropdown2 = _interopRequireDefault(_button_dropdown);
    var _button_dropdown4 = _interopRequireDefault(_button_dropdown3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ButtonDropdown = _button2.default.extend('mad.component.ButtonDropdown', {
        defaults: {
            label: 'Button Dropdown Component',
            viewClass: _button_dropdown2.default,
            items: null,
            contentElement: null,
            closeOnItemClick: true,
            template: _button_dropdown4.default
        }
    }, {
        afterStart: function afterStart() {
            var $dropdownElement = null;
            if (this.options.contentElement == null) {
                $dropdownElement = $('<ul class="dropdown-content"></div>').insertAfter(this.element);
            } else {
                $dropdownElement = $(this.options.contentElement);
            }
            var menu = new _menu2.default($dropdownElement);
            menu.start();
            menu.load(this.options.items);
            this.options.menu = menu;
            this.on();
        },
        setItemState: function setItemState(id, stateName) {
            this.options.menu.setItemState(id, stateName);
        },
        '{menu.element} item_selected': function menuElementItem_selected(el, ev, item) {
            if (this.options.closeOnItemClick === true && !item.state.is('disabled')) {
                this.view.close();
            }
        },
        stateDisabled: function stateDisabled(go) {
            this._super(go);
            if (go) {
                this.view.close();
            }
        }
    });
    exports.default = ButtonDropdown;
});
/*passbolt-mad/view/component/confirm*/
define('passbolt-mad/view/component/confirm', [
    'exports',
    'passbolt-mad/view/component/dialog'
], function (exports, _dialog) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dialog2 = _interopRequireDefault(_dialog);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ConfirmView = _dialog2.default.extend('mad.view.component.Confirm', {}, {
        ' .js-dialog-confirm click': function jsDialogConfirmClick(el, ev) {
            ev.preventDefault();
            this.element.trigger('confirm_clicked');
        }
    });
    exports.default = ConfirmView;
});
/*passbolt-mad/view/template/component/confirm/confirm.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/confirm/confirm.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_confirm_confirm_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="dialog confirm">\n    <div class="dialog-header">\n        <h2>');
                ___v1ew.push(can.view.txt(1, 'h2', 0, this, function () {
                    return label;
                }));
                ___v1ew.push('</h2>\n        <a class="dialog-close">\n            <i class="fa fa-close"></i>\n            <span class="visuallyhidden">close</span>\n        </a>\n    </div>\n    <div class="js_dialog_content dialog-content">\n        <div class="form-content">\n            ');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (subtitle != null && subtitle != '') {
                        ___v1ew.push('\n            <p>\n                <strong>\n                    ');
                        ___v1ew.push(can.view.txt(1, 'strong', 0, this, function () {
                            return subtitle;
                        }));
                        ___v1ew.push('\n                </strong>\n            </p>\n            ');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n            <p>\n            ');
                ___v1ew.push(can.view.txt(0, 'p', 0, this, function () {
                    var ___v1ew = [];
                    if (typeof content == 'function') {
                        ___v1ew.push('\n                ');
                        ___v1ew.push(can.view.txt(0, 'p', 0, this, function () {
                            return _mad.View.render(content, this);
                        }));
                        ___v1ew.push('\n            ');
                    } else {
                        ;
                        ;
                        ___v1ew.push('\n                ');
                        ___v1ew.push(can.view.txt(1, 'p', 0, this, function () {
                            return content;
                        }));
                        ___v1ew.push('\n            ');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n            </p>\n        </div>\n    </div>\n    <div class="submit-wrapper clearfix">\n        <input type="submit" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return submitButton.label;
                }));
                ___v1ew.push('" class="button primary js-dialog-confirm ');
                ___v1ew.push(can.view.txt(true, 'input', 'class', this, function () {
                    return submitButton.cssClasses.join(' ');
                }));
                ___v1ew.push('" id="confirm-button"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n        <a class="js-dialog-cancel cancel">cancel</a>\n    </div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/confirm*/
define('passbolt-mad/component/confirm', [
    'exports',
    'passbolt-mad/component/dialog',
    'passbolt-mad/view/component/confirm',
    'passbolt-mad/view/template/component/confirm/confirm.ejs!'
], function (exports, _dialog, _confirm, _confirm3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dialog2 = _interopRequireDefault(_dialog);
    var _confirm2 = _interopRequireDefault(_confirm);
    var _confirm4 = _interopRequireDefault(_confirm3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Confirm = _dialog2.default.extend('mad.component.Confirm', {
        defaults: {
            label: 'Confirm component',
            viewClass: _confirm2.default,
            template: _confirm4.default,
            subtitle: null,
            submitButton: {
                label: __('OK'),
                cssClasses: []
            },
            content: '',
            closeAfterAction: true,
            action: null,
            viewData: {}
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            var self = this;
            this.setViewData('content', this.options.content);
            this.setViewData('subtitle', this.options.subtitle);
            this.setViewData('submitButton', this.options.submitButton);
            for (var i in this.options.viewData) {
                self.setViewData(i, this.options.viewData[i]);
            }
        },
        ' confirm_clicked': function confirm_clicked() {
            if (typeof this.options.action !== 'undefined') {
                this.options.action();
            }
            if (this.options.closeAfterAction === true) {
                mad.component.Confirm.closeLatest();
            }
        }
    });
    exports.default = Confirm;
});
/*passbolt-mad/model/grid_column*/
define('passbolt-mad/model/grid_column', [
    'exports',
    'can/map/map'
], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var GridColumn = can.Map.extend('mad.model.GridColumn', {
        define: {
            name: { type: 'string' },
            index: { type: 'string' },
            sortable: {
                type: 'boolean',
                value: false
            },
            label: {},
            css: {
                Type: Array,
                value: []
            },
            cellAdapter: {
                type: '*',
                value: null
            },
            valueAdapter: {
                type: '*',
                value: null
            }
        },
        init: function init(options) {
            this._super(options);
            if (this.sortable) {
                this.css.push('sortable');
            }
        }
    });
    exports.default = GridColumn;
});
/*passbolt-mad/view/template/component/grid/gridCell.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/grid/gridCell.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_grid_gridCell_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div title="');
                ___v1ew.push(can.view.txt(true, 'div', 'title', this, function () {
                    return cellValue;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return cellValue;
                }));
                ___v1ew.push('\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/view/component/grid*/
define('passbolt-mad/view/component/grid', [
    'exports',
    'passbolt-mad/view/view',
    'passbolt-mad/helper/html',
    'passbolt-mad/view/template/component/grid/gridCell.ejs!'
], function (exports, _view, _html, _gridCell) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    var _html2 = _interopRequireDefault(_html);
    var _gridCell2 = _interopRequireDefault(_gridCell);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Grid = _view2.default.extend('mad.view.component.Grid', {}, {
        reset: function reset() {
            $('tbody tr', this.element).remove();
        },
        hideColumn: function hideColumn(columnName) {
            $('.js_grid_column_' + columnName, this.element).hide();
        },
        showColumn: function showColumn(columnName) {
            $('.js_grid_column_' + columnName, this.element).show();
        },
        selectItem: function selectItem(item) {
            var $item = this.getItemElement(item);
            $item.addClass('selected');
        },
        unselectItem: function unselectItem(item) {
            var $item = this.getItemElement(item);
            $item.removeClass('selected');
        },
        unselectAll: function unselectAll() {
            $('tr.selected', this.element).removeClass('selected');
        },
        rightSelectItem: function rightSelectItem(item) {
        },
        hoverItem: function hoverItem(item, element, srcEvent) {
        },
        removeItem: function removeItem(item) {
            var $item = this.getItemElement(item);
            $item.remove();
        },
        hideItem: function hideItem(item) {
            var $item = this.getItemElement(item);
            $item.hide();
        },
        showItem: function showItem(item) {
            var $item = this.getItemElement(item);
            $item.show();
        },
        _renderRow: function _renderRow(item) {
            var control = this.getController(), columnModels = control.getColumnModel(), mappedItem = control.getMap().mapObject(item);
            return _view2.default.render(control.options.itemTemplate, {
                item: item,
                id: control.options.prefixItemId + mappedItem.id,
                columnModels: columnModels,
                mappedItem: mappedItem,
                cellTemplate: _gridCell2.default
            });
        },
        getItemElement: function getItemElement(item) {
            return $('#' + this.getController().options.prefixItemId + item.id, this.element);
        },
        insertItem: function insertItem(item, refItem, position) {
            position = position || 'last';
            var $item = null, $refElement = null, row = '', control = this.getController();
            switch (position) {
            case 'before':
            case 'after':
                $refElement = this.getItemElement(refItem);
                if (!$refElement.length) {
                    throw new mad.Exception('No HTMLElement found for the given item.');
                }
                break;
            default:
            case 'first':
            case 'last':
                $refElement = $('tbody', this.element);
                break;
            }
            row = this._renderRow(item);
            $item = _html2.default.create($refElement, position, row);
            can.data($item, control.getItemClass().fullName, item);
            return $item;
        },
        refreshItem: function refreshItem(item) {
            var $current = this.getItemElement(item);
            var row = this._renderRow(item);
            var $item = _html2.default.create($current, 'replace_with', row);
            can.data($item, this.getController().getItemClass().fullName, item);
        },
        moveItem: function moveItem(item, position) {
            var $el = this.getItemElement(item), $detachedEl = $el.detach(), $refEl = $('tbody tr', this.element).eq(position);
            if ($refEl.length) {
                $refEl.before($detachedEl);
            } else {
                $('tbody', this.element).append($detachedEl);
            }
        },
        markColumnAsSorted: function markColumnAsSorted(columnModel, sortAsc) {
            var cssClasses = 'sorted ';
            cssClasses += sortAsc ? 'sort-asc' : 'sort-desc';
            this.markAsUnsorted();
            $('.js_grid_column_' + columnModel.name, this.element).addClass(cssClasses);
        },
        markAsUnsorted: function markAsUnsorted() {
            $('.sortable.sorted', this.element).removeClass('sorted sort-asc sort-desc');
        },
        'thead th.sortable click': function theadThSortableClick(el, ev) {
            var columnModel = null, control = this.getController(), sortAsc = true;
            if ($(el).hasClass('sorted')) {
                if ($(el).hasClass('sort-desc')) {
                    sortAsc = true;
                } else {
                    sortAsc = false;
                }
            }
            columnModel = el.data(control.getColumnModelClass().fullName);
            this.element.trigger('column_sort', [
                columnModel,
                sortAsc,
                ev
            ]);
        },
        'tbody tr click': function tbodyTrClick(el, ev) {
            var data = null, control = this.getController(), itemClass = control.getItemClass();
            if (itemClass) {
                data = el.data(itemClass.fullName);
            } else {
                data = el[0].id.replace(control.options.prefixItemId, '');
            }
            this.element.trigger('item_selected', [
                data,
                ev
            ]);
        },
        'tbody tr hover': function tbodyTrHover(el, ev) {
            var data = null, control = this.getController(), itemClass = control.getItemClass();
            if (itemClass) {
                data = el.data(itemClass.fullName);
            } else {
                data = el[0].id.replace(control.options.prefixItemId, '');
            }
            this.element.trigger('item_hovered', [
                data,
                ev
            ]);
        }
    });
    exports.default = Grid;
});
/*passbolt-mad/view/template/component/grid/gridColumnHeader.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/grid/gridColumnHeader.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_grid_gridColumnHeader_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<th class="js_grid_column js_grid_column_');
                ___v1ew.push(can.view.txt(true, 'th', 'class', this, function () {
                    return columnModel.name;
                }));
                ___v1ew.push(' cell_');
                ___v1ew.push(can.view.txt(true, 'th', 'class', this, function () {
                    return columnModel.name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(true, 'th', 'class', this, function () {
                    return columnModel.css.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'th', 0, this, function () {
                    var ___v1ew = [];
                    if (columnModel.sortable) {
                        ___v1ew.push('\n    <a>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'a', 0, this, function () {
                    var ___v1ew = [];
                    if (typeof columnModel.label == 'function') {
                        ___v1ew.push('\n        ');
                        ___v1ew.push(can.view.txt(0, 'a', 0, this, function () {
                            return _mad.View.render(columnModel.label, this);
                        }));
                        ___v1ew.push('\n');
                    } else {
                        ;
                        ;
                        ___v1ew.push('\n        ');
                        ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                            return columnModel.label;
                        }));
                        ___v1ew.push('\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'a', 0, this, function () {
                    var ___v1ew = [];
                    if (columnModel.sortable) {
                        ___v1ew.push('\n    </a>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</th>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/view/template/component/grid/grid.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/grid/grid.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_grid_grid_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="tableview-header">\n    <table>\n        <thead>\n            <tr>\n');
                ___v1ew.push(can.view.txt(0, 'tr', 0, this, function () {
                    var ___v1ew = [];
                    for (var i in columnModel) {
                        ___v1ew.push('\n    ');
                        ___v1ew.push(can.view.txt(0, 'tr', 0, this, function () {
                            return _mad.View.render(columnHeaderTemplate, {
                                columnModel: columnModel[i],
                                control: control
                            });
                        }));
                        ___v1ew.push('\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n            </tr>\n        </thead>\n    </table>\n</div>\n<div class="tableview-content scroll">\n    <table>\n        <tbody>\n        </tbody>\n    </table>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/view/template/component/grid/gridItem.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/component/grid/gridItem.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_component_grid_gridItem_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<tr id="');
                ___v1ew.push(can.view.txt(true, 'tr', 'id', this, function () {
                    return id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'tr', 0, this, function () {
                    var ___v1ew = [];
                    for (var i in columnModels) {
                        var cellTemplateData = {
                            cellValue: mappedItem[columnModels[i].name],
                            mappedItem: mappedItem,
                            item: item,
                            columnModel: columnModels[i]
                        };
                        var template = cellTemplate;
                        if (columnModels[i].template) {
                            template = columnModels[i].template;
                        }
                        ___v1ew.push('\n\t<td class="js_grid_column_');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].name;
                        }));
                        ___v1ew.push(' cell_');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].name;
                        }));
                        ___v1ew.push(' ');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].css.join(' ');
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('\n\t\t');
                        ___v1ew.push(can.view.txt(0, 'td', 0, this, function () {
                            return _mad.View.render(template, cellTemplateData);
                        }));
                        ___v1ew.push('\n\t</td>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</tr>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/component/grid*/
define('passbolt-mad/component/grid', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/model/grid_column',
    'passbolt-mad/view/component/grid',
    'passbolt-mad/view/view',
    'passbolt-mad/view/template/component/grid/gridColumnHeader.ejs!',
    'passbolt-mad/view/template/component/grid/grid.ejs!',
    'passbolt-mad/view/template/component/grid/gridItem.ejs!'
], function (exports, _component, _grid_column, _grid, _view, _gridColumnHeader, _grid3, _gridItem) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _grid_column2 = _interopRequireDefault(_grid_column);
    var _grid2 = _interopRequireDefault(_grid);
    var _view2 = _interopRequireDefault(_view);
    var _gridColumnHeader2 = _interopRequireDefault(_gridColumnHeader);
    var _grid4 = _interopRequireDefault(_grid3);
    var _gridItem2 = _interopRequireDefault(_gridItem);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Grid = _component2.default.extend('mad.component.Grid', {
        defaults: {
            label: 'Grid Component',
            cssClasses: ['tableview'],
            tag: 'div',
            template: _grid4.default,
            columnHeaderTemplate: _gridColumnHeader2.default,
            itemTemplate: _gridItem2.default,
            viewClass: _grid2.default,
            prefixItemId: '',
            itemClass: null,
            columnModelClass: _grid_column2.default,
            columnModel: [],
            map: null,
            callbacks: {
                item_selected: null,
                item_hovered: null
            },
            items: new can.Model.List(),
            isFiltered: false,
            isSorted: false
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.options.items = new can.Model.List();
            this.mappedItems = {};
            this.on();
        },
        afterStart: function afterStart() {
            var columnModel = this.getColumnModel();
            for (var i in columnModel) {
                var el = $('th.js_grid_column_' + columnModel[i].name, this.element);
                can.data(el, this.getColumnModelClass().fullName, columnModel[i]);
            }
            this._super();
        },
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('columnModel', this.options.columnModel);
            this.setViewData('columnHeaderTemplate', this.options.columnHeaderTemplate);
            this.setViewData('items', []);
        },
        getColumnModel: function getColumnModel(name) {
            var returnValue = null;
            if (name != undefined) {
                for (var i in this.options.columnModel) {
                    if (this.options.columnModel[i].name == name) {
                        return this.options.columnModel[i];
                    }
                }
            } else {
                returnValue = this.options.columnModel;
            }
            return returnValue;
        },
        getItemClass: function getItemClass() {
            return this.options.itemClass;
        },
        getColumnModelClass: function getColumnModelClass() {
            return this.options.columnModelClass;
        },
        isFiltered: function isFiltered() {
            return this.options.isFiltered;
        },
        setItemClass: function setItemClass(itemClass) {
            this.options.itemClass = itemClass;
        },
        getMap: function getMap(map) {
            return this.options.map;
        },
        setMap: function setMap(map) {
            this.options.map = map;
        },
        selectItem: function selectItem(item) {
            this.view.selectItem(item);
        },
        rightSelectItem: function rightSelectItem(item) {
            this.view.rightSelectItem(item);
        },
        unselectItem: function unselectItem(item) {
            this.view.unselectAll();
        },
        hoverItem: function hoverItem(item) {
            this.view.hoverItem(item);
        },
        unselectAll: function unselectAll() {
            this.view.unselectAll();
        },
        removeItem: function removeItem(item) {
            this.view.removeItem(item);
            delete this.mappedItems[item.id];
        },
        insertItem: function insertItem(item, refItem, position) {
            var self = this, map = this.getMap(), mappedItem = null, columnModels = this.getColumnModel();
            if (this.getItemClass() != null && !(item instanceof this.getItemClass())) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'item');
            }
            if (map == null) {
                throw mad.Exception.get(mad.error.MISSING_OPTION, 'map');
            }
            this.options.items.push(item);
            mappedItem = this.getMap().mapObject(item);
            this.mappedItems[item.id] = mappedItem;
            this.view.insertItem(item, refItem, position);
            for (var j in columnModels) {
                var columnModel = columnModels[j];
                if (columnModel.afterRender) {
                    var itemId = self.options.prefixItemId + mappedItem.id;
                    var $cell = $('#' + itemId + ' .js_grid_column_' + columnModel.name + ' div');
                    var cellValue = mappedItem[columnModel.name];
                    columnModel.afterRender($cell, cellValue, mappedItem, item, columnModel);
                }
            }
        },
        refreshItem: function refreshItem(item) {
            this.view.refreshItem(item);
            var self = this, mappedItem = null, columnModels = this.getColumnModel();
            mappedItem = this.getMap().mapObject(item);
            this.mappedItems[item.id] = mappedItem;
            for (var j in columnModels) {
                var columnModel = columnModels[j];
                if (columnModel.afterRender) {
                    var itemId = self.options.prefixItemId + mappedItem.id;
                    var $cell = $('#' + itemId + ' .js_grid_column_' + columnModel.name + ' div');
                    var cellValue = mappedItem[columnModel.name];
                    columnModel.afterRender($cell, cellValue, mappedItem, item, columnModel);
                }
            }
        },
        reset: function reset() {
            this.options.items.splice(0, this.options.items.length);
        },
        load: function load(items) {
            var self = this;
            this.reset();
            this.options.isFiltered = false;
            this.options.isSorted = false;
            this.view.markAsUnsorted();
            can.each(items, function (item, i) {
                self.insertItem(item);
            });
            return this;
        },
        itemExists: function itemExists(item) {
            return this.view.getItemElement(item).length > 0 ? true : false;
        },
        resetFilter: function resetFilter() {
            var self = this;
            this.options.isFiltered = false;
            can.each(this.options.items, function (item, i) {
                self.view.showItem(item);
            });
        },
        filterByKeywords: function filterByKeywords(needle, options) {
            options = options || {};
            var self = this, searchInFields = [], keywords = needle.split(/\s+/), filteredItems = new can.List();
            if (typeof options.searchInFields != 'undefined') {
                searchInFields = options.searchInFields;
            } else {
                searchInFields = this.options.map.getModelTargetFieldsNames();
            }
            can.each(this.options.items, function (item, i) {
                for (var j in keywords) {
                    var found = false, field = null, i = 0;
                    while (!found && (field = searchInFields[i])) {
                        found = can.getObject(field, item).toLowerCase().indexOf(keywords[j].toLowerCase()) != -1;
                        i++;
                    }
                    if (!found) {
                        return;
                    }
                }
                filteredItems.push(item);
            });
            self.filter(filteredItems);
        },
        filter: function filter(filteredItems) {
            var self = this;
            this.options.isFiltered = true;
            can.each(this.options.items, function (item, i) {
                if (filteredItems.indexOf(item) != -1) {
                    self.view.showItem(item);
                } else {
                    self.view.hideItem(item);
                }
            });
        },
        sort: function sort(columnModel, sortAsc) {
            this.options.isSorted = true;
            var columnId = columnModel.name;
            var mappedItemsCopy = $.map(this.mappedItems, function (value, index) {
                value.id = index;
                return [value];
            });
            mappedItemsCopy.sort(function (itemA, itemB) {
                var valueA = itemA[columnId] ? itemA[columnId].toUpperCase() : '', valueB = itemB[columnId] ? itemB[columnId].toUpperCase() : '';
                if (valueA < valueB) {
                    return sortAsc ? -1 : 1;
                } else if (valueA > valueB) {
                    return sortAsc ? 1 : -1;
                }
                return 0;
            });
            for (var i in mappedItemsCopy) {
                this.moveItem(mappedItemsCopy[i], i);
            }
            this.view.markColumnAsSorted(columnModel, sortAsc);
        },
        moveItem: function moveItem(item, position) {
            this.view.moveItem(item, position);
        },
        '{items} remove': function itemsRemove(model, ev, items) {
            var self = this;
            can.each(items, function (item, i) {
                self.removeItem(item);
            });
        },
        'tbody mouseleave': function tbodyMouseleave(element, evt) {
        },
        ' column_sort': function column_sort(el, ev, columnModel, sortAsc, srcEvent) {
            this.sort(columnModel, sortAsc);
        },
        ' item_selected': function item_selected(el, ev, item, srcEvent) {
            if (this.options.callbacks.itemSelected) {
                this.options.callbacks.itemSelected(el, ev, item, srcEvent);
            }
        },
        ' item_hovered': function item_hovered(el, ev, item, srcEvent) {
            if (this.options.callbacks.itemHovered) {
                this.options.callbacks.itemHovered(el, ev, item, srcEvent);
            }
        }
    });
    exports.default = Grid;
});
/*app/component/user/grid_contextual_menu*/
define('app/component/user/grid_contextual_menu', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/contextual_menu',
    'passbolt-mad/control/bus',
    'app/model/user'
], function (exports, _action, _contextual_menu, _bus, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _bus2 = _interopRequireDefault(_bus);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GridContextualMenuComponent = _contextual_menu2.default.extend('passbolt.component.user.GridContextualMenu', { defaults: { user: null } }, {
        afterStart: function afterStart() {
            var _this = this;
            var user = this.options.user;
            var isAdmin = _user2.default.getCurrent().Role.name == 'admin';
            var isSelf = _user2.default.getCurrent().id == user.id;
            var copyPublicKeyItem = new _action2.default({
                id: 'js_user_browser_menu_copy_key',
                label: 'Copy public key',
                action: function action() {
                    return _this._copyPublicKey();
                }
            });
            this.insertItem(copyPublicKeyItem);
            var copyEmailItem = new _action2.default({
                id: 'js_user_browser_menu_copy_email',
                label: 'Copy email address',
                cssClasses: isAdmin ? ['separator-after'] : [],
                action: function action() {
                    return _this._copyEmail();
                }
            });
            this.insertItem(copyEmailItem);
            if (isAdmin) {
                var action = new _action2.default({
                    id: 'js_user_browser_menu_edit',
                    label: 'Edit',
                    action: function action() {
                        return _this._edit();
                    }
                });
                this.insertItem(action);
            }
            if (isAdmin && !isSelf) {
                var action = new _action2.default({
                    id: 'js_user_browser_menu_delete',
                    label: 'Delete',
                    action: function action() {
                        return _this._delete();
                    }
                });
                this.insertItem(action);
            }
            this._super();
        },
        _copyPublicKey: function _copyPublicKey() {
            var data = {
                name: 'public key',
                data: this.options.user.Gpgkey.armored_key
            };
            _bus2.default.trigger('passbolt.clipboard', data);
            this.remove();
        },
        _copyEmail: function _copyEmail() {
            var data = {
                name: 'email',
                data: this.options.user.username
            };
            _bus2.default.trigger('passbolt.clipboard', data);
            this.remove();
        },
        _edit: function _edit() {
            _bus2.default.trigger('request_user_edition', this.options.user);
            this.remove();
        },
        _delete: function _delete() {
            _bus2.default.trigger('request_user_deletion', this.options.user);
            this.remove();
        }
    });
    exports.default = GridContextualMenuComponent;
});
/*app/view/component/user/grid*/
define('app/view/component/user/grid', [
    'exports',
    'passbolt-mad/view/component/grid'
], function (exports, _grid) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _grid2 = _interopRequireDefault(_grid);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserGridView = _grid2.default.extend('passbolt.view.component.user.Grid', {}, {
        'tbody tr contextmenu': function tbodyTrContextmenu(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            return false;
        },
        'tbody tr mousedown': function tbodyTrMousedown(el, ev) {
            var self = this;
            ev.stopPropagation();
            ev.preventDefault();
            if (ev.which == 3) {
                var data = null, tr = el;
                if (this.getController().getItemClass()) {
                    data = tr.data(this.getController().getItemClass().fullName);
                } else {
                    data = tr[0].id;
                }
                setTimeout(function () {
                    self.element.trigger('item_right_selected', [
                        data,
                        ev
                    ]);
                }, 0);
            }
            return false;
        }
    });
    exports.default = UserGridView;
});
/*app/view/template/component/user/grid/cell_avatar.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/grid/cell_avatar.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_grid_cell_avatar_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(item.Profile.avatarPath('small'));
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="');
                ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                    return __('Picture of: %s', mappedItem.Profile.fullName());
                }));
                ___v1ew.push('" width="30" height="30"', can.view.pending({ scope: this }), '>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/user/grid/column_header_select.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/grid/column_header_select.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_grid_column_header_select_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="input checkbox">\n    <input type="checkbox" name="select all" value="checkbox-select-all" id="checkbox-select-all-people" disabled="disabled">\n    <label for="checkbox-select-all-people">');
                ___v1ew.push(' __(\'select all\')</label>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/user/gridItem.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/gridItem.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_gridItem_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<tr id="');
                ___v1ew.push(can.view.txt(true, 'tr', 'id', this, function () {
                    return id;
                }));
                ___v1ew.push('" class="');
                ___v1ew.push(can.view.txt(true, 'tr', 'class', this, function () {
                    return item.active == '0' ? 'inactive' : '';
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'tr', 0, this, function () {
                    var ___v1ew = [];
                    for (var i in columnModels) {
                        var cellTemplateData = {
                            cellValue: mappedItem[columnModels[i].name],
                            mappedItem: mappedItem,
                            item: item,
                            columnModel: columnModels[i]
                        };
                        var template = cellTemplate;
                        if (columnModels[i].template) {
                            template = columnModels[i].template;
                        }
                        ___v1ew.push('\n    <td class="js_grid_column_');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].name;
                        }));
                        ___v1ew.push(' cell_');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].name;
                        }));
                        ___v1ew.push(' ');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].css.join(' ');
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('\n        ');
                        ___v1ew.push(can.view.txt(0, 'td', 0, this, function () {
                            return _mad.View.render(template, cellTemplateData);
                        }));
                        ___v1ew.push('\n    </td>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</tr>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/user/grid*/
define('app/component/user/grid', [
    'exports',
    'moment',
    'passbolt-mad/form/element/checkbox',
    'app/util/common',
    'passbolt-mad/helper/component',
    'app/model/filter',
    'passbolt-mad/model/grid_column',
    'passbolt-mad/component/grid',
    'app/component/user/grid_contextual_menu',
    'app/model/group',
    'passbolt-mad/model/list',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/model/profile',
    'app/model/user',
    'app/view/component/user/grid',
    'app/view/template/component/user/grid/cell_avatar.ejs!',
    'app/view/template/component/user/grid/column_header_select.ejs!',
    'app/view/template/component/user/gridItem.ejs!'
], function (exports, _moment, _checkbox, _common, _component, _filter, _grid_column, _grid, _grid_contextual_menu, _group, _list, _bus, _map, _profile, _user, _grid3, _cell_avatar, _column_header_select, _gridItem) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _moment2 = _interopRequireDefault(_moment);
    var _checkbox2 = _interopRequireDefault(_checkbox);
    var _common2 = _interopRequireDefault(_common);
    var _component2 = _interopRequireDefault(_component);
    var _filter2 = _interopRequireDefault(_filter);
    var _grid_column2 = _interopRequireDefault(_grid_column);
    var _grid2 = _interopRequireDefault(_grid);
    var _grid_contextual_menu2 = _interopRequireDefault(_grid_contextual_menu);
    var _group2 = _interopRequireDefault(_group);
    var _list2 = _interopRequireDefault(_list);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _profile2 = _interopRequireDefault(_profile);
    var _user2 = _interopRequireDefault(_user);
    var _grid4 = _interopRequireDefault(_grid3);
    var _cell_avatar2 = _interopRequireDefault(_cell_avatar);
    var _column_header_select2 = _interopRequireDefault(_column_header_select);
    var _gridItem2 = _interopRequireDefault(_gridItem);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserGridComponent = _grid2.default.extend('passbolt.component.user.Grid', {
        defaults: {
            itemClass: _user2.default,
            viewClass: _grid4.default,
            groups: [],
            selectedUsers: new can.Model.List(),
            prefixItemId: 'user_',
            silentLoading: false,
            itemTemplate: _gridItem2.default
        }
    }, {
        filterSettings: null,
        init: function init(el, options) {
            options.map = this._getMap();
            options.columnModel = this._getGridColumns();
            this._super(el, options);
        },
        _getMap: function _getMap() {
            return new _map2.default({
                id: 'id',
                name: {
                    key: 'Profile',
                    func: function func(profile) {
                        return profile.fullName();
                    }
                },
                username: 'username',
                modified: {
                    key: 'modified',
                    func: function func(value, item, item2) {
                        return _common2.default.datetimeGetTimeAgo(value);
                    }
                },
                last_logged_in: {
                    key: 'last_logged_in',
                    func: function func(value) {
                        if (value) {
                            return _common2.default.datetimeGetTimeAgo(value);
                        }
                        return __('never');
                    }
                },
                active: 'active',
                Group: 'Group',
                Profile: 'Profile'
            });
        },
        _getGridColumns: function _getGridColumns() {
            var columns = [];
            var selectColumn = new _grid_column2.default({
                name: 'multipleSelect',
                index: 'multipleSelect',
                css: ['selections s-cell'],
                label: _column_header_select2.default,
                afterRender: this._initSelectColumnComponent
            });
            columns.push(selectColumn);
            var avatarColumn = new _grid_column2.default({
                name: 'avatar',
                index: 'Profile',
                css: ['s-cell'],
                label: '',
                template: _cell_avatar2.default
            });
            columns.push(avatarColumn);
            var nameColumn = new _grid_column2.default({
                name: 'name',
                index: 'Profile',
                css: ['m-cell'],
                label: __('User'),
                sortable: true
            });
            columns.push(nameColumn);
            var usernameColumn = new _grid_column2.default({
                name: 'username',
                index: 'username',
                css: ['m-cell'],
                label: __('Username'),
                sortable: true
            });
            columns.push(usernameColumn);
            var modifiedColumn = new _grid_column2.default({
                name: 'modified',
                index: 'modified',
                css: ['m-cell'],
                label: __('Modified'),
                sortable: true
            });
            columns.push(modifiedColumn);
            var loggedInColumn = new _grid_column2.default({
                name: 'last_logged_in',
                index: 'last_logged_in',
                css: ['m-cell'],
                label: __('Last logged in'),
                sortable: true
            });
            columns.push(loggedInColumn);
            return columns;
        },
        _initSelectColumnComponent: function _initSelectColumnComponent(cellElement, cellValue, mappedItem, item, columnModel) {
            var availableValues = {};
            availableValues[item.id] = '';
            var checkbox = _component2.default.create(cellElement, 'inside_replace', _checkbox2.default, {
                id: 'multiple_select_checkbox_' + item.id,
                cssClasses: ['js_checkbox_multiple_select'],
                availableValues: availableValues
            });
            checkbox.start();
        },
        showContextualMenu: function showContextualMenu(user, x, y) {
            var contextualMenu = new _grid_contextual_menu2.default(null, {
                state: 'hidden',
                user: user,
                coordinates: {
                    x: x,
                    y: y
                }
            });
            contextualMenu.start();
            contextualMenu.setState('ready');
        },
        refreshItem: function refreshItem(item) {
            if (!this.itemExists(item)) {
                return;
            }
            this._super(item);
            if (this.options.selectedUsers.length > 0) {
                this.select(this.options.selectedUsers[0]);
            }
        },
        removeItem: function removeItem(item) {
            this._super(item);
        },
        reset: function reset() {
            this.filtered = false;
            this.filterSettings = null;
            var sortedColumnModel = this.getColumnModel('name');
            this.view.markColumnAsSorted(sortedColumnModel, true);
            this._super();
        },
        beforeSelect: function beforeSelect(item) {
            var returnValue = true;
            if (this.state.is('selection')) {
                if (this.options.selectedUsers.length > 0 && this.options.selectedUsers[0].id == item.id) {
                    this.unselect(item);
                    this.setState('ready');
                    returnValue = false;
                } else {
                    for (var i = this.options.selectedUsers.length - 1; i > -1; i--) {
                        this.unselect(this.options.selectedUsers[i]);
                    }
                }
            }
            return returnValue;
        },
        select: function select(item) {
            if (!this.itemExists(item)) {
                return;
            }
            if (!this.state.is('multipleSelection') && this.options.selectedUsers.length > 0) {
                this.unselect(this.options.selectedUsers[0]);
            }
            this.options.selectedUsers.push(item);
            var checkbox = mad.getControl('multiple_select_checkbox_' + item.id, 'mad.form.Checkbox');
            checkbox.setValue([item.id]);
            this.view.selectItem(item);
            _bus2.default.trigger('user_selected', item);
        },
        beforeUnselect: function beforeUnselect(item) {
            var returnValue = true;
            return returnValue;
        },
        unselect: function unselect(item, silent) {
            silent = typeof silent == 'undefined' ? false : silent;
            if (!this.itemExists(item)) {
                return;
            }
            var controlId = 'multiple_select_checkbox_' + item.id, checkbox = mad.getControl(controlId, 'mad.form.Checkbox');
            checkbox.reset();
            this.view.unselectItem(item);
            _list2.default.remove(this.options.selectedUsers, item);
            if (!silent) {
                _bus2.default.trigger('user_unselected', item);
            }
        },
        filterBySettings: function filterBySettings(filter) {
            var self = this, def = null;
            if (!this.filterSettings || this.filterSettings.id !== filter.id) {
                this.setState('loading');
                this.reset();
                var findOptions = {
                    silentLoading: false,
                    filter: filter.getRules(['keywords']),
                    order: filter.getOrders(),
                    contain: { LastLoggedIn: 1 }
                };
                def = _user2.default.findAll(findOptions).then(function (users, response, request) {
                    if (self.element == null)
                        return;
                    self.load(users);
                    self.setState('ready');
                    if (!users.length) {
                        self.state.addState('empty');
                    }
                    if (filter.order) {
                        var sortedColumnModel = self.getColumnModel(filter.order);
                        if (sortedColumnModel) {
                            self.view.markColumnAsSorted(sortedColumnModel, true);
                        }
                    }
                });
            }
            $.when(def).done(function () {
                self.filterSettings = filter;
                var orders = filter.getOrders();
                if (orders && orders[0]) {
                    var matches = /((\w*)\.)?(\w*)\s*(asc|desc|ASC|DESC)?/i.exec(orders[0]), modelName = matches[2], fieldName = matches[3], sortWay = matches[4] ? matches[4].toLowerCase() : 'asc';
                    if (fieldName) {
                        if (fieldName === 'last_name' || fieldName === 'first_name') {
                            fieldName = 'name';
                        }
                        var sortedColumnModel = self.getColumnModel(fieldName);
                        if (sortedColumnModel) {
                            self.view.markColumnAsSorted(sortedColumnModel, sortWay === 'asc');
                        }
                    }
                }
                var keywords = filter.getRule('keywords');
                if (keywords && keywords != '') {
                    self.filterByKeywords(keywords, {
                        searchInFields: [
                            'username',
                            'Role.name',
                            'Profile.first_name',
                            'Profile.last_name'
                        ]
                    });
                } else if (self.isFiltered()) {
                    self.resetFilter();
                }
            });
        },
        '{passbolt.model.User} created': function passboltModelUserCreated(model, ev, user) {
            var self = this;
            self.insertItem(user, null, 'first');
            return false;
        },
        '{passbolt.model.User} updated': function passboltModelUserUpdated(model, ev, user) {
            if (this.options.items.indexOf(user) != -1) {
                this.refreshItem(user);
            }
        },
        '{users} remove': function usersRemove(model, ev, users) {
            var self = this;
            can.each(users, function (user, i) {
                self.removeItem(user);
            });
        },
        '{passbolt.model.GroupUser} destroyed': function passboltModelGroupUserDestroyed(model, ev, groupUser) {
            for (i in this.options.items) {
                if (this.options.items[i].id == groupUser.user_id) {
                    break;
                }
            }
            this.options.items.splice(i, 1);
            for (i in this.options.selectedUsers) {
                if (this.options.selectedUsers[i].id == groupUser.user_id) {
                    this.options.selectedUsers.splice(i, 1);
                }
            }
        },
        '{passbolt.model.Group} updated': function passboltModelGroupUpdated(el, ev, group) {
            var filterId = 'workspace_filter_group_' + group.id;
            var regExp = new RegExp('^' + filterId);
            if (this.filterSettings != null && this.filterSettings.id.match(regExp)) {
                this.reset();
                var filter = new _filter2.default({
                    id: filterId,
                    label: group.name + __(' (group)'),
                    rules: { 'has-groups': group.id },
                    order: ['Profile.last_name ASC']
                });
                _bus2.default.trigger('filter_workspace', filter);
            }
        },
        ' item_selected': function item_selected(el, ev, item, srcEvent) {
            this.setState('selection');
            if (this.beforeSelect(item)) {
                this.select(item);
            }
        },
        ' item_right_selected': function item_right_selected(el, ev, item, srcEvent) {
            this.select(item);
            var $item = $('#' + this.options.prefixItemId + item.id);
            var itemOffset = $item.offset();
            this.showContextualMenu(item, srcEvent.pageX - 3, itemOffset.top);
        },
        '.js_checkbox_multiple_select checked': function js_checkbox_multiple_selectChecked(el, ev, userId) {
            if (this.state.is('ready')) {
                this.setState('selection');
            }
            var i = _list2.default.indexOf(this.options.items, userId);
            var user = this.options.items[i];
            if (this.beforeSelect(user)) {
                this.select(user);
            }
        },
        '.js_checkbox_multiple_select unchecked': function js_checkbox_multiple_selectUnchecked(el, ev, userId) {
            var self = this;
            var i = _list2.default.indexOf(this.options.items, userId);
            var user = this.options.items[i];
            if (this.beforeUnselect()) {
                self.unselect(user);
            }
            if (!this.options.selectedUsers.length) {
                this.setState('ready');
            } else if (this.options.selectedUsers.length == 1) {
                this.setState('selection');
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(element, evt, filter) {
            this.filterBySettings(filter);
        },
        '{selectedUsers} remove': function selectedUsersRemove(el, ev, items) {
            for (var i in items) {
                this.unselect(items[i]);
            }
        },
        stateReady: function stateReady(go) {
        },
        stateSelection: function stateSelection(go) {
        },
        stateMultipleSelection: function stateMultipleSelection(go) {
        }
    });
    exports.default = UserGridComponent;
});
/*passbolt-mad/view/form/element/dropdown*/
define('passbolt-mad/view/form/element/dropdown', [
    'exports',
    'passbolt-mad/view/form/element'
], function (exports, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Dropdown = _element2.default.extend('mad.view.form.Dropdown', {}, {
        getValue: function getValue(value) {
            return this.element.val();
        },
        setValue: function setValue(value) {
            this.element.val(value);
        },
        change: function change(el, event) {
            el.trigger('changed', { value: this.getValue() });
        }
    });
    exports.default = Dropdown;
});
/*passbolt-mad/view/template/form/dropdown.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('passbolt-mad/view/template/form/dropdown.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('passbolt-mad_view_template_form_dropdown_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    if (controller.options.emptyValue) {
                        ___v1ew.push('\n<option value=""', can.view.pending({ scope: this }), '>');
                        ___v1ew.push(can.view.txt(1, 'option', 0, this, function () {
                            return __('select a value');
                        }));
                        ___v1ew.push('</option>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    for (var value in availableValues) {
                        ___v1ew.push('\n<option value="');
                        ___v1ew.push(can.view.txt(true, 'option', 'value', this, function () {
                            return value;
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push(can.view.txt(0, 'option', 0, this, function () {
                            return availableValues[value];
                        }));
                        ___v1ew.push('</option>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*passbolt-mad/form/element/dropdown*/
define('passbolt-mad/form/element/dropdown', [
    'exports',
    'passbolt-mad/form/choice_element',
    'passbolt-mad/view/form/element/dropdown',
    'passbolt-mad/view/template/form/dropdown.ejs!'
], function (exports, _choice_element, _dropdown, _dropdown3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _choice_element2 = _interopRequireDefault(_choice_element);
    var _dropdown2 = _interopRequireDefault(_dropdown);
    var _dropdown4 = _interopRequireDefault(_dropdown3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Dropdown = _choice_element2.default.extend('mad.form.Dropdown', {
        defaults: {
            label: 'DropDown Form Element',
            tag: 'div',
            template: _dropdown4.default,
            viewClass: _dropdown2.default,
            emptyValue: true
        }
    }, {});
    exports.default = Dropdown;
});
/*app/view/component/group/edit*/
define('app/view/component/group/edit', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditView = _view2.default.extend('passbolt.view.component.group.Edit', {}, {
        ' .js_group_user_delete click': function js_group_user_deleteClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var li = el.parents('li');
            var groupUser = li.data('passbolt.model.GroupUser');
            this.element.trigger('request_group_user_delete', [groupUser]);
        },
        ' .js_group_user_is_admin changed': function js_group_user_is_adminChanged(el, ev, data) {
            ev.stopPropagation();
            ev.preventDefault();
            var li = el.parents('li'), groupUser = li.data('passbolt.model.GroupUser');
            this.element.trigger('request_group_user_edit', [
                groupUser,
                data.value
            ]);
        }
    });
    exports.default = EditView;
});
/*app/view/template/form/group/create.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/form/group/create.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_group_create_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                var role = passbolt.model.User.getCurrent().Role.name;
                ;
                ;
                ___v1ew.push('\n');
                var user = this.controller.options.data;
                ;
                ;
                ___v1ew.push('\n<div class="form-content">\n    <div class="input text required clearfix js_form_element_wrapper">\n        <label for="js_field_name">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Group name');
                }));
                ___v1ew.push('</label>\n        <input name="passbolt.model.Group.name" class="required" maxlength="50" type="text" id="js_field_name" placeholder="group name"/>\n        <div id="js_field_name_feedback" class="message">\n        </div>\n    </div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/group/create*/
define('app/form/group/create', [
    'exports',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox',
    'app/view/template/form/group/create.ejs!'
], function (exports, _feedback, _form, _textbox, _create) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _create2 = _interopRequireDefault(_create);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.group.Create', {
        defaults: {
            action: 'create',
            template: _create2.default,
            cssClasses: ['group_edit_form'],
            canUpdateName: true
        }
    }, {
        afterStart: function afterStart() {
            var nameField = this.addElement(new _textbox2.default($('#js_field_name'), { modelReference: 'passbolt.model.Group.name' }).start(), new _feedback2.default($('#js_field_name_feedback'), {}).start());
            if (this.options.canUpdateName == false) {
                $('#js_field_name').attr('disabled', 'disabled');
            }
            this.on();
        }
    });
    exports.default = CreateForm;
});
/*app/view/template/component/group/edit.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group/edit.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_edit_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<form id="js_group_edit_form"></form>\n<div id="js_group_members" class="group_members">\n    <div class="form-content">\n        <div class="input required">\n            <label for="js_field_group_permission">Group members</label>\n        </div>\n    </div>\n    <div class="form-content permission-edit">\n        <ul id="js_permissions_list" class="permissions scroll">\n        </ul>\n        <div class="message warning feedback hidden"></div>\n    </div>\n</div>\n<div id="js_group_members_add" class="js_plugin_group_edit_wrapper permission-add">\n    <div id="passbolt-group-edit-autocomplete-wrapper"></div>\n</div>\n<div class="submit-wrapper clearfix">\n    <a class="button primary" id="js_group_save">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return __('save');
                }));
                ___v1ew.push('</a>\n    <a class="js-dialog-cancel cancel">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return __('cancel');
                }));
                ___v1ew.push('</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/group/group_user_list_item.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group/group_user_list_item.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_group_user_list_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                var fingerprint = '';
                for (var i = 0; i < mappedItem.userFingerprint.length; i++) {
                    fingerprint += mappedItem.userFingerprint[i];
                    if ((i + 1) % 4 == 0) {
                        fingerprint += ' ';
                    }
                }
                ;
                ;
                ___v1ew.push('\n<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="row ');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return mappedItem.isNew ? 'permission-updated ' : '';
                }));
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <div class="avatar">\n        <img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(mappedItem.userAvatarPath);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    </div>\n    <div class="user">\n        <div class="details">\n            <span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.userLabel;
                }));
                ___v1ew.push('</span>\n            <div href="#" class="more_details tooltip-alt">\n                <i class="fa fa-info-circle"></i>\n                <div class="tooltip-text right">\n                    <div class="email">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return mappedItem.userEmail;
                }));
                ___v1ew.push('</div>\n                    <div class="fingerprint">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return fingerprint;
                }));
                ___v1ew.push('</div>\n                </div>\n            </div>\n        </div>\n        <div class="permission_changes">\n            <span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.isNew ? __('Will be added') : __('Unchanged');
                }));
                ___v1ew.push('</span>\n        </div>\n    </div>\n    <div class="select rights">\n        <form id="js_group_user_is_admin_select_');
                ___v1ew.push(can.view.txt(true, 'form', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" class="js_group_user_is_admin_form"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n            <select class="js_group_user_is_admin permission">\n            </select>\n        </form>\n    </div>\n    <div class="actions">\n        <a class="js_group_user_delete close" title="');
                ___v1ew.push(can.view.txt(true, 'a', 'title', this, function () {
                    return __('remove');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n            <i class="fa fa-times-circle"></i>\n            <span class="visuallyhidden">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('remove');
                }));
                ___v1ew.push('</span>\n        </a>\n    </div>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/group/edit*/
define('app/component/group/edit', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/component/dialog',
    'passbolt-mad/form/element/dropdown',
    'app/view/component/group/edit',
    'app/model/group',
    'app/form/group/create',
    'app/model/group_user',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/component/tree',
    'app/model/user',
    'app/view/template/component/group/edit.ejs!',
    'app/view/template/component/group/group_user_list_item.ejs!'
], function (exports, _button, _component, _dialog, _dropdown, _edit, _group, _create, _group_user, _bus, _map, _tree, _tree3, _user, _edit3, _group_user_list_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _dropdown2 = _interopRequireDefault(_dropdown);
    var _edit2 = _interopRequireDefault(_edit);
    var _group2 = _interopRequireDefault(_group);
    var _create2 = _interopRequireDefault(_create);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _tree4 = _interopRequireDefault(_tree3);
    var _user2 = _interopRequireDefault(_user);
    var _edit4 = _interopRequireDefault(_edit3);
    var _group_user_list_item2 = _interopRequireDefault(_group_user_list_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditComponent = _component2.default.extend('passbolt.component.group.Edit', {
        defaults: {
            label: null,
            cssClasses: ['share-tab'],
            viewClass: _edit2.default,
            template: _edit4.default,
            state: 'loading',
            resource: null,
            GroupUserChanges: [],
            data: { Group: {} }
        }
    }, {
        afterStart: function afterStart() {
            var group = this.options.data.Group;
            this.formState = group.id == undefined ? 'create' : 'edit';
            this.changeList = [];
            this.isAdmin = _user2.default.getCurrent().Role.name == 'admin' ? true : false;
            this.isGroupManager = this.formState == 'edit' ? group.isGroupManager(_user2.default.getCurrent()) : false;
            this._initForm();
            this._initGroupUsersList();
            this._notifyPlugin();
            this._initSaveButton();
            if (this.formState == 'create') {
                $('.group_members').addClass('empty');
            }
            if (this.formState == 'create') {
                this.options.state = 'ready';
            }
            this.showFeedback();
            this.on();
        },
        _initForm: function _initForm() {
            var group = this.options.data.Group;
            var form = new _create2.default($('#js_group_edit_form'), {
                data: group,
                canUpdateName: this.isGroupManager && !this.isAdmin ? false : true,
                callbacks: {}
            });
            form.start();
            form.load(group);
            this.formGroup = form;
        },
        _initGroupUsersList: function _initGroupUsersList() {
            var map = this._getGroupUsersListMap();
            var treeComponent = new _tree2.default($('#js_permissions_list'), {
                cssClasses: ['group_user'],
                viewClass: _tree4.default,
                itemClass: _group_user2.default,
                itemTemplate: _group_user_list_item2.default,
                map: map
            });
            treeComponent.start();
            this.groupUserList = treeComponent;
        },
        _getGroupUsersListMap: function _getGroupUsersListMap() {
            return new _map2.default({
                id: 'id',
                userAvatarPath: {
                    key: 'User',
                    func: function func(user, map, obj) {
                        return user.Profile.avatarPath('small');
                    }
                },
                userLabel: {
                    key: 'User',
                    func: function func(user, map, obj) {
                        return user.Profile.fullName();
                    }
                },
                userEmail: {
                    key: 'User',
                    func: function func(user, map, obj) {
                        return user.username;
                    }
                },
                userFingerprint: {
                    key: 'User',
                    func: function func(user, map, obj) {
                        return user.Gpgkey.fingerprint;
                    }
                },
                isAdmin: {
                    key: 'is_admin',
                    func: function func(is_admin, map, obj) {
                        return is_admin;
                    }
                },
                isNew: {
                    key: 'isNew',
                    func: function func(isNew, map, obj) {
                        return isNew;
                    }
                }
            });
        },
        _initSaveButton: function _initSaveButton() {
            this.options.saveChangesButton = new _button2.default($('#js_group_save'), { state: 'disabled' }).start();
        },
        _notifyPlugin: function _notifyPlugin() {
            var group = this.options.data.Group;
            _bus2.default.trigger('passbolt.plugin.group_edit', {
                groupId: group.id != undefined ? group.id : '',
                canAddGroupUsers: this.formState == 'create' || this.isGroupManager
            });
        },
        showFeedback: function showFeedback() {
            var feedback = [];
            if (this.formState == 'create' && this.groupUserList.options.items.length == 0) {
                feedback.push(__('The group is empty, please add a group manager.'));
            }
            if (this.formState == 'edit' && !this.isGroupManager) {
                feedback.push(__('Only the group manager can add new people to a group.'));
            }
            if (this.changeList.length) {
                feedback.push(__('You need to click save for the changes to take place.'));
            }
            $('.message.feedback').empty();
            if (feedback.length) {
                feedback.forEach(function (fb) {
                    $('.message.feedback').append('<span>' + fb + '</span>');
                });
                $('.message.feedback').removeClass('hidden');
            } else {
                $('.message.feedback').addClass('hidden');
            }
        },
        loadGroup: function loadGroup(group) {
            var self = this;
            this.formGroup.load(group);
            group.GroupUser.each(function (groupUser) {
                self.addGroupUser(groupUser);
            });
            this.options.state = 'ready';
            this.setState('ready');
        },
        loadGroupUser: function loadGroupUser(groupUser) {
            var groupUserId = groupUser.id, groupUserTypeSelector = '#js_group_user_is_admin_select_' + groupUserId, groupUserSelector = '#' + groupUserId, availableTypes = _group_user2.default.membershipType;
            this.groupUserList.insertItem(groupUser);
            new _dropdown2.default($('.js_group_user_is_admin', groupUserTypeSelector), {
                id: 'js_group_user_is_admin_' + groupUserId,
                emptyValue: false,
                modelReference: 'passbolt.model.GroupUser.is_admin',
                availableValues: availableTypes,
                state: 'ready'
            }).start().setValue(groupUser.is_admin ? 1 : 0);
            new _button2.default($('.js_group_user_delete', $('.actions', groupUserSelector)), {
                id: 'js_group_user_delete_' + groupUserId,
                state: 'ready'
            }).start();
        },
        addGroupUser: function addGroupUser(groupUser) {
            if (groupUser.id == undefined) {
                groupUser.id = uuid();
                groupUser.isNew = true;
            } else {
                groupUser.isNew = false;
            }
            this.loadGroupUser(groupUser);
            $('.group_members').removeClass('empty');
            this.checkManager();
        },
        deleteGroupUser: function deleteGroupUser(groupUser) {
            this.groupUserList.removeItem(groupUser);
            if (this.groupUserList.options.items.length == 0) {
                $('.group_members').addClass('empty');
            }
            _bus2.default.trigger('passbolt.group.edit.remove_group_user', {
                groupUser: {
                    id: groupUser.attr('id'),
                    user_id: groupUser.attr('user_id'),
                    group_id: groupUser.attr('group_id'),
                    is_admin: groupUser.attr('is_admin'),
                    isNew: groupUser.attr('isNew')
                }
            });
            this.checkManager();
        },
        editGroupUser: function editGroupUser(groupUser, value) {
            groupUser.attr('is_admin', value == 1 || value == true ? 1 : 0);
            _bus2.default.trigger('passbolt.group.edit.edit_group_user', {
                groupUser: {
                    id: groupUser.attr('id'),
                    user_id: groupUser.attr('user_id'),
                    group_id: groupUser.attr('group_id'),
                    is_admin: groupUser.attr('is_admin'),
                    isNew: groupUser.attr('isNew')
                }
            });
            this.checkManager();
        },
        checkManager: function checkManager() {
            var self = this, admins = [], hasAdmins = false;
            this.groupUserList.options.items.each(function (item) {
                var isAdmin = false;
                if (item.is_admin == 1 || item.is_admin == true) {
                    isAdmin = true;
                }
                if (isAdmin == true) {
                    admins.push(item);
                }
            });
            hasAdmins = admins.length >= 1 ? true : false;
            if (admins.length == 1) {
                var permTypeDropdownComponentId = 'js_group_user_is_admin_' + admins[0].id, permDeleteButtonId = 'js_group_user_delete_' + admins[0].id, permTypeDropdown = mad.getControl(permTypeDropdownComponentId, 'mad.form.Dropdown'), permDeleteButton = mad.getControl(permDeleteButtonId, 'mad.component.Button');
                permTypeDropdown.setState('disabled');
                permDeleteButton.setState('disabled');
            } else if (admins.length > 1) {
                for (var i in admins) {
                    var permTypeDropdownComponentId = 'js_group_user_is_admin_' + admins[i].id, permDeleteButtonId = 'js_group_user_delete_' + admins[i].id, permTypeDropdown = mad.getControl(permTypeDropdownComponentId, 'mad.form.Dropdown'), permDeleteButton = mad.getControl(permDeleteButtonId, 'mad.component.Button');
                    permTypeDropdown.setState('ready');
                    permDeleteButton.setState('ready');
                }
            }
            if (hasAdmins == true) {
                this.options.saveChangesButton.setState('ready');
            } else {
                this.options.saveChangesButton.setState('disabled');
            }
            return hasAdmins;
        },
        setGroupUserItemState: function setGroupUserItemState(groupUserId, state) {
            var $li = this.groupUserList.view.getItemElement({ id: groupUserId });
            if (state == null) {
                $li.removeClass('permission-updated');
                $('.permission_changes span', $li).text(__('Unchanged'));
            } else {
                $li.addClass('permission-updated');
                var text = state == 'created' ? __('Will be added') : __('Will be updated');
                $('.permission_changes span', $li).text(text);
            }
        },
        '{saveChangesButton.element} click': function saveChangesButtonElementClick(el, ev) {
            if (this.state.is('ready')) {
                var validate = this.formGroup.validate();
                var hasAdmins = this.checkManager();
                if (validate == true && hasAdmins == true) {
                    var formData = this.formGroup.getData()['passbolt.model.Group'];
                    var groupJson = { name: formData['name'] };
                    _bus2.default.trigger('passbolt_loading');
                    _bus2.default.trigger('passbolt.group.edit.save', { group: groupJson });
                    this.setState('loading');
                    this.options.saveChangesButton.setState('processing');
                }
            }
        },
        '{mad.bus.element} passbolt.plugin.group.edit.group_loaded': function madBusElementPassboltPluginGroupEditGroup_loaded(el, ev, data) {
            var group = _group2.default.model(data);
            this.loadGroup(group);
        },
        '{mad.bus.element} passbolt.group.edit.add_user': function madBusElementPassboltGroupEditAdd_user(el, ev, data) {
            var groupUser = _group_user2.default.model(data);
            this.addGroupUser(groupUser);
        },
        '{mad.bus.element} passbolt.plugin.group.edit.group_users_updated': function madBusElementPassboltPluginGroupEditGroup_users_updated(el, ev, data) {
            var self = this;
            self.changeList = data.changeList;
            setTimeout(function () {
                self.groupUserList.options.items.each(function (item) {
                    var userId = item.user_id, groupUserId = item.id, correspondingChange = data.changeList.find(function (item) {
                            return item.user_id == userId;
                        });
                    if (correspondingChange != undefined) {
                        if (correspondingChange.status == 'created' || correspondingChange.status == 'updated') {
                            self.setGroupUserItemState(groupUserId, correspondingChange.status);
                        }
                    } else {
                        self.setGroupUserItemState(groupUserId, null);
                    }
                });
                self.showFeedback();
            }, 0);
        },
        '{mad.bus.element} group_edit_save_success': function madBusElementGroup_edit_save_success(el, ev, data) {
            var group = _group2.default.model(data);
            can.trigger(_group2.default, this.formState == 'create' ? 'created' : 'updated', group);
            _bus2.default.trigger('passbolt_loading_complete');
            _bus2.default.trigger('passbolt_notify', {
                status: 'success',
                title: 'app_groups_' + (this.formState == 'create' ? 'add' : 'edit') + '_success',
                data: data
            });
            this.setState('ready');
            this.options.saveChangesButton.setState('ready');
            this.closest(_dialog2.default).remove();
        },
        '{mad.bus.element} group_edit_save_error': function madBusElementGroup_edit_save_error(el, ev, errorResponse) {
            if (errorResponse.header.status_code == 400) {
                if (errorResponse.body.Group['name'] != undefined) {
                    this.formGroup.showErrors(errorResponse.body);
                } else {
                    console.error('Validation error while saving group', errorResponse);
                }
            } else {
                console.error('Unknown error while saving group', errorResponse);
            }
            _bus2.default.trigger('passbolt_loading_complete');
            _bus2.default.trigger('passbolt_notify', {
                status: 'error',
                title: 'app_groups_add_error',
                data: errorResponse
            });
            this.setState('ready');
            this.options.saveChangesButton.setState('ready');
        },
        ' request_group_user_delete': function request_group_user_delete(el, ev, groupUser) {
            this.deleteGroupUser(groupUser);
        },
        ' request_group_user_edit': function request_group_user_edit(el, ev, groupUser, value) {
            this.editGroupUser(groupUser, value);
        }
    });
    exports.default = EditComponent;
});
/*app/view/component/workspace/sidebar*/
define('app/view/component/workspace/sidebar', [
    'exports',
    'passbolt-mad/control/bus',
    'passbolt-mad/view/view'
], function (exports, _bus, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _bus2 = _interopRequireDefault(_bus);
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SidebarView = _view2.default.extend('passbolt.view.component.Sidebar', {}, {
        ' .js_sidebar_close click': function js_sidebar_closeClick(el, ev) {
            mad.Config.write('ui.workspace.showSidebar', false);
            _bus2.default.trigger('workspace_sidebar_hide');
        }
    });
    exports.default = SidebarView;
});
/*app/view/component/group/workspace_group_sidebar*/
define('app/view/component/group/workspace_group_sidebar', [
    'exports',
    'app/view/component/workspace/sidebar'
], function (exports, _sidebar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _sidebar2 = _interopRequireDefault(_sidebar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceGroupSidebarView = _sidebar2.default.extend('passbolt.view.component.group.WorkspaceGroupSidebar', {}, {
        'a#js_edit_members_button click': function aJs_edit_members_buttonClick(el, ev) {
            ev.preventDefault();
            this.element.trigger('request_group_edition');
        }
    });
    exports.default = WorkspaceGroupSidebarView;
});
/*app/view/template/component/workspace/sidebar.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/workspace/sidebar.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_workspace_sidebar_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div id="sidebar" class="sidebar"></div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/workspace/sidebar*/
define('app/component/workspace/sidebar', [
    'exports',
    'passbolt-mad/component/component',
    'app/view/component/workspace/sidebar',
    'app/view/template/component/workspace/sidebar.ejs!'
], function (exports, _component, _sidebar, _sidebar3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _sidebar2 = _interopRequireDefault(_sidebar);
    var _sidebar4 = _interopRequireDefault(_sidebar3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SidebarComponent = _component2.default.extend('passbolt.component.workspace.Sidebar', {
        defaults: {
            label: 'Sidebar Component',
            viewClass: _sidebar2.default,
            selectedItem: null,
            selectedItems: null,
            template: _sidebar4.default
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('selectedItem', this.options.selectedItem);
        },
        load: function load(item) {
            this.options.selectedItem = item;
            if (mad.Config.read('ui.workspace.showSidebar')) {
                if (this.state.is(null)) {
                    this.start();
                } else {
                    this.refresh();
                }
            }
            this.on();
        },
        unload: function unload() {
            this.options.selectedItem = null;
            this.on();
            if (this.state.is('ready')) {
                this.setState('hidden');
            }
        },
        isDisabled: function isDisabled() {
            if (this.state.is('disabled') || this.state.is(null) && (this.options.state == 'disabled' || $.isArray(this.options.state) && this.options.state.indexOf('disabled') != -1)) {
                return true;
            }
            return false;
        },
        stateReady: function stateReady(go) {
            if (go) {
                this.view.show();
            }
            this._super(go);
        },
        '{selectedItem} updated': function selectedItemUpdated(item) {
            if (!this.isDisabled()) {
                this.refresh();
            }
        },
        '{mad.bus.element} workspace_sidebar_show': function madBusElementWorkspace_sidebar_show(el, ev) {
            if (this.options.selectedItem != null) {
                this.load(this.options.selectedItem);
            }
        },
        '{mad.bus.element} workspace_sidebar_hide': function madBusElementWorkspace_sidebar_hide(el, ev) {
            if (this.state.is('ready')) {
                this.setState('hidden');
            }
        },
        '{selectedItems} add': function selectedItemsAdd(el, ev, item) {
            if (this.options.selectedItems.length == 0 || this.options.selectedItems.length > 1) {
                this.unload();
            } else {
                this.load(this.options.selectedItems[0]);
            }
        },
        '{selectedItems} remove': function selectedItemsRemove(el, ev, item) {
            if (this.options.selectedItems.length == 0 || this.options.selectedItems.length > 1) {
                this.unload();
            } else {
                this.load(this.options.selectedItems[0]);
            }
        }
    });
    exports.default = SidebarComponent;
});
/*app/view/template/component/group/workspace_group_sidebar.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group/workspace_group_sidebar.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_workspace_group_sidebar_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="sidebar group">\n    <div class="header">\n        <img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push('img/avatar/group_default.png"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('>\n        <h3>\n            <span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return group.name;
                }));
                ___v1ew.push('</span>\n            <span class="type">group</span>\n        </h3>\n    </div>\n    <a href="#" class="js_sidebar_close dialog-close">\n        <i class="fa fa-fw fa-close"></i><span class="visuallyhidden">close</span>\n    </a>\n    <div class="detailed-information">\n        <h4>Information</h4>\n        <ul>\n            <li class="created">\n                <span class="label">Created</span>\n                ');
                var created = datetimeGetTimeAgo(group.attr('created'));
                ;
                ;
                ___v1ew.push('\n                <span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return created;
                }));
                ___v1ew.push('</span>\n            </li>\n            <li class="modified">\n                <span class="label">Modified</span>\n                <span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return datetimeGetTimeAgo(group.modified);
                }));
                ___v1ew.push('</span>\n            </li>\n            <li class="modified_by">\n                <span class="label">Modified By</span>\n                <span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return group.Modifier ? group.Modifier.Profile.fullName() : '';
                }));
                ___v1ew.push('</span>\n            </li>\n            <li class="members">\n                <span class="label">Members</span>\n                <span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return group.GroupUser ? group.GroupUser.length : '';
                }));
                ___v1ew.push('</span>\n            </li>\n            <!-- <li class="members">\n                <span class="label">Passwords</span>\n                <span class="value">20</span>\n            </li>-->\n        </ul>\n    </div>\n    <div id="js_group_details_members" class="members">\n        <h4>Group Members</h4>\n        ');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (editable) {
                        ___v1ew.push('\n        <a id="js_edit_members_button" class="section-action" href="#">\n            <i class="fa fa-fw fa-edit"></i>\n            <span class="visuallyhidden">modify</span>\n        </a>\n        ');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n        <div>\n            <ul id="js_group_details_group_members_list" class="shared-with ready"></ul>\n        </div>\n    </div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/group/group_members_list_item.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group/group_members_list_item.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_group_members_list_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="usercard-col-2 ');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <div class="content-wrapper">\n        <div class="content">\n            <div class="name">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return mappedItem.userFullName;
                }));
                ___v1ew.push('</div>\n            <div class="subinfo">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return mappedItem.membershipType;
                }));
                ___v1ew.push('</div>\n        </div>\n    </div>\n    <div class="avatar">\n        <img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(mappedItem.userAvatarPath);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="picture of ');
                ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                    return mappedItem.userFullName;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    </div>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/group/workspace_group_sidebar*/
define('app/component/group/workspace_group_sidebar', [
    'exports',
    'app/model/group',
    'app/view/component/group/workspace_group_sidebar',
    'app/model/group_user',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/component/workspace/sidebar',
    'passbolt-mad/component/tree',
    'app/model/user',
    'app/view/template/component/group/workspace_group_sidebar.ejs!',
    'app/view/template/component/group/group_members_list_item.ejs!'
], function (exports, _group, _workspace_group_sidebar, _group_user, _bus, _map, _sidebar, _tree, _user, _workspace_group_sidebar3, _group_members_list_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _group2 = _interopRequireDefault(_group);
    var _workspace_group_sidebar2 = _interopRequireDefault(_workspace_group_sidebar);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _sidebar2 = _interopRequireDefault(_sidebar);
    var _tree2 = _interopRequireDefault(_tree);
    var _user2 = _interopRequireDefault(_user);
    var _workspace_group_sidebar4 = _interopRequireDefault(_workspace_group_sidebar3);
    var _group_members_list_item2 = _interopRequireDefault(_group_members_list_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceGroupSidebarComponent = _sidebar2.default.extend('passbolt.component.group.WorkspaceGroupSidebar', {
        defaults: {
            label: 'Group Details Controller',
            viewClass: _workspace_group_sidebar2.default,
            template: _workspace_group_sidebar4.default
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('editable', this.options.selectedItem.isAllowedToEdit(_user2.default.getCurrent()));
            this.setViewData('group', this.options.selectedItem);
        },
        _refreshView: function _refreshView() {
            this.element.empty();
            this.beforeRender();
            var render = this.view.render();
            render = this.afterRender(render);
            this.view.insertInDom(render);
        },
        afterStart: function afterStart() {
            var _this = this;
            var self = this;
            this._findGroup().then(function (group) {
                self.options.selectedItem = group;
            }).then(function () {
                return _this._refreshView();
            }).then(function () {
                return _this._initGroupUsersList();
            });
            this._super();
        },
        _findGroup: function _findGroup() {
            var options = {
                id: this.options.selectedItem.id,
                contain: {
                    'modifier': 1,
                    'modifier.profile': 1,
                    'group_user': 1,
                    'group_user.user': 1,
                    'group_user.user.profile': 1
                }
            };
            return _group2.default.findOne(options);
        },
        _initGroupUsersList: function _initGroupUsersList() {
            var groupUsers = this.options.selectedItem.GroupUser;
            var map = new _map2.default({
                id: 'id',
                userFullName: {
                    key: 'User.Profile',
                    func: function func(profile) {
                        return profile.first_name + ' ' + profile.last_name;
                    }
                },
                membershipType: {
                    key: 'is_admin',
                    func: function func(isAdmin) {
                        return _group_user2.default.membershipType[isAdmin ? 1 : 0];
                    }
                },
                userAvatarPath: {
                    key: 'User.Profile',
                    func: function func(profile) {
                        return profile.avatarPath('small');
                    }
                }
            });
            this.options.groupMembersList = new _tree2.default($('#js_group_details_group_members_list'), {
                label: 'Group Members List Controller',
                itemClass: _group_user2.default,
                itemTemplate: _group_members_list_item2.default,
                map: map
            });
            this.options.groupMembersList.start();
            this.options.groupMembersList.load(groupUsers);
            this.on();
        },
        ' request_group_edition': function request_group_edition(el, ev) {
            _bus2.default.trigger('request_group_edition', this.options.selectedItem);
        },
        '{mad.bus.element} user_selected': function madBusElementUser_selected(element, evt, user) {
            if (!this.state.is(null) && !this.state.is('hidden')) {
                this.setState('hidden');
            }
        }
    });
    exports.default = WorkspaceGroupSidebarComponent;
});
/*app/view/component/group/groups_list*/
define('app/view/component/group/groups_list', [
    'exports',
    'passbolt-mad/view/component/tree'
], function (exports, _tree) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _tree2 = _interopRequireDefault(_tree);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupsListView = _tree2.default.extend('passbolt.view.component.GroupsList', {}, {
        '.more-ctrl a mousedown': function moreCtrlAMousedown(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null, li = el.closest('li');
            if (this.getController().getItemClass()) {
                data = li.data(this.getController().getItemClass().fullName);
            } else {
                data = li[0].id;
            }
            this.element.trigger('item_menu_clicked', [
                data,
                ev
            ]);
            return false;
        }
    });
    exports.default = GroupsListView;
});
/*app/view/template/component/group/group_item.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group/group_item.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_group_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li class="open node root group-item" id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <div class="row ">\n        <div class="main-cell-wrapper">\n            <div class="main-cell">\n                <a href="#" title="');
                ___v1ew.push(can.view.txt(true, 'a', 'title', this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('\'"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n            </div>\n        </div>\n        ');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (withMenu == true && mappedItem.canEdit == true) {
                        ___v1ew.push('\n        <div class="right-cell more-ctrl">\n            <a href="#"><span>more</span></a>\n        </div>\n        ');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n    </div>\n</li>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/group/groups_list*/
define('app/component/group/groups_list', [
    'exports',
    'app/model/filter',
    'app/model/group',
    'app/view/component/group/groups_list',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'app/model/user',
    'app/view/template/component/group/group_item.ejs!'
], function (exports, _filter, _group, _groups_list, _bus, _map, _tree, _user, _group_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _filter2 = _interopRequireDefault(_filter);
    var _group2 = _interopRequireDefault(_group);
    var _groups_list2 = _interopRequireDefault(_groups_list);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _user2 = _interopRequireDefault(_user);
    var _group_item2 = _interopRequireDefault(_group_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupsList = _tree2.default.extend('passbolt.component.group.GroupsList', {
        defaults: {
            itemClass: _group2.default,
            itemTemplate: _group_item2.default,
            prefixItemId: 'group_',
            selectedGroups: can.Model.List(),
            selectedFilter: null,
            viewClass: _groups_list2.default,
            map: new _map2.default({
                id: 'id',
                label: 'name',
                canEdit: {
                    key: 'GroupUser',
                    func: function func(GroupUser, map, obj) {
                        var currentUser = _user2.default.getCurrent();
                        return obj.isAllowedToEdit(currentUser);
                    }
                }
            }),
            state: 'loading',
            silentLoading: false,
            defaultGroupFilter: {},
            withMenu: false,
            afterLoad: function afterLoad(groups) {
            }
        }
    }, {
        afterStart: function afterStart() {
            this.setViewData('withMenu', this.options.withMenu);
            this.loadGroups(this.options.defaultGroupFilter);
            this._super();
        },
        loadGroups: function loadGroups(filter) {
            var self = this;
            var findOptions = {
                contain: {
                    user: 1,
                    group_user: 1
                },
                order: ['Group.name ASC'],
                filter: filter
            };
            _group2.default.findAll(findOptions).then(function (groups) {
                self.load(groups);
                if (self.options.afterLoad != null) {
                    self.options.afterLoad(groups);
                }
                self.setState('ready');
            });
        },
        insertAlphabetically: function insertAlphabetically(item) {
            var self = this, inserted = false;
            this.options.items.each(function (elt) {
                if (item.name.localeCompare(elt.name) == -1) {
                    self.insertItem(item, elt, 'before');
                    inserted = true;
                    return false;
                }
            });
            if (inserted == false) {
                self.insertItem(item, null, 'last');
            }
        },
        select: function select(group) {
            this.view.selectItem(group);
            this.options.selectedGroups.splice(0, this.options.selectedGroups.length);
            this.options.selectedGroups.push(group);
            this.selectedFilter = new _filter2.default({
                id: 'workspace_filter_group_' + group.id,
                label: group.name + __(' (group)'),
                rules: { 'has-groups': group.id },
                order: ['Profile.last_name ASC']
            });
            _bus2.default.trigger('filter_workspace', this.selectedFilter);
        },
        '{passbolt.model.Group} created': function passboltModelGroupCreated(el, ev, data) {
            this.insertAlphabetically(data);
        },
        '{passbolt.model.Group} updated': function passboltModelGroupUpdated(el, ev, data) {
            this.refreshItem(data);
            if (this.options.selectedGroups.attr('length') == 0) {
                return;
            }
            if (this.options.selectedGroups[0] != null && this.options.selectedGroups[0].id == data.id) {
                this.select(data);
            }
        },
        '{passbolt.model.Group} destroyed': function passboltModelGroupDestroyed(el, ev, group) {
            this.unselectAll();
            this.removeItem(group);
            _bus2.default.trigger('reset_filters');
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(element, evt, filter) {
            if (!filter.id.match(/^workspace_filter_group_/)) {
                this.options.selectedGroups.splice(0, this.options.selectedGroups.length);
                this.unselectAll();
            }
        },
        ' item_selected': function item_selected(el, ev, item, srcEvent) {
            this.select(item);
        }
    });
    exports.default = GroupsList;
});
/*app/component/group/people_groups_list*/
define('app/component/group/people_groups_list', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/contextual_menu',
    'app/component/group/groups_list',
    'passbolt-mad/control/bus',
    'app/model/user',
    'app/view/template/component/group/group_item.ejs!'
], function (exports, _action, _contextual_menu, _groups_list, _bus, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _groups_list2 = _interopRequireDefault(_groups_list);
    var _bus2 = _interopRequireDefault(_bus);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PeopleGroupsListComponent = _groups_list2.default.extend('passbolt.component.group.PeopleGroupsList', { defaults: { withMenu: true } }, {
        showContextualMenu: function showContextualMenu(item, x, y, eventTarget) {
            var currentUser = _user2.default.getCurrent(), isAdmin = currentUser.Role.name == 'admin';
            var $item = $('#' + this.options.prefixItemId + item.id);
            var item_offset = $('.more-ctrl a', $item).offset();
            var contextualMenu = new _contextual_menu2.default(null, {
                state: 'hidden',
                source: eventTarget,
                coordinates: {
                    x: x,
                    y: item_offset.top
                }
            });
            contextualMenu.start();
            var action = new _action2.default({
                id: 'js_group_browser_menu_edit',
                label: 'Edit group',
                initial_state: 'ready',
                action: function action(menu) {
                    _bus2.default.trigger('request_group_edition', item);
                    menu.remove();
                }
            });
            contextualMenu.insertItem(action);
            if (isAdmin) {
                var action = new _action2.default({
                    id: 'js_group_browser_menu_remove',
                    label: 'Delete group',
                    initial_state: 'ready',
                    action: function action(menu) {
                        _bus2.default.trigger('request_group_deletion', item);
                        menu.remove();
                    }
                });
                contextualMenu.insertItem(action);
            }
            contextualMenu.setState('ready');
        },
        ' item_menu_clicked': function item_menu_clicked(el, ev, item, srcEvent) {
            this.showContextualMenu(item, srcEvent.pageX, srcEvent.pageY, srcEvent.target);
        }
    });
    exports.default = PeopleGroupsListComponent;
});
/*app/view/template/component/user/workspace_groups_filter.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/workspace_groups_filter.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_workspace_groups_filter_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<ul id="js_wsp_users_groups_menu">\n    <li class="open node root group-header">\n        <div class="row title no-hover">\n            <div class="main-cell-wrapper">\n                <div class="main-cell">\n                    <h3>All groups</h3>\n                </div>\n            </div>\n            <!--<div class="right-cell more-ctrl">\n                <a href="#"><span>more</span></a>\n            </div>-->\n        </div>\n    </li>\n</ul>\n<ul id="js_wsp_users_groups_list"></ul>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/user/workspace_groups_filter*/
define('app/component/user/workspace_groups_filter', [
    'exports',
    'passbolt-mad/component/component',
    'app/component/group/people_groups_list',
    'app/view/template/component/user/workspace_groups_filter.ejs!'
], function (exports, _component, _people_groups_list, _workspace_groups_filter) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _people_groups_list2 = _interopRequireDefault(_people_groups_list);
    var _workspace_groups_filter2 = _interopRequireDefault(_workspace_groups_filter);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceGroupsFilterComponent = _component2.default.extend('passbolt.component.user.workspace_groups_filter', {
        defaults: {
            template: _workspace_groups_filter2.default,
            selectedGroups: new can.Model.List()
        }
    }, {
        afterStart: function afterStart() {
            var peopleGroupsList = new _people_groups_list2.default($('#js_wsp_users_groups_list', this.element), { selectedGroups: this.options.selectedGroups });
            peopleGroupsList.start();
        }
    });
    exports.default = WorkspaceGroupsFilterComponent;
});
/*app/view/template/component/user/workspace_primary_menu.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/workspace_primary_menu.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_workspace_primary_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                var role = passbolt.model.User.getCurrent().Role.name;
                ;
                ;
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'ul', 0, this, function () {
                    var ___v1ew = [];
                    if (role == 'admin') {
                        ___v1ew.push('\n<li>\n\t<a id="js_user_wk_menu_edition_button" class="button">\n\t\t<i class="fa fa-fw fa-edit"></i>\n\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('edit');
                        }));
                        ___v1ew.push('</span>\n\t</a>\n</li>\n<li>\n\t<a id="js_user_wk_menu_deletion_button" class="button">\n\t\t<i class="fa fa-fw fa-trash"></i>\n\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('delete');
                        }));
                        ___v1ew.push('</span>\n\t</a>\n</li>\n<!-- #PASSBOLT-787<li>\n\t<div class="dropdown">\n\t\t<a id="js_user_wk_menu_more_button" class="button">\n\t\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('more');
                        }));
                        ___v1ew.push('</span>\n\t\t\t<i class="fa fa-fw fa-caret-down"></i>\n\t\t</a>\n\t</div>\n</li>-->\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/user/workspace_primary_menu*/
define('app/component/user/workspace_primary_menu', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'app/model/user',
    'app/view/template/component/user/workspace_primary_menu.ejs!'
], function (exports, _button, _component, _bus, _user, _workspace_primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _user2 = _interopRequireDefault(_user);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspacePrimaryMenu = _component2.default.extend('passbolt.component.user.WorkspacePrimaryMenu', {
        defaults: {
            label: 'User Workspace Menu Controller',
            tag: 'ul',
            template: _workspace_primary_menu2.default,
            selectedUsers: new can.Model.List()
        }
    }, {
        afterStart: function afterStart() {
            var role = _user2.default.getCurrent().Role.name;
            if (role == 'admin') {
                var editButton = new _button2.default($('#js_user_wk_menu_edition_button'), { state: 'disabled' });
                editButton.start();
                this.options.editButton = editButton;
                var deleteButton = new _button2.default($('#js_user_wk_menu_deletion_button'), { state: 'disabled' });
                deleteButton.start();
                this.options.deleteButton = deleteButton;
            }
            this.on();
        },
        '{editButton.element} click': function editButtonElementClick(el, ev) {
            _bus2.default.trigger('request_user_edition');
        },
        '{deleteButton.element} click': function deleteButtonElementClick(el, ev) {
            var users = this.options.selectedUsers;
            _bus2.default.trigger('request_user_deletion', users);
        },
        '{selectedUsers} add': function selectedUsersAdd(el, ev, user) {
            if (this.options.selectedUsers.length == 0) {
                this.setState('ready');
            } else if (this.options.selectedUsers.length == 1) {
                this.setState('selection');
            } else {
                this.setState('multiSelection');
            }
        },
        '{selectedUsers} remove': function selectedUsersRemove(el, ev, user) {
            if (this.options.selectedUsers.length == 0) {
                this.setState('ready');
            } else if (this.options.selectedUsers.length == 1) {
                this.setState('selection');
            } else {
                this.setState('multiSelection');
            }
        },
        stateSelection: function stateSelection(go) {
            var isAdmin = _user2.default.getCurrent().Role.name == 'admin';
            if (isAdmin) {
                if (go) {
                    var isSelf = _user2.default.getCurrent().id == this.options.selectedUsers[0].id;
                    this.options.editButton.setValue(this.options.selectedUsers[0]).setState('ready');
                    if (!isSelf) {
                        this.options.deleteButton.setValue(this.options.selectedUsers).setState('ready');
                    } else {
                        this.options.deleteButton.setValue(null).setState('disabled');
                    }
                } else {
                    this.options.editButton.setValue(null).setState('disabled');
                    this.options.deleteButton.setValue(null).setState('disabled');
                }
            }
        },
        stateMultiSelection: function stateMultiSelection(go) {
            if (_user2.default.getCurrent().Role.name == 'admin') {
                if (go) {
                    this.options.editButton.setState('disabled');
                    this.options.deleteButton.setValue(this.options.selectedUsers).setState('ready');
                } else {
                    this.options.editButton.setValue(null).setState('disabled');
                    this.options.deleteButton.setValue(null).setState('disabled');
                }
            }
        }
    });
    exports.default = WorkspacePrimaryMenu;
});
/*passbolt-mad/component/toggle_button*/
define('passbolt-mad/component/toggle_button', [
    'exports',
    'passbolt-mad/component/button'
], function (exports, _button) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ToggleButton = _button2.default.extend('mad.component.ToggleButton', {}, {
        'click': function click(el, ev) {
            this._super(el, ev);
            if (!this.state.is('selected')) {
                this.setState('selected');
            } else {
                this.setState('ready');
            }
        },
        'stateSelected': function stateSelected(go) {
            if (go) {
                this.element.addClass('selected');
            } else {
                this.element.removeClass('selected');
            }
        }
    });
    exports.default = ToggleButton;
});
/*app/view/template/component/workspace/secondary_menu.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/workspace/secondary_menu.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_workspace_secondary_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li>\n\t<a id="js_wk_secondary_menu_view_sidebar_button" class="button toggle">\n\t\t<i class="fa fa-lg fa-info-circle"></i>\n\t\t<span class="visuallyhidden">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('view sidebar');
                }));
                ___v1ew.push('</span>\n\t</a>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/workspace/secondary_menu*/
define('app/component/workspace/secondary_menu', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/config/config',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/toggle_button',
    'app/view/template/component/workspace/secondary_menu.ejs!'
], function (exports, _component, _config, _bus, _toggle_button, _secondary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _config2 = _interopRequireDefault(_config);
    var _bus2 = _interopRequireDefault(_bus);
    var _toggle_button2 = _interopRequireDefault(_toggle_button);
    var _secondary_menu2 = _interopRequireDefault(_secondary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceSecondaryMenu = _component2.default.extend('passbolt.component.WorkspaceSecondaryMenu', {
        defaults: {
            label: 'Workspace Secondary Menu',
            template: _secondary_menu2.default,
            tag: 'ul',
            selectedItems: new can.Model.List()
        }
    }, {
        afterStart: function afterStart() {
            var showSidebar = _config2.default.read('ui.workspace.showSidebar');
            var viewSidebarButton = new _toggle_button2.default($('#js_wk_secondary_menu_view_sidebar_button'), { state: showSidebar ? 'selected' : 'ready' });
            viewSidebarButton.start();
            this.options.viewSidebarButton = viewSidebarButton;
            this.on();
        },
        '{mad.bus.element} workspace_sidebar_hide': function madBusElementWorkspace_sidebar_hide(el, ev) {
            if (this.options.viewSidebarButton.state.is('selected')) {
                this.options.viewSidebarButton.setState('ready');
            }
        },
        '{viewSidebarButton.element} click': function viewSidebarButtonElementClick(el, ev) {
            var showSidebar = !_config2.default.read('ui.workspace.showSidebar'), isSelection = this.options.selectedItems.length > 0;
            _config2.default.write('ui.workspace.showSidebar', showSidebar);
            if (isSelection) {
                if (showSidebar) {
                    _bus2.default.trigger('workspace_sidebar_show');
                } else {
                    _bus2.default.trigger('workspace_sidebar_hide');
                }
            }
        }
    });
    exports.default = WorkspaceSecondaryMenu;
});
/*app/component/user/workspace_shortcuts_filter*/
define('app/component/user/workspace_shortcuts_filter', [
    'exports',
    'passbolt-mad/model/action',
    'app/model/filter',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu'
], function (exports, _action, _filter, _bus, _menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _filter2 = _interopRequireDefault(_filter);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceShortcutsFilterComponent = _menu2.default.extend('passbolt.component.user.WorkspaceShortcutsFilter', { defaults: { allFilter: null } }, {
        afterStart: function afterStart() {
            var allItem = new _action2.default({
                id: 'js_users_wsp_filter_all',
                label: __('All users'),
                filter: this.options.allFilter
            });
            this.insertItem(allItem);
            this.selectItem(allItem);
            var modifiedItem = new _action2.default({
                id: 'js_users_wsp_filter_recently_modified',
                label: __('Recently modified'),
                filter: new _filter2.default({
                    id: 'workspace_filter_modified',
                    label: __('Recently modified'),
                    order: ['User.modified DESC']
                })
            });
            this.insertItem(modifiedItem);
        },
        ' item_selected': function item_selected(el, ev, item) {
            this._super(el, ev, item);
            if (!item.state.is('disabled')) {
                _bus2.default.trigger('filter_workspace', item.filter);
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(element, evt, filter) {
            var self = this;
            this.unselectAll();
            this.options.items.each(function (item) {
                if (item.filter.id == filter.id) {
                    self.selectItem(item);
                }
            });
        }
    });
    exports.default = WorkspaceShortcutsFilterComponent;
});
/*app/view/template/component/group_user/user_groups_list.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group_user/user_groups_list.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_user_user_groups_list_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Groups');
                }));
                ___v1ew.push('</h4>\n<ul id="js_user_groups_list" class="shared-with"></ul>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/group_user/user_groups_list_item.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group_user/user_groups_list_item.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_user_user_groups_list_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="permission usercard-col-2 ');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="content-wrapper">\n\t\t<div class="content">\n\t\t\t<div class="name">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return mappedItem.name;
                }));
                ___v1ew.push('</div>\n\t\t\t<div class="subinfo">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return mappedItem.role;
                }));
                ___v1ew.push('</div>\n\t\t</div>\n\t</div>\n\t<div class="avatar">\n\t\t<img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push('img/avatar/group_default.png"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('>\n\t</div>\n</li>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/user_group/user_groups_list*/
define('app/component/user_group/user_groups_list', [
    'exports',
    'passbolt-mad/component/component',
    'app/model/group',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/component/tree',
    'app/view/template/component/group_user/user_groups_list.ejs!',
    'app/view/template/component/group_user/user_groups_list_item.ejs!'
], function (exports, _component, _group, _map, _tree, _tree3, _user_groups_list, _user_groups_list_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _group2 = _interopRequireDefault(_group);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _tree4 = _interopRequireDefault(_tree3);
    var _user_groups_list2 = _interopRequireDefault(_user_groups_list);
    var _user_groups_list_item2 = _interopRequireDefault(_user_groups_list_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserGroupsListComponent = _component2.default.extend('passbolt.component.group_user.UserGroupsList', {
        defaults: {
            label: 'Sidebar Section User Groups Component',
            template: _user_groups_list2.default,
            user: null,
            state: 'loading'
        }
    }, {
        afterStart: function afterStart() {
            var self = this;
            var tree = this._initTree();
            this._findUserGroups().then(function (groups) {
                tree.load(groups);
                self.setState('ready');
            });
        },
        _initTree: function _initTree() {
            var map = this._getTreeMap();
            var tree = new _tree2.default($('#js_user_groups_list'), {
                cssClasses: [
                    'groups',
                    'shared-with'
                ],
                viewClass: _tree4.default,
                itemClass: _group2.default,
                itemTemplate: _user_groups_list_item2.default,
                prefixItemId: 'js_user_groups_list_',
                map: map
            });
            tree.start();
            return tree;
        },
        _getTreeMap: function _getTreeMap() {
            var _this = this;
            return new _map2.default({
                id: 'id',
                name: 'name',
                role: {
                    key: 'GroupUser',
                    func: function func(value, map, item, mappedValues) {
                        return _this._mapRoleField(value, map, item, mappedValues);
                    }
                }
            });
        },
        _mapRoleField: function _mapRoleField(value, map, item, mappedValues) {
            var self = this;
            return value.attr().filter(function (groupUser) {
                return groupUser.user_id == self.options.user.id;
            }).reduce(function (sum, groupUser) {
                return groupUser.is_admin ? __('Group manager') : __('Member');
            }, '');
        },
        _findUserGroups: function _findUserGroups() {
            var findOptions = {
                contain: {
                    user: 1,
                    group_user: 1
                },
                order: ['Group.name ASC'],
                filter: { 'has-users': this.options.user.id }
            };
            return _group2.default.findAll(findOptions);
        },
        '{passbolt.model.Group} created': function passboltModelGroupCreated(model, event, group) {
            this.refresh();
        },
        '{passbolt.model.Group} updated': function passboltModelGroupUpdated(model, event, group) {
            this.refresh();
        },
        '{passbolt.model.Group} deleted': function passboltModelGroupDeleted(model, event, group) {
            this.refresh();
        }
    });
    exports.default = UserGroupsListComponent;
});
/*app/view/component/user/workspace_user_sidebar*/
define('app/view/component/user/workspace_user_sidebar', [
    'exports',
    'app/view/component/workspace/sidebar'
], function (exports, _sidebar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _sidebar2 = _interopRequireDefault(_sidebar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceUserSidebarView = _sidebar2.default.extend('passbolt.view.component.user.WorkspaceUserSidebarView', {}, {
        'a.copy-public-key click': function aCopyPublicKeyClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            this.element.trigger('request_copy_publickey', [ev]);
        }
    });
    exports.default = WorkspaceUserSidebarView;
});
/*app/view/template/component/user/workspace_user_sidebar.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/workspace_user_sidebar.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_workspace_user_sidebar_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="sidebar user">\n\t<div class="header">\n\t\t<img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(user.Profile.Avatar.url.small);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="');
                ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push(' picture"', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n\t\t<h3>\n\t\t\t<span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="username">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.username;
                }));
                ___v1ew.push('</span>\n\t\t</h3>\n\t</div>\n\t<a class="js_sidebar_close dialog-close">\n\t\t<i class="fa fa-close"></i>\n\t\t<span class="visuallyhidden">close</span>\n\t</a>\n\t<div class="detailed-information">\n\t\t<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Information');
                }));
                ___v1ew.push('</h4>\n\t\t<ul>\n\t\t\t<li class="role">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Role');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Role.name.charAt(0).toUpperCase() + user.Role.name.slice(1);
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="modified">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Modified');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return datetimeGetTimeAgo(user.modified);
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="status">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Status');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.active == '1' ? 'Activated' : 'Activation pending';
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\t');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (user.active === undefined || user.active == '1') {
                        ___v1ew.push('\n\t<!-- User groups list -->\n\t<div class="groups" id="js_user_groups"></div>\n\t<!-- User key information -->\n\t<div class="key-information">\n\t\t<h4>');
                        ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                            return __('Public Key');
                        }));
                        ___v1ew.push('</h4>\n\t\t<ul>\n\t\t\t<li class="keyid">\n\t\t\t\t<span class="label">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('Key id');
                        }));
                        ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return user.Gpgkey.key_id;
                        }));
                        ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="type">\n\t\t\t\t<span class="label">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('Type');
                        }));
                        ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return user.Gpgkey.type;
                        }));
                        ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="created">\n\t\t\t\t<span class="label">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('Created');
                        }));
                        ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return user.Gpgkey.key_created;
                        }));
                        ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="expires">\n\t\t\t\t<span class="label">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('Expires');
                        }));
                        ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return user.Gpgkey.expires;
                        }));
                        ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="key">\n\t\t\t\t<span class="label">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('Public key');
                        }));
                        ___v1ew.push('</span>\n\t\t\t\t<span class="value">\n\t\t\t\t\t<a class="button copy-public-key">\n\t\t\t\t\t\t<span>copy</span>\n\t\t\t\t\t</a>\n\t\t\t\t</span>\n\t\t\t</li>\n\t\t\t<li class="gpgkey">\n\t\t\t\t<textarea class="code"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push(can.view.txt(1, 'textarea', 0, this, function () {
                            return user.Gpgkey.armored_key;
                        }));
                        ___v1ew.push('</textarea>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\t');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/user/workspace_user_sidebar*/
define('app/component/user/workspace_user_sidebar', [
    'exports',
    'passbolt-mad/control/bus',
    'app/component/workspace/sidebar',
    'app/component/user_group/user_groups_list',
    'app/view/component/user/workspace_user_sidebar',
    'app/view/template/component/user/workspace_user_sidebar.ejs!'
], function (exports, _bus, _sidebar, _user_groups_list, _workspace_user_sidebar, _workspace_user_sidebar3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _bus2 = _interopRequireDefault(_bus);
    var _sidebar2 = _interopRequireDefault(_sidebar);
    var _user_groups_list2 = _interopRequireDefault(_user_groups_list);
    var _workspace_user_sidebar2 = _interopRequireDefault(_workspace_user_sidebar);
    var _workspace_user_sidebar4 = _interopRequireDefault(_workspace_user_sidebar3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceUserSidebarComponent = _sidebar2.default.extend('passbolt.component.user.WorkspaceUserSidebar', {
        defaults: {
            label: 'User Details Controller',
            viewClass: _workspace_user_sidebar2.default,
            template: _workspace_user_sidebar4.default,
            selectedItem: null
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('user', this.options.selectedItem);
        },
        afterStart: function afterStart() {
            this._super();
            this._initUserGroupsSection();
        },
        _initUserGroupsSection: function _initUserGroupsSection() {
            if (this.options.selectedItem.active === undefined || this.options.selectedItem.active == '1') {
                var userGroups = new _user_groups_list2.default($('#js_user_groups', this.element), { user: this.options.selectedItem });
                userGroups.start();
            }
        },
        ' request_copy_publickey': function request_copy_publickey(el, ev) {
            var gpgKey = this.options.selectedItem.Gpgkey.armored_key;
            var data = {
                name: 'Public key',
                data: gpgKey
            };
            _bus2.default.trigger('passbolt.clipboard', data);
        }
    });
    exports.default = WorkspaceUserSidebarComponent;
});
/*app/view/template/component/workspace/create_button.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/workspace/create_button.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_workspace_create_button_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<i class="fa fa-fw fa-plus-circle"></i>\n<span>create</span>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/group/delete_confirm.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group/delete_confirm.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_delete_confirm_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(0, '', 0, this, function () {
                    var ___v1ew = [];
                    if (resources && resources.length > 0) {
                        ___v1ew.push('\n    ');
                        ___v1ew.push(can.view.txt(1, '', 0, this, function () {
                            return __('This group is associated with %s passwords. All users in this group will lose access to these passwords.', resources.length);
                        }));
                        ___v1ew.push('\n');
                    } else {
                        ;
                        ;
                        ___v1ew.push('\n    ');
                        ___v1ew.push(can.view.txt(1, '', 0, this, function () {
                            return __('This group is not associated with any password. You are good to go!');
                        }));
                        ___v1ew.push('\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/group/delete_error.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/group/delete_error.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_group_delete_error_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                var resourcesStr = '';
                resources.forEach(function (elt, index) {
                    resourcesStr += index > 0 ? ', ' + elt.Resource.name : elt.Resource.name;
                });
                ;
                ;
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(1, '', 0, this, function () {
                    return __('This group is the sole owner of %s %s: %s. You need to transfer the ownership to other users before you can proceed.', resources.length, resources.length > 1 ? __('passwords') : __('password'), resourcesStr);
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/user/workspace.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/workspace.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_workspace_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="js_users_workspace">\n    <div class="panel left">\n\t\t<div class="navigation first shortcuts">\n\t\t\t<ul id="js_wsp_users_filter_shortcuts" class="clearfix">\n\t\t\t</ul>\n\t\t</div>\n        <div class="navigation flat tree groups" id="js_wsp_users_groups"></div>\n    </div>\n    <div class="panel middle">\n        <div id="js_wsp_users_breadcrumb" class="breadcrumbs">\n        </div>\n        <div id="js_wsp_users_browser" class="tableview">\n        </div>\n    </div>\n    <div class="panel aside js_wsp_users_sidebar_second">\n    </div>\n    <div class="panel aside js_wsp_groups_sidebar_second">\n    </div>\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/user/delete_confirm.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/delete_confirm.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_delete_confirm_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(1, '', 0, this, function () {
                    return __('Please confirm you really want to delete the user. After clicking ok, the user will be');
                }));
                ___v1ew.push(' <strong>');
                ___v1ew.push(can.view.txt(1, 'strong', 0, this, function () {
                    return __('deleted permanently');
                }));
                ___v1ew.push('</strong>.\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/user/user_delete_error_dialog.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/user/user_delete_error_dialog.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_user_delete_error_dialog_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(0, '', 0, this, function () {
                    var ___v1ew = [];
                    if (this.resources) {
                        ___v1ew.push('\n');
                        ___v1ew.push(can.view.txt(1, '', 0, this, function () {
                            return __('This user is the sole owner of %s %s', resources.length, resources.length > 1 ? __('passwords') : __('password'));
                        }));
                        ___v1ew.push(':\n');
                        ___v1ew.push(can.view.txt(0, '', 0, this, function () {
                            var ___v1ew = [];
                            for (var i in resources) {
                                ___v1ew.push(can.view.txt(1, '', 0, this, function () {
                                    return (i != 0 ? ', ' : '') + resources[i].Resource.name;
                                }));
                            }
                            ;
                            return ___v1ew.join('');
                        }));
                        ___v1ew.push('.\n<br/>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, '', 0, this, function () {
                    var ___v1ew = [];
                    if (this.groups) {
                        ___v1ew.push('\n');
                        ___v1ew.push(can.view.txt(1, 'undefined', 0, this, function () {
                            return __('This user is the sole manager of %s %s', groups.length, groups.length > 1 ? __('groups') : __('group'));
                        }));
                        ___v1ew.push(':\n');
                        ___v1ew.push(can.view.txt(0, '', 0, this, function () {
                            var ___v1ew = [];
                            for (var i in groups) {
                                ___v1ew.push(can.view.txt(1, 'undefined', 0, this, function () {
                                    return (i != 0 ? ', ' : '') + groups[i].Group.name;
                                }));
                            }
                            ;
                            return ___v1ew.join('');
                        }));
                        ___v1ew.push('.\n<br/>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n<br/>\n');
                ___v1ew.push(can.view.txt(1, 'undefined', 0, this, function () {
                    return __('You need to transfer the ownership to other users before you can proceed.');
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/user/workspace*/
define('app/component/user/workspace', [
    'exports',
    'passbolt-mad/model/action',
    'app/component/user/workspace_breadcrumb',
    'passbolt-mad/component/button_dropdown',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/confirm',
    'passbolt-mad/component/dialog',
    'app/model/filter',
    'app/component/user/grid',
    'app/model/user',
    'app/component/group/edit',
    'app/component/group/workspace_group_sidebar',
    'app/component/user/workspace_groups_filter',
    'passbolt-mad/control/bus',
    'app/component/user/workspace_primary_menu',
    'app/component/workspace/secondary_menu',
    'app/component/user/workspace_shortcuts_filter',
    'app/form/user/create',
    'app/component/user/workspace_user_sidebar',
    'app/view/template/component/workspace/create_button.ejs!',
    'app/view/template/component/group/delete_confirm.ejs!',
    'app/view/template/component/group/delete_error.ejs!',
    'app/view/template/component/user/workspace.ejs!',
    'app/view/template/component/user/delete_confirm.ejs!',
    'app/view/template/component/user/user_delete_error_dialog.ejs!'
], function (exports, _action, _workspace_breadcrumb, _button_dropdown, _component, _component3, _confirm, _dialog, _filter, _grid, _user, _edit, _workspace_group_sidebar, _workspace_groups_filter, _bus, _workspace_primary_menu, _secondary_menu, _workspace_shortcuts_filter, _create, _workspace_user_sidebar, _create_button, _delete_confirm, _delete_error, _workspace, _delete_confirm3, _user_delete_error_dialog) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _workspace_breadcrumb2 = _interopRequireDefault(_workspace_breadcrumb);
    var _button_dropdown2 = _interopRequireDefault(_button_dropdown);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _confirm2 = _interopRequireDefault(_confirm);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _filter2 = _interopRequireDefault(_filter);
    var _grid2 = _interopRequireDefault(_grid);
    var _user2 = _interopRequireDefault(_user);
    var _edit2 = _interopRequireDefault(_edit);
    var _workspace_group_sidebar2 = _interopRequireDefault(_workspace_group_sidebar);
    var _workspace_groups_filter2 = _interopRequireDefault(_workspace_groups_filter);
    var _bus2 = _interopRequireDefault(_bus);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    var _secondary_menu2 = _interopRequireDefault(_secondary_menu);
    var _workspace_shortcuts_filter2 = _interopRequireDefault(_workspace_shortcuts_filter);
    var _create2 = _interopRequireDefault(_create);
    var _workspace_user_sidebar2 = _interopRequireDefault(_workspace_user_sidebar);
    var _create_button2 = _interopRequireDefault(_create_button);
    var _delete_confirm2 = _interopRequireDefault(_delete_confirm);
    var _delete_error2 = _interopRequireDefault(_delete_error);
    var _workspace2 = _interopRequireDefault(_workspace);
    var _delete_confirm4 = _interopRequireDefault(_delete_confirm3);
    var _user_delete_error_dialog2 = _interopRequireDefault(_user_delete_error_dialog);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserWorkspaceComponent = _component2.default.extend('passbolt.component.user.Workspace', {
        defaults: {
            name: 'user_workspace',
            template: _workspace2.default,
            selectedUsers: new can.Model.List(),
            selectedGroups: new can.Model.List(),
            filter: null,
            silentLoading: false,
            filterSettings: null
        },
        getDefaultFilterSettings: function getDefaultFilterSettings() {
            return new _filter2.default({
                id: 'default',
                label: __('All users'),
                order: ['Profile.last_name ASC']
            });
        }
    }, {
        afterStart: function afterStart() {
            this._initPrimaryMenu();
            this._initSecondaryMenu();
            this.options.mainButton = this._initMainActionButton();
            this._initBreadcrumb();
            this._initShortcutsFilter();
            this._initGroupsFilter();
            this._initGrid();
            this._initSecondarySidebar();
            var filter = null;
            if (this.options.filterSettings == undefined) {
                filter = this.constructor.getDefaultFilterSettings();
            } else {
                filter = this.options.filterSettings;
            }
            _bus2.default.trigger('filter_workspace', filter);
            this.on();
        },
        destroy: function destroy() {
            $('#js_wsp_primary_menu_wrapper').empty();
            $('#js_wsp_secondary_menu_wrapper').empty();
            $('.main-action-wrapper').empty();
            this.options.selectedUsers.splice(0, this.options.selectedUsers.length);
            this._super();
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var menu = _component4.default.create($('#js_wsp_primary_menu_wrapper'), 'last', _workspace_primary_menu2.default, {
                selectedUsers: this.options.selectedUsers,
                selectedGroups: this.options.selectedGroups
            });
            menu.start();
        },
        _initSecondaryMenu: function _initSecondaryMenu() {
            var menu = _component4.default.create($('#js_wsp_secondary_menu_wrapper'), 'last', _secondary_menu2.default, { selectedItems: this.options.selectedUsers });
            menu.start();
        },
        _initMainActionButton: function _initMainActionButton() {
            var button = null;
            var role = _user2.default.getCurrent().Role.name;
            if (role == 'admin') {
                button = _component4.default.create($('.main-action-wrapper'), 'last', _button_dropdown2.default, {
                    id: 'js_wsp_create_button',
                    template: _create_button2.default,
                    tag: 'a',
                    cssClasses: [
                        'button',
                        'primary'
                    ]
                });
                button.start();
                var userItem = new _action2.default({
                    id: uuid(),
                    label: __('New user'),
                    cssClasses: ['create-user'],
                    action: function action() {
                        button.view.close();
                        _bus2.default.trigger('request_user_creation');
                    }
                });
                button.options.menu.insertItem(userItem);
                var groupItem = new _action2.default({
                    id: uuid(),
                    label: __('New group'),
                    cssClasses: ['create-group'],
                    action: function action() {
                        button.view.close();
                        _bus2.default.trigger('request_group_creation');
                    }
                });
                button.options.menu.insertItem(groupItem);
            }
            return button;
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var component = new _workspace_breadcrumb2.default($('#js_wsp_users_breadcrumb'), { rootFilter: UserWorkspaceComponent.getDefaultFilterSettings() });
            component.start();
            this.breadcrumCtl = component;
        },
        _initShortcutsFilter: function _initShortcutsFilter() {
            var component = new _workspace_shortcuts_filter2.default('#js_wsp_users_filter_shortcuts', { allFilter: UserWorkspaceComponent.getDefaultFilterSettings() });
            component.start();
            this.userShortcut = component;
        },
        _initGroupsFilter: function _initGroupsFilter() {
            var component = new _workspace_groups_filter2.default('#js_wsp_users_groups', { selectedGroups: this.options.selectedGroups });
            component.start();
        },
        _initGrid: function _initGrid() {
            var component = new _grid2.default('#js_wsp_users_browser', { selectedUsers: this.options.selectedUsers });
            component.start();
        },
        _initSecondarySidebar: function _initSecondarySidebar() {
            new _workspace_user_sidebar2.default($('.js_wsp_users_sidebar_second', this.element), {
                id: 'js_user_details',
                selectedItems: this.options.selectedUsers
            });
            $('.js_wsp_users_sidebar_second', this.element).hide();
            new _workspace_group_sidebar2.default($('.js_wsp_groups_sidebar_second', this.element), {
                id: 'js_group_details',
                selectedItems: this.options.selectedGroups
            });
            $('.js_wsp_groups_sidebar_second', this.element).hide();
        },
        openEditGroupDialog: function openEditGroupDialog(group) {
            var dialog = new _dialog2.default(null, {
                label: group.isNew() ? __('Create group') : __('Edit group'),
                cssClasses: [
                    'edit-group-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            dialog.add(_edit2.default, {
                id: 'js_edit_group',
                data: { Group: group }
            });
        },
        openCreateUserDialog: function openCreateUserDialog(user) {
            var self = this;
            var dialog = new _dialog2.default(null, {
                label: __('Add User'),
                cssClasses: [
                    'create-user-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var form = dialog.add(_create2.default, {
                data: user,
                action: 'create',
                callbacks: {
                    submit: function submit(data) {
                        user.attr(data['passbolt.model.User']);
                        self._saveUser(user, form, dialog);
                    }
                }
            });
            form.load(user);
        },
        openEditUserDialog: function openEditUserDialog(user) {
            var self = this;
            var dialog = new _dialog2.default(null, {
                label: __('Edit User'),
                cssClasses: [
                    'edit-user-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var form = dialog.add(_create2.default, {
                data: user,
                action: 'edit',
                callbacks: {
                    submit: function submit(data) {
                        user.attr(data['passbolt.model.User']);
                        self._saveUser(user, form, dialog);
                    }
                }
            });
            form.load(user);
        },
        _saveUser: function _saveUser(user, form, dialog) {
            user.save().then(function () {
                dialog.remove();
            }, function (v) {
                form.showErrors(JSON.parse(v.responseText)['body']);
            });
        },
        deleteGroup: function deleteGroup(group) {
            var self = this;
            group.deleteDryRun(group.id).then(function (response) {
                self._deleteGroupConfirm(group, response);
            }, function (response) {
                var resources = response.responseJSON.body.resources;
                self._deleteGroupError(group, resources);
            });
        },
        _deleteGroupConfirm: function _deleteGroupConfirm(group, resources) {
            var dialog = new _confirm2.default(null, {
                label: __('Are you sure ?'),
                subtitle: __('You are about to delete the group "%s"!', group.name),
                submitButton: {
                    label: __('delete group'),
                    cssClasses: ['warning']
                },
                content: _delete_confirm2.default,
                viewData: {
                    group: group,
                    resources: resources
                },
                action: function action() {
                    group.destroy();
                }
            });
            dialog.start();
        },
        _deleteGroupError: function _deleteGroupError(group, resources) {
            var dialog = new _confirm2.default(null, {
                label: __('You cannot delete this group!'),
                subtitle: __('You are trying to delete the group "%s"!', group.name),
                submitButton: {
                    label: __('Got it!'),
                    cssClasses: []
                },
                content: _delete_error2.default,
                viewData: {
                    group: group,
                    resources: resources
                },
                action: function action() {
                    dialog.remove();
                }
            });
            dialog.start();
        },
        deleteUser: function deleteUser(user) {
            var self = this;
            user.deleteDryRun(user.id).then(function () {
                self._deleteUserConfirm(user);
            }).then(null, function (response) {
                if (response.responseJSON.body) {
                    var data = response.responseJSON.body;
                    self._deleteUserError(user, data);
                }
            });
        },
        _deleteUserConfirm: function _deleteUserConfirm(user) {
            new _confirm2.default(null, {
                label: __('Do you really want to delete?'),
                content: _delete_confirm4.default,
                submitButton: {
                    label: __('delete user'),
                    cssClasses: ['warning']
                },
                action: function action() {
                    user.destroy();
                }
            }).start();
        },
        _deleteUserError: function _deleteUserError(user, data) {
            var dialog = new _confirm2.default(null, {
                label: __('You cannot delete this user!'),
                subtitle: __('You are trying to delete the user "%s"!', user.Profile.fullName()),
                content: _user_delete_error_dialog2.default,
                viewData: data,
                submitButton: {
                    label: __('Got it!'),
                    cssClasses: []
                },
                action: function action() {
                    dialog.remove();
                }
            }).start();
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev, filter) {
            if (typeof filter.name != 'undefined') {
                if (filter.name == 'all') {
                    this.options.selectedGroups.splice(0, this.options.selectedGroups.length);
                }
            }
            this.options.selectedUsers.splice(0, this.options.selectedUsers.length);
            this.breadcrumCtl.load(filter);
        },
        '{mad.bus.element} request_group_creation': function madBusElementRequest_group_creation(el, ev, data) {
            var group = new _user2.default();
            this.openEditGroupDialog(group);
        },
        '{mad.bus.element} request_group_edition': function madBusElementRequest_group_edition(el, ev, group) {
            this.openEditGroupDialog(group);
        },
        '{mad.bus.element} request_group_deletion': function madBusElementRequest_group_deletion(el, ev, group) {
            this.deleteGroup(group);
        },
        '{mad.bus.element} request_user_creation': function madBusElementRequest_user_creation(el, ev) {
            var user = new _user2.default();
            this.openCreateUserDialog(user);
        },
        '{mad.bus.element} request_user_edition': function madBusElementRequest_user_edition(el, ev) {
            var user = this.options.selectedUsers[0];
            this.openEditUserDialog(user);
        },
        '{mad.bus.element} request_user_deletion': function madBusElementRequest_user_deletion(el, ev, user) {
            this.deleteUser(user);
        },
        '{mad.bus.element} reset_filters': function madBusElementReset_filters(el, ev) {
            var filter = _filter2.default.model({ name: 'all' });
            _bus2.default.trigger('filter_workspace', filter);
            this.userShortcut.selectItem(this.userShortcut.options.items[0]);
        }
    });
    exports.default = UserWorkspaceComponent;
});
/*app/view/template/component/navigation/filter.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/navigation/filter.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_navigation_filter_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<form id="js_app_filter_form" class="search">\n    <div class="input search required">\n        <label for="js_app_filter_keywords"> Search</label>\n        <input id="js_app_filter_keywords" class="required" maxlength="50" type="search" placeholder="search" />\n    </div>\n    <button value="search">\n        <i class="fa fa-fw fa-search"></i>\n        <span class="text visuallyhidden">search</span>\n    </button>\n</form>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/navigation/filter*/
define('app/component/navigation/filter', [
    'exports',
    'passbolt-mad/component/component',
    'app/model/filter',
    'app/view/component/navigation/filter',
    'passbolt-mad/form/form',
    'passbolt-mad/control/bus',
    'app/component/settings/workspace',
    'passbolt-mad/form/element/textbox',
    'app/component/user/workspace',
    'app/view/template/component/navigation/filter.ejs!'
], function (exports, _component, _filter, _filter3, _form, _bus, _workspace, _textbox, _workspace3, _filter5) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _filter2 = _interopRequireDefault(_filter);
    var _filter4 = _interopRequireDefault(_filter3);
    var _form2 = _interopRequireDefault(_form);
    var _bus2 = _interopRequireDefault(_bus);
    var _workspace2 = _interopRequireDefault(_workspace);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _workspace4 = _interopRequireDefault(_workspace3);
    var _filter6 = _interopRequireDefault(_filter5);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FilterComponent = _component2.default.extend('passbolt.component.navigation.Filter', {
        defaults: {
            template: _filter6.default,
            viewClass: _filter4.default
        }
    }, {
        workspace: null,
        afterStart: function afterStart() {
            this._initForm();
            this.on();
        },
        reset: function reset() {
            this.options.keywordsTextbox.setValue('');
        },
        _initForm: function _initForm() {
            var form = new _form2.default('#js_app_filter_form', {});
            form.start();
            this.options.filterForm = form;
            var keywordsTextbox = form.addElement(new _textbox2.default('#js_app_filter_keywords', {
                onChangeTimeout: 200,
                modelReference: 'passbolt.model.Filter.keywords'
            }));
            keywordsTextbox.start();
            this.options.keywordsTextbox = keywordsTextbox;
        },
        _updateFilter: function _updateFilter(keywords) {
            if (this.options.workspace instanceof _workspace2.default) {
                var filter = _workspace4.default.getDefaultFilterSettings();
                filter.setRule('keywords', keywords);
                _bus2.default.trigger('request_workspace', [
                    'user',
                    { filterSettings: filter }
                ]);
            } else {
                var filter = this.options.workspace.constructor.getDefaultFilterSettings();
                filter.setRule('keywords', keywords);
                _bus2.default.trigger('filter_workspace', filter);
            }
        },
        _updateSearchPlaceholder: function _updateSearchPlaceholder(workspaceName) {
            var placeholder = '';
            switch (workspaceName) {
            case 'password_workspace':
                placeholder = __('search passwords');
                break;
            case 'settings_workspace':
                placeholder = __('search users');
                this.reset();
                break;
            case 'user_workspace':
                placeholder = __('search users');
                break;
            }
            this.options.keywordsTextbox.element.attr('placeholder', placeholder);
        },
        '{keywordsTextbox.element} changed': function keywordsTextboxElementChanged(el, ev, data) {
            var formData = this.options.filterForm.getData();
            var keywords = formData['passbolt.model.Filter']['keywords'];
            this._updateFilter(keywords);
        },
        '{mad.bus.element} workspace_enabled': function madBusElementWorkspace_enabled(el, event, workspace) {
            this.options.workspace = workspace;
            this._updateSearchPlaceholder(workspace.options.name);
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(element, evt, filter) {
            var formData = this.options.filterForm.getData(), keywords = filter.getRule('keywords');
            if (formData['passbolt.model.Filter']['keywords'] != keywords) {
                this.options.keywordsTextbox.setValue(keywords);
            }
        }
    });
    exports.default = FilterComponent;
});
/*app/view/component/footer/loading_bar*/
define('app/view/component/footer/loading_bar', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var LoadingBarView = _view2.default.extend('passbolt.view.component.footer.LoadingBar', {}, {
        update: function update(size, animate, callback) {
            animate = typeof animate != 'undefined' ? animate : true;
            callback = callback || null;
            var percent = size + '%';
            if (animate) {
                $('.progress-bar span', this.element).animate({ width: percent }, callback);
            } else {
                $('.progress-bar span', this.element).css('width', percent);
                if (callback) {
                    callback();
                }
            }
        }
    });
    exports.default = LoadingBarView;
});
/*app/component/footer/loading_bar*/
define('app/component/footer/loading_bar', [
    'exports',
    'passbolt-mad/component/component',
    'app/view/component/footer/loading_bar',
    'passbolt-mad/control/bus'
], function (exports, _component, _loading_bar, _bus) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _loading_bar2 = _interopRequireDefault(_loading_bar);
    var _bus2 = _interopRequireDefault(_bus);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var LoadingBarComponent = _component2.default.extend('passbolt.component.footer.LoadingBar', {
        defaults: {
            label: 'Loading Bar Component',
            viewClass: _loading_bar2.default,
            currentProcs: 0,
            previousProcs: 0,
            maxProcs: 0,
            loadingPercent: 0,
            postponedUpdate: false,
            progressionLeft: 100
        }
    }, {
        loading_start: function loading_start(callback) {
            this.view.update(20, true, function () {
                if (callback) {
                    callback();
                }
            });
        },
        loading_complete: function loading_complete(callback) {
            var self = this;
            this.options.progressionLeft = 100;
            this.view.update(100, true, function () {
                self.view.update(0, false);
                if (callback) {
                    callback();
                }
            });
        },
        stateLoading: function stateLoading(go) {
        },
        update: function update(postponedUpdate) {
            var self = this;
            if (typeof postponedUpdate != 'undefined' && postponedUpdate) {
                this.options.postponedUpdate = false;
            }
            if (this.state.is('updating')) {
                if (!this.options.postponedUpdate) {
                    this.options.postponedUpdate = true;
                    setTimeout(function () {
                        self.update(true);
                    }, 100);
                }
                return;
            } else {
                this.state.addState('updating');
            }
            var currentProcs = this.options.currentProcs;
            if (this.options.maxProcs < currentProcs) {
                this.options.maxProcs = currentProcs;
            }
            var diffProcs = currentProcs - this.options.previousProcs;
            if (!diffProcs) {
                this.state.removeState('updating');
            } else if (!currentProcs) {
                this.state.addState('completing');
                this.loading_complete(function () {
                    _bus2.default.trigger('passbolt_application_loading_completed', [this]);
                    self.state.setState('ready');
                });
            } else {
                if (!this.state.is('progressing')) {
                    _bus2.default.trigger('passbolt_application_loading', [this]);
                    this.state.addState('progressing');
                }
                var procSpace = 100 / this.options.maxProcs * 1 / 2;
                var spaceLeft = (this.options.maxProcs - (this.options.maxProcs - this.options.currentProcs)) * procSpace;
                if (spaceLeft <= this.options.progressionLeft) {
                    this.options.progressionLeft = spaceLeft;
                }
                this.view.update(100 - this.options.progressionLeft, true, function () {
                    self.state.removeState('updating');
                });
            }
            this.options.previousProcs = currentProcs;
        },
        '{mad.bus.element} passbolt_component_loading_start': function madBusElementPassbolt_component_loading_start(el, ev, component) {
            if (!component.options.silentLoading) {
                this.options.currentProcs++;
                this.update();
            }
        },
        '{mad.bus.element} passbolt_component_loading_complete': function madBusElementPassbolt_component_loading_complete(el, ev, component) {
            if (!component.options.silentLoading) {
                this.options.currentProcs--;
                this.update();
            }
        },
        '{mad.bus.element} mad_ajax_request_start': function madBusElementMad_ajax_request_start(el, ev, request) {
            _bus2.default.trigger('passbolt_ajax_request_start', request);
        },
        '{mad.bus.element} mad_ajax_request_complete': function madBusElementMad_ajax_request_complete(el, ev, request) {
            _bus2.default.trigger('passbolt_ajax_request_complete', request);
        },
        '{mad.bus.element} passbolt_ajax_request_start': function madBusElementPassbolt_ajax_request_start(el, ev, request) {
            if (!request.silentLoading) {
                this.options.currentProcs++;
                this.update();
            }
        },
        '{mad.bus.element} passbolt_ajax_request_complete': function madBusElementPassbolt_ajax_request_complete(el, ev, request) {
            if (!request.silentLoading) {
                this.options.currentProcs--;
                this.update();
            }
        },
        '{mad.bus.element} passbolt_loading': function madBusElementPassbolt_loading(el, ev) {
            this.options.currentProcs++;
            this.update();
        },
        '{mad.bus.element} passbolt_loading_complete': function madBusElementPassbolt_loading_complete(el, ev) {
            this.options.currentProcs--;
            this.update();
        }
    });
    exports.default = LoadingBarComponent;
});
/*app/component/navigation/left*/
define('app/component/navigation/left', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu'
], function (exports, _action, _bus, _menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var NavigationLeft = _menu2.default.extend('passbolt.component.AppNavigationLeft', { defaults: { selected: null } }, {
        afterStart: function afterStart() {
            var _this = this;
            var homeItem = new _action2.default({
                id: 'js_app_nav_left_home_link',
                label: __('home'),
                cssClasses: ['home'],
                action: function action() {
                    return _this._goHome();
                }
            });
            this.insertItem(homeItem);
            var passwordsItem = new _action2.default({
                id: 'js_app_nav_left_password_wsp_link',
                label: __('passwords'),
                cssClasses: ['password'],
                action: function action() {
                    return _this._goToPasswordWorkspace();
                }
            });
            this.insertItem(passwordsItem);
            var usersItem = new _action2.default({
                id: 'js_app_nav_left_user_wsp_link',
                label: __('users'),
                cssClasses: ['user'],
                action: function action() {
                    return _this._goToUserWorkspace();
                }
            });
            this.insertItem(usersItem);
        },
        _goHome: function _goHome() {
            this.options.selected = 'home';
            _bus2.default.trigger('request_workspace', 'password');
        },
        _goToPasswordWorkspace: function _goToPasswordWorkspace() {
            this.options.selected = 'password';
            _bus2.default.trigger('request_workspace', 'password');
        },
        _goToUserWorkspace: function _goToUserWorkspace() {
            this.options.selected = 'user';
            _bus2.default.trigger('request_workspace', 'user');
        },
        '{mad.bus.element} request_workspace': function madBusElementRequest_workspace(el, event, workspace, options) {
            if (this.options.selected != workspace) {
                var li = $('li.' + workspace), itemClass = this.getItemClass();
                if (itemClass) {
                    var data = li.data(itemClass.fullName);
                    if (typeof data != 'undefined') {
                        this.selectItem(data);
                    }
                }
            }
        }
    });
    exports.default = NavigationLeft;
});
/*app/component/navigation/right*/
define('app/component/navigation/right', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/menu'
], function (exports, _action, _menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _menu2 = _interopRequireDefault(_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var NavigationRight = _menu2.default.extend('passbolt.component.AppNavigationRight', { defaults: {} }, {
        afterStart: function afterStart() {
            var _this = this;
            var item = new _action2.default({
                id: uuid(),
                label: __('logout'),
                cssClasses: ['logout'],
                action: function action() {
                    return _this._logout();
                }
            });
            this.insertItem(item);
        },
        _logout: function _logout() {
            document.location.href = APP_URL + '/auth/logout';
        }
    });
    exports.default = NavigationRight;
});
/*app/model/notification*/
define('app/model/notification', [
    'exports',
    'passbolt-mad/model/model'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Notification = _model2.default.extend('passbolt.model.Notification', {
        attributes: {
            status: 'string',
            title: 'string'
        }
    }, {});
    exports.default = Notification;
});
/*app/view/component/footer/notification*/
define('app/view/component/footer/notification', [
    'exports',
    'passbolt-mad/config/config',
    'passbolt-mad/view/view'
], function (exports, _config, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _config2 = _interopRequireDefault(_config);
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var NotificationView = _view2.default.extend('passbolt.view.component.Notification', {
        defaults: {
            timeout: 2500,
            notifications: []
        }
    }, {
        init: function init(elt, opts, notifications) {
            var timeoutConf = _config2.default.read('notification.timeout');
            if (typeof timeoutConf != 'undefined') {
                this.options.timeout = timeoutConf;
            }
            this._super(elt, opts);
        },
        load: function load(notification) {
            this.notifications.push(notification);
        },
        render: function render() {
            var self = this;
            var notifications = this.getController().options.notifications, notification = notifications.shift();
            this.getController().setViewData(notification);
            setTimeout(function () {
                if (notifications.length) {
                    self.getController().refresh();
                } else {
                    self.getController().setState('hidden');
                }
            }, self.options.timeout);
            return this._super();
        }
    });
    exports.default = NotificationView;
});
/*app/view/template/component/footer/notification.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/footer/notification.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_footer_notification_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<span class="message animated fadeInUp ');
                ___v1ew.push(can.view.txt(true, 'span', 'class', this, function () {
                    return title;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(true, 'span', 'class', this, function () {
                    return status;
                }));
                ___v1ew.push('" id="notification_');
                ___v1ew.push(can.view.txt(true, 'span', 'id', this, function () {
                    return id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <strong>');
                ___v1ew.push(can.view.txt(1, 'strong', 0, this, function () {
                    return status;
                }));
                ___v1ew.push('</strong>\n    ');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return message;
                }));
                ___v1ew.push('\n</span>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/footer/notification*/
define('app/component/footer/notification', [
    'exports',
    'app/util/common',
    'passbolt-mad/component/component',
    'passbolt-mad/config/config',
    'app/model/notification',
    'app/view/component/footer/notification',
    'app/view/template/component/footer/notification.ejs!'
], function (exports, _common, _component, _config, _notification, _notification3, _notification5) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _common2 = _interopRequireDefault(_common);
    var _component2 = _interopRequireDefault(_component);
    var _config2 = _interopRequireDefault(_config);
    var _notification2 = _interopRequireDefault(_notification);
    var _notification4 = _interopRequireDefault(_notification3);
    var _notification6 = _interopRequireDefault(_notification5);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var NotificationComponent = _component2.default.extend('passbolt.component.footer.Notification', {
        defaults: {
            label: 'Notification Component',
            viewClass: _notification4.default,
            status: 'hidden',
            notifications: [],
            template: _notification6.default
        }
    }, {
        _readSettings: function _readSettings(notification) {
            var notifSettings = _config2.default.read('notification.messages.' + notification.title);
            if (notifSettings == undefined) {
                if (notification.status == 'error') {
                    return {
                        'msg': notification.data.header.message,
                        'severity': 'error'
                    };
                }
                return null;
            }
            return notifSettings;
        },
        _getNotificationSettings: function _getNotificationSettings(notification) {
            var notifSettings = this._readSettings(notification);
            if (notifSettings == null) {
                return null;
            }
            if (can.getObject('severity', notifSettings) == undefined) {
                notifSettings.severity = notification.status != undefined ? notification.status : 'notice';
            }
            if (can.getObject('group', notifSettings) == undefined) {
                notifSettings.group = 'main';
            }
            if (can.getObject('msg', notifSettings) == undefined) {
                return null;
            }
            return notifSettings;
        },
        _buildMessage: function _buildMessage(notification, settings) {
            var msg = can.getObject('msg', settings);
            var variables = msg.match(/%([^%]*)%/g);
            var data = notification.data;
            for (var i in variables) {
                var dataKey = variables[i].replace(/%/g, '');
                var value = can.getObject(dataKey, data);
                if (value == undefined) {
                    value = 'undefined';
                }
                msg = msg.replace(variables[i], value);
            }
            return msg;
        },
        _populateNotification: function _populateNotification(notification, settings) {
            notification.message = this._buildMessage(notification, settings);
            notification.status = notification.status != undefined ? notification.status : settings.severity;
            notification.severity = settings.severity;
            notification.id = _common2.default.uuid(notification.title);
            return notification;
        },
        _checkShouldBeDisplayed: function _checkShouldBeDisplayed(notification, settings) {
            var displaySeverity = _config2.default.read('notification.displaySeverity');
            if (displaySeverity == undefined) {
                return false;
            }
            if (displaySeverity.indexOf(notification.severity) != -1) {
                return true;
            }
            return false;
        },
        load: function load(notification) {
            if (notification.title == undefined) {
                return;
            }
            var notifSettings = this._getNotificationSettings(notification);
            if (notifSettings === null) {
                return;
            }
            var notification = this._populateNotification(notification, notifSettings);
            var display = this._checkShouldBeDisplayed(notification, notifSettings);
            if (notification === null) {
                return;
            }
            if (display === false) {
                return;
            }
            this.options.notifications.push(notification);
            if (this.view == null) {
                this.start();
            } else if (this.state.is('hidden')) {
                this.refresh();
                this.setState('ready');
            }
        },
        '{mad.bus.element} passbolt_notify': function madBusElementPassbolt_notify(el, ev, notif) {
            this.load(new _notification2.default(notif));
        }
    });
    exports.default = NotificationComponent;
});
/*app/model/permission_type*/
define('app/model/permission_type', [
    'exports',
    'passbolt-mad/net/ajax',
    'passbolt-mad/model/model',
    'passbolt-mad/model/serializer/cake_serializer'
], function (exports, _ajax, _model, _cake_serializer) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _model2 = _interopRequireDefault(_model);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PermissionType = _model2.default.extend('passbolt.model.PermissionType', {
        READ: 1,
        UPDATE: 7,
        ADMIN: 15,
        validateRules: {
            serial: [{
                    rule: 'choice',
                    options: {
                        callback: function callback() {
                            return $.map(PermissionType.PERMISSION_TYPES, function (element, index) {
                                return index;
                            });
                        }
                    }
                }]
        },
        attributes: {
            serial: 'string',
            name: 'string',
            description: 'string'
        },
        PERMISSION_TYPES: {
            1: __('read'),
            7: __('update'),
            15: __('owner')
        },
        formatToString: function formatToString(permId) {
            var returnValue = '';
            if (permId == undefined) {
                console.error('Warning, PermissionType.toString called without permId');
                return 'can read';
            }
            switch (permId.toString()) {
            case PermissionType.ADMIN.toString():
                returnValue = __('is %s', this.PERMISSION_TYPES[permId]);
                break;
            default:
                returnValue = __('can %s', this.PERMISSION_TYPES[permId]);
                break;
            }
            return returnValue;
        }
    }, {
        toString: function toString(format) {
            var returnValue;
            switch (format) {
            case 'long':
                returnValue = PermissionType.PERMISSION_TYPES[this.serial];
                if (this.serial != PermissionType.ADMIN.toString()) {
                    returnValue = __('can %s', returnValue);
                }
                break;
            case 'short':
            default:
                returnValue = PermissionType.PERMISSION_TYPES[this.serial];
            }
            return returnValue;
        },
        destroy: function destroy() {
        }
    });
    exports.default = PermissionType;
});
/*app/model/model*/
define('app/model/model', [
    'exports',
    'passbolt-mad/model/model'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Model = _model2.default.extend('passbolt.Model', {
        getFilteredFields: function getFilteredFields(filteredCase) {
            return false;
        },
        filterAttributes: function filterAttributes(attrs) {
            var filteredAttrs = {};
            if (typeof attrs.__FILTER_CASE__ != 'undefined') {
                var fields = this.getFilteredFields(attrs.__FILTER_CASE__);
                if (fields !== false) {
                    for (var i in fields) {
                        var value = can.getObject(fields[i], attrs);
                        can.getObject(fields[i], filteredAttrs, true, value);
                    }
                } else {
                    filteredAttrs = attrs;
                    delete filteredAttrs.__FILTER_CASE__;
                }
            } else {
                filteredAttrs = attrs;
            }
            return filteredAttrs;
        }
    }, {
        clone: function clone() {
            var data = this.attr();
            delete data[this.constructor.id];
            return new this.constructor(data);
        }
    });
    exports.default = Model;
});
/*app/model/favorite*/
define('app/model/favorite', [
    'exports',
    'passbolt-mad/net/ajax',
    'passbolt-mad/model/serializer/cake_serializer',
    'passbolt-mad/model/model'
], function (exports, _ajax, _cake_serializer, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Favorite = _model2.default.extend('passbolt.model.Favorite', {
        validateRules: {
            user_id: [],
            foreign_model: [],
            foreign_key: []
        },
        attributes: {
            id: 'string',
            user_id: 'string',
            foreign_model: 'string',
            foreign_key: 'string'
        },
        create: function create(attrs) {
            var params = _cake_serializer2.default.to(attrs, this);
            return _ajax2.default.request({
                url: APP_URL + 'favorites/resource/' + attrs['foreign_key'],
                type: 'POST',
                params: params
            }).pipe(function (data, textStatus, jqXHR) {
                var def = $.Deferred();
                def.resolveWith(this, [_cake_serializer2.default.from(data, self)]);
                return def;
            });
        },
        destroy: function destroy(id) {
            var params = { id: id };
            return _ajax2.default.request({
                url: APP_URL + 'favorites/{id}',
                type: 'DELETE',
                params: params
            });
        }
    }, {});
    exports.default = Favorite;
});
/*node_modules/urijs/src/punycode*/
;
(function (root) {
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = typeof module == 'object' && module && !module.nodeType && module;
    var freeGlobal = typeof global == 'object' && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
    }
    var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = '-', regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
        }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
    function error(type) {
        throw new RangeError(errors[type]);
    }
    function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
            result[length] = fn(array[length]);
        }
        return result;
    }
    function mapDomain(string, fn) {
        var parts = string.split('@');
        var result = '';
        if (parts.length > 1) {
            result = parts[0] + '@';
            string = parts[1];
        }
        string = string.replace(regexSeparators, '.');
        var labels = string.split('.');
        var encoded = map(labels, fn).join('.');
        return result + encoded;
    }
    function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
                extra = string.charCodeAt(counter++);
                if ((extra & 64512) == 56320) {
                    output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                } else {
                    output.push(value);
                    counter--;
                }
            } else {
                output.push(value);
            }
        }
        return output;
    }
    function ucs2encode(array) {
        return map(array, function (value) {
            var output = '';
            if (value > 65535) {
                value -= 65536;
                output += stringFromCharCode(value >>> 10 & 1023 | 55296);
                value = 56320 | value & 1023;
            }
            output += stringFromCharCode(value);
            return output;
        }).join('');
    }
    function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
            return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
            return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
            return codePoint - 97;
        }
        return base;
    }
    function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    function decode(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
            basic = 0;
        }
        for (j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
                error('not-basic');
            }
            output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
            for (oldi = i, w = 1, k = base;; k += base) {
                if (index >= inputLength) {
                    error('invalid-input');
                }
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) {
                    error('overflow');
                }
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) {
                    break;
                }
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) {
                    error('overflow');
                }
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
                error('overflow');
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < 128) {
                output.push(stringFromCharCode(currentValue));
            }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
            output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
            for (m = maxInt, j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) {
                    m = currentValue;
                }
            }
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error('overflow');
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) {
                    error('overflow');
                }
                if (currentValue == n) {
                    for (q = delta, k = base;; k += base) {
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) {
                            break;
                        }
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join('');
    }
    function toUnicode(input) {
        return mapDomain(input, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    function toASCII(input) {
        return mapDomain(input, function (string) {
            return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
        });
    }
    punycode = {
        'version': '1.3.2',
        'ucs2': {
            'decode': ucs2decode,
            'encode': ucs2encode
        },
        'decode': decode,
        'encode': encode,
        'toASCII': toASCII,
        'toUnicode': toUnicode
    };
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        define('node_modules/urijs/src/punycode', function () {
            return punycode;
        });
    } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
            freeModule.exports = punycode;
        } else {
            for (key in punycode) {
                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
            }
        }
    } else {
        root.punycode = punycode;
    }
}(this));
/*node_modules/urijs/src/SecondLevelDomains*/
(function (root, factory) {
    'use strict';
    if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        define('node_modules/urijs/src/SecondLevelDomains', factory);
    } else {
        root.SecondLevelDomains = factory(root);
    }
}(this, function (root) {
    'use strict';
    var _SecondLevelDomains = root && root.SecondLevelDomains;
    var SLD = {
        list: {
            'ac': ' com gov mil net org ',
            'ae': ' ac co gov mil name net org pro sch ',
            'af': ' com edu gov net org ',
            'al': ' com edu gov mil net org ',
            'ao': ' co ed gv it og pb ',
            'ar': ' com edu gob gov int mil net org tur ',
            'at': ' ac co gv or ',
            'au': ' asn com csiro edu gov id net org ',
            'ba': ' co com edu gov mil net org rs unbi unmo unsa untz unze ',
            'bb': ' biz co com edu gov info net org store tv ',
            'bh': ' biz cc com edu gov info net org ',
            'bn': ' com edu gov net org ',
            'bo': ' com edu gob gov int mil net org tv ',
            'br': ' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
            'bs': ' com edu gov net org ',
            'bz': ' du et om ov rg ',
            'ca': ' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
            'ck': ' biz co edu gen gov info net org ',
            'cn': ' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
            'co': ' com edu gov mil net nom org ',
            'cr': ' ac c co ed fi go or sa ',
            'cy': ' ac biz com ekloges gov ltd name net org parliament press pro tm ',
            'do': ' art com edu gob gov mil net org sld web ',
            'dz': ' art asso com edu gov net org pol ',
            'ec': ' com edu fin gov info med mil net org pro ',
            'eg': ' com edu eun gov mil name net org sci ',
            'er': ' com edu gov ind mil net org rochest w ',
            'es': ' com edu gob nom org ',
            'et': ' biz com edu gov info name net org ',
            'fj': ' ac biz com info mil name net org pro ',
            'fk': ' ac co gov net nom org ',
            'fr': ' asso com f gouv nom prd presse tm ',
            'gg': ' co net org ',
            'gh': ' com edu gov mil org ',
            'gn': ' ac com gov net org ',
            'gr': ' com edu gov mil net org ',
            'gt': ' com edu gob ind mil net org ',
            'gu': ' com edu gov net org ',
            'hk': ' com edu gov idv net org ',
            'hu': ' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
            'id': ' ac co go mil net or sch web ',
            'il': ' ac co gov idf k12 muni net org ',
            'in': ' ac co edu ernet firm gen gov i ind mil net nic org res ',
            'iq': ' com edu gov i mil net org ',
            'ir': ' ac co dnssec gov i id net org sch ',
            'it': ' edu gov ',
            'je': ' co net org ',
            'jo': ' com edu gov mil name net org sch ',
            'jp': ' ac ad co ed go gr lg ne or ',
            'ke': ' ac co go info me mobi ne or sc ',
            'kh': ' com edu gov mil net org per ',
            'ki': ' biz com de edu gov info mob net org tel ',
            'km': ' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
            'kn': ' edu gov net org ',
            'kr': ' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
            'kw': ' com edu gov net org ',
            'ky': ' com edu gov net org ',
            'kz': ' com edu gov mil net org ',
            'lb': ' com edu gov net org ',
            'lk': ' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
            'lr': ' com edu gov net org ',
            'lv': ' asn com conf edu gov id mil net org ',
            'ly': ' com edu gov id med net org plc sch ',
            'ma': ' ac co gov m net org press ',
            'mc': ' asso tm ',
            'me': ' ac co edu gov its net org priv ',
            'mg': ' com edu gov mil nom org prd tm ',
            'mk': ' com edu gov inf name net org pro ',
            'ml': ' com edu gov net org presse ',
            'mn': ' edu gov org ',
            'mo': ' com edu gov net org ',
            'mt': ' com edu gov net org ',
            'mv': ' aero biz com coop edu gov info int mil museum name net org pro ',
            'mw': ' ac co com coop edu gov int museum net org ',
            'mx': ' com edu gob net org ',
            'my': ' com edu gov mil name net org sch ',
            'nf': ' arts com firm info net other per rec store web ',
            'ng': ' biz com edu gov mil mobi name net org sch ',
            'ni': ' ac co com edu gob mil net nom org ',
            'np': ' com edu gov mil net org ',
            'nr': ' biz com edu gov info net org ',
            'om': ' ac biz co com edu gov med mil museum net org pro sch ',
            'pe': ' com edu gob mil net nom org sld ',
            'ph': ' com edu gov i mil net ngo org ',
            'pk': ' biz com edu fam gob gok gon gop gos gov net org web ',
            'pl': ' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
            'pr': ' ac biz com edu est gov info isla name net org pro prof ',
            'ps': ' com edu gov net org plo sec ',
            'pw': ' belau co ed go ne or ',
            'ro': ' arts com firm info nom nt org rec store tm www ',
            'rs': ' ac co edu gov in org ',
            'sb': ' com edu gov net org ',
            'sc': ' com edu gov net org ',
            'sh': ' co com edu gov net nom org ',
            'sl': ' com edu gov net org ',
            'st': ' co com consulado edu embaixada gov mil net org principe saotome store ',
            'sv': ' com edu gob org red ',
            'sz': ' ac co org ',
            'tr': ' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
            'tt': ' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
            'tw': ' club com ebiz edu game gov idv mil net org ',
            'mu': ' ac co com gov net or org ',
            'mz': ' ac co edu gov org ',
            'na': ' co com ',
            'nz': ' ac co cri geek gen govt health iwi maori mil net org parliament school ',
            'pa': ' abo ac com edu gob ing med net nom org sld ',
            'pt': ' com edu gov int net nome org publ ',
            'py': ' com edu gov mil net org ',
            'qa': ' com edu gov mil net org ',
            're': ' asso com nom ',
            'ru': ' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
            'rw': ' ac co com edu gouv gov int mil net ',
            'sa': ' com edu gov med net org pub sch ',
            'sd': ' com edu gov info med net org tv ',
            'se': ' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
            'sg': ' com edu gov idn net org per ',
            'sn': ' art com edu gouv org perso univ ',
            'sy': ' com edu gov mil net news org ',
            'th': ' ac co go in mi net or ',
            'tj': ' ac biz co com edu go gov info int mil name net nic org test web ',
            'tn': ' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
            'tz': ' ac co go ne or ',
            'ua': ' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
            'ug': ' ac co go ne or org sc ',
            'uk': ' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
            'us': ' dni fed isa kids nsn ',
            'uy': ' com edu gub mil net org ',
            've': ' co com edu gob info mil net org web ',
            'vi': ' co com k12 net org ',
            'vn': ' ac biz com edu gov health info int name net org pro ',
            'ye': ' co com gov ltd me net org plc ',
            'yu': ' ac co edu gov org ',
            'za': ' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
            'zm': ' ac co com edu gov net org sch ',
            'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',
            'net': 'gb jp se uk ',
            'org': 'ae',
            'de': 'com '
        },
        has: function (domain) {
            var tldOffset = domain.lastIndexOf('.');
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
                return false;
            }
            var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
            if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
                return false;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
                return false;
            }
            return sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') >= 0;
        },
        is: function (domain) {
            var tldOffset = domain.lastIndexOf('.');
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
                return false;
            }
            var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
            if (sldOffset >= 0) {
                return false;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
                return false;
            }
            return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
        },
        get: function (domain) {
            var tldOffset = domain.lastIndexOf('.');
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
                return null;
            }
            var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
            if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
                return null;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
                return null;
            }
            if (sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') < 0) {
                return null;
            }
            return domain.slice(sldOffset + 1);
        },
        noConflict: function () {
            if (root.SecondLevelDomains === this) {
                root.SecondLevelDomains = _SecondLevelDomains;
            }
            return this;
        }
    };
    return SLD;
}));
/*node_modules/urijs/src/IPv6*/
(function (root, factory) {
    'use strict';
    if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        define('node_modules/urijs/src/IPv6', factory);
    } else {
        root.IPv6 = factory(root);
    }
}(this, function (root) {
    'use strict';
    var _IPv6 = root && root.IPv6;
    function bestPresentation(address) {
        var _address = address.toLowerCase();
        var segments = _address.split(':');
        var length = segments.length;
        var total = 8;
        if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
            segments.shift();
            segments.shift();
        } else if (segments[0] === '' && segments[1] === '') {
            segments.shift();
        } else if (segments[length - 1] === '' && segments[length - 2] === '') {
            segments.pop();
        }
        length = segments.length;
        if (segments[length - 1].indexOf('.') !== -1) {
            total = 7;
        }
        var pos;
        for (pos = 0; pos < length; pos++) {
            if (segments[pos] === '') {
                break;
            }
        }
        if (pos < total) {
            segments.splice(pos, 1, '0000');
            while (segments.length < total) {
                segments.splice(pos, 0, '0000');
            }
        }
        var _segments;
        for (var i = 0; i < total; i++) {
            _segments = segments[i].split('');
            for (var j = 0; j < 3; j++) {
                if (_segments[0] === '0' && _segments.length > 1) {
                    _segments.splice(0, 1);
                } else {
                    break;
                }
            }
            segments[i] = _segments.join('');
        }
        var best = -1;
        var _best = 0;
        var _current = 0;
        var current = -1;
        var inzeroes = false;
        for (i = 0; i < total; i++) {
            if (inzeroes) {
                if (segments[i] === '0') {
                    _current += 1;
                } else {
                    inzeroes = false;
                    if (_current > _best) {
                        best = current;
                        _best = _current;
                    }
                }
            } else {
                if (segments[i] === '0') {
                    inzeroes = true;
                    current = i;
                    _current = 1;
                }
            }
        }
        if (_current > _best) {
            best = current;
            _best = _current;
        }
        if (_best > 1) {
            segments.splice(best, _best, '');
        }
        length = segments.length;
        var result = '';
        if (segments[0] === '') {
            result = ':';
        }
        for (i = 0; i < length; i++) {
            result += segments[i];
            if (i === length - 1) {
                break;
            }
            result += ':';
        }
        if (segments[length - 1] === '') {
            result += ':';
        }
        return result;
    }
    function noConflict() {
        if (root.IPv6 === this) {
            root.IPv6 = _IPv6;
        }
        return this;
    }
    return {
        best: bestPresentation,
        noConflict: noConflict
    };
}));
/*node_modules/urijs/src/URI*/
(function (root, factory) {
    'use strict';
    if (typeof module === 'object' && module.exports) {
        module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
    } else if (typeof define === 'function' && define.amd) {
        define('node_modules/urijs/src/URI', [
            './punycode',
            './IPv6',
            './SecondLevelDomains'
        ], factory);
    } else {
        root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
    }
}(this, function (punycode, IPv6, SLD, root) {
    'use strict';
    var _URI = root && root.URI;
    function URI(url, base) {
        var _urlSupplied = arguments.length >= 1;
        var _baseSupplied = arguments.length >= 2;
        if (!(this instanceof URI)) {
            if (_urlSupplied) {
                if (_baseSupplied) {
                    return new URI(url, base);
                }
                return new URI(url);
            }
            return new URI();
        }
        if (url === undefined) {
            if (_urlSupplied) {
                throw new TypeError('undefined is not a valid argument for URI');
            }
            if (typeof location !== 'undefined') {
                url = location.href + '';
            } else {
                url = '';
            }
        }
        if (url === null) {
            if (_urlSupplied) {
                throw new TypeError('null is not a valid argument for URI');
            }
        }
        this.href(url);
        if (base !== undefined) {
            return this.absoluteTo(base);
        }
        return this;
    }
    function isInteger(value) {
        return /^[0-9]+$/.test(value);
    }
    URI.version = '1.19.0';
    var p = URI.prototype;
    var hasOwn = Object.prototype.hasOwnProperty;
    function escapeRegEx(string) {
        return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
    function getType(value) {
        if (value === undefined) {
            return 'Undefined';
        }
        return String(Object.prototype.toString.call(value)).slice(8, -1);
    }
    function isArray(obj) {
        return getType(obj) === 'Array';
    }
    function filterArrayValues(data, value) {
        var lookup = {};
        var i, length;
        if (getType(value) === 'RegExp') {
            lookup = null;
        } else if (isArray(value)) {
            for (i = 0, length = value.length; i < length; i++) {
                lookup[value[i]] = true;
            }
        } else {
            lookup[value] = true;
        }
        for (i = 0, length = data.length; i < length; i++) {
            var _match = lookup && lookup[data[i]] !== undefined || !lookup && value.test(data[i]);
            if (_match) {
                data.splice(i, 1);
                length--;
                i--;
            }
        }
        return data;
    }
    function arrayContains(list, value) {
        var i, length;
        if (isArray(value)) {
            for (i = 0, length = value.length; i < length; i++) {
                if (!arrayContains(list, value[i])) {
                    return false;
                }
            }
            return true;
        }
        var _type = getType(value);
        for (i = 0, length = list.length; i < length; i++) {
            if (_type === 'RegExp') {
                if (typeof list[i] === 'string' && list[i].match(value)) {
                    return true;
                }
            } else if (list[i] === value) {
                return true;
            }
        }
        return false;
    }
    function arraysEqual(one, two) {
        if (!isArray(one) || !isArray(two)) {
            return false;
        }
        if (one.length !== two.length) {
            return false;
        }
        one.sort();
        two.sort();
        for (var i = 0, l = one.length; i < l; i++) {
            if (one[i] !== two[i]) {
                return false;
            }
        }
        return true;
    }
    function trimSlashes(text) {
        var trim_expression = /^\/+|\/+$/g;
        return text.replace(trim_expression, '');
    }
    URI._parts = function () {
        return {
            protocol: null,
            username: null,
            password: null,
            hostname: null,
            urn: null,
            port: null,
            path: null,
            query: null,
            fragment: null,
            preventInvalidHostname: URI.preventInvalidHostname,
            duplicateQueryParameters: URI.duplicateQueryParameters,
            escapeQuerySpace: URI.escapeQuerySpace
        };
    };
    URI.preventInvalidHostname = false;
    URI.duplicateQueryParameters = false;
    URI.escapeQuerySpace = true;
    URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
    URI.idn_expression = /[^a-z0-9\._-]/i;
    URI.punycode_expression = /(xn--)/i;
    URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
    URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
    URI.findUri = {
        start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
        end: /[\s\r\n]|$/,
        trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
        parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g
    };
    URI.defaultPorts = {
        http: '80',
        https: '443',
        ftp: '21',
        gopher: '70',
        ws: '80',
        wss: '443'
    };
    URI.hostProtocols = [
        'http',
        'https'
    ];
    URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
    URI.domAttributes = {
        'a': 'href',
        'blockquote': 'cite',
        'link': 'href',
        'base': 'href',
        'script': 'src',
        'form': 'action',
        'img': 'src',
        'area': 'href',
        'iframe': 'src',
        'embed': 'src',
        'source': 'src',
        'track': 'src',
        'input': 'src',
        'audio': 'src',
        'video': 'src'
    };
    URI.getDomAttribute = function (node) {
        if (!node || !node.nodeName) {
            return undefined;
        }
        var nodeName = node.nodeName.toLowerCase();
        if (nodeName === 'input' && node.type !== 'image') {
            return undefined;
        }
        return URI.domAttributes[nodeName];
    };
    function escapeForDumbFirefox36(value) {
        return escape(value);
    }
    function strictEncodeURIComponent(string) {
        return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, '%2A');
    }
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
    URI.iso8859 = function () {
        URI.encode = escape;
        URI.decode = unescape;
    };
    URI.unicode = function () {
        URI.encode = strictEncodeURIComponent;
        URI.decode = decodeURIComponent;
    };
    URI.characters = {
        pathname: {
            encode: {
                expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
                map: {
                    '%24': '$',
                    '%26': '&',
                    '%2B': '+',
                    '%2C': ',',
                    '%3B': ';',
                    '%3D': '=',
                    '%3A': ':',
                    '%40': '@'
                }
            },
            decode: {
                expression: /[\/\?#]/g,
                map: {
                    '/': '%2F',
                    '?': '%3F',
                    '#': '%23'
                }
            }
        },
        reserved: {
            encode: {
                expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
                map: {
                    '%3A': ':',
                    '%2F': '/',
                    '%3F': '?',
                    '%23': '#',
                    '%5B': '[',
                    '%5D': ']',
                    '%40': '@',
                    '%21': '!',
                    '%24': '$',
                    '%26': '&',
                    '%27': '\'',
                    '%28': '(',
                    '%29': ')',
                    '%2A': '*',
                    '%2B': '+',
                    '%2C': ',',
                    '%3B': ';',
                    '%3D': '='
                }
            }
        },
        urnpath: {
            encode: {
                expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
                map: {
                    '%21': '!',
                    '%24': '$',
                    '%27': '\'',
                    '%28': '(',
                    '%29': ')',
                    '%2A': '*',
                    '%2B': '+',
                    '%2C': ',',
                    '%3B': ';',
                    '%3D': '=',
                    '%40': '@'
                }
            },
            decode: {
                expression: /[\/\?#:]/g,
                map: {
                    '/': '%2F',
                    '?': '%3F',
                    '#': '%23',
                    ':': '%3A'
                }
            }
        }
    };
    URI.encodeQuery = function (string, escapeQuerySpace) {
        var escaped = URI.encode(string + '');
        if (escapeQuerySpace === undefined) {
            escapeQuerySpace = URI.escapeQuerySpace;
        }
        return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
    };
    URI.decodeQuery = function (string, escapeQuerySpace) {
        string += '';
        if (escapeQuerySpace === undefined) {
            escapeQuerySpace = URI.escapeQuerySpace;
        }
        try {
            return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
        } catch (e) {
            return string;
        }
    };
    var _parts = {
        'encode': 'encode',
        'decode': 'decode'
    };
    var _part;
    var generateAccessor = function (_group, _part) {
        return function (string) {
            try {
                return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function (c) {
                    return URI.characters[_group][_part].map[c];
                });
            } catch (e) {
                return string;
            }
        };
    };
    for (_part in _parts) {
        URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
        URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
    }
    var generateSegmentedPathFunction = function (_sep, _codingFuncName, _innerCodingFuncName) {
        return function (string) {
            var actualCodingFunc;
            if (!_innerCodingFuncName) {
                actualCodingFunc = URI[_codingFuncName];
            } else {
                actualCodingFunc = function (string) {
                    return URI[_codingFuncName](URI[_innerCodingFuncName](string));
                };
            }
            var segments = (string + '').split(_sep);
            for (var i = 0, length = segments.length; i < length; i++) {
                segments[i] = actualCodingFunc(segments[i]);
            }
            return segments.join(_sep);
        };
    };
    URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
    URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
    URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
    URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');
    URI.encodeReserved = generateAccessor('reserved', 'encode');
    URI.parse = function (string, parts) {
        var pos;
        if (!parts) {
            parts = { preventInvalidHostname: URI.preventInvalidHostname };
        }
        pos = string.indexOf('#');
        if (pos > -1) {
            parts.fragment = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
        }
        pos = string.indexOf('?');
        if (pos > -1) {
            parts.query = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
        }
        if (string.substring(0, 2) === '//') {
            parts.protocol = null;
            string = string.substring(2);
            string = URI.parseAuthority(string, parts);
        } else {
            pos = string.indexOf(':');
            if (pos > -1) {
                parts.protocol = string.substring(0, pos) || null;
                if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
                    parts.protocol = undefined;
                } else if (string.substring(pos + 1, pos + 3) === '//') {
                    string = string.substring(pos + 3);
                    string = URI.parseAuthority(string, parts);
                } else {
                    string = string.substring(pos + 1);
                    parts.urn = true;
                }
            }
        }
        parts.path = string;
        return parts;
    };
    URI.parseHost = function (string, parts) {
        if (!string) {
            string = '';
        }
        string = string.replace(/\\/g, '/');
        var pos = string.indexOf('/');
        var bracketPos;
        var t;
        if (pos === -1) {
            pos = string.length;
        }
        if (string.charAt(0) === '[') {
            bracketPos = string.indexOf(']');
            parts.hostname = string.substring(1, bracketPos) || null;
            parts.port = string.substring(bracketPos + 2, pos) || null;
            if (parts.port === '/') {
                parts.port = null;
            }
        } else {
            var firstColon = string.indexOf(':');
            var firstSlash = string.indexOf('/');
            var nextColon = string.indexOf(':', firstColon + 1);
            if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
                parts.hostname = string.substring(0, pos) || null;
                parts.port = null;
            } else {
                t = string.substring(0, pos).split(':');
                parts.hostname = t[0] || null;
                parts.port = t[1] || null;
            }
        }
        if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
            pos++;
            string = '/' + string;
        }
        if (parts.preventInvalidHostname) {
            URI.ensureValidHostname(parts.hostname, parts.protocol);
        }
        if (parts.port) {
            URI.ensureValidPort(parts.port);
        }
        return string.substring(pos) || '/';
    };
    URI.parseAuthority = function (string, parts) {
        string = URI.parseUserinfo(string, parts);
        return URI.parseHost(string, parts);
    };
    URI.parseUserinfo = function (string, parts) {
        var firstSlash = string.indexOf('/');
        var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
        var t;
        if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
            t = string.substring(0, pos).split(':');
            parts.username = t[0] ? URI.decode(t[0]) : null;
            t.shift();
            parts.password = t[0] ? URI.decode(t.join(':')) : null;
            string = string.substring(pos + 1);
        } else {
            parts.username = null;
            parts.password = null;
        }
        return string;
    };
    URI.parseQuery = function (string, escapeQuerySpace) {
        if (!string) {
            return {};
        }
        string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');
        if (!string) {
            return {};
        }
        var items = {};
        var splits = string.split('&');
        var length = splits.length;
        var v, name, value;
        for (var i = 0; i < length; i++) {
            v = splits[i].split('=');
            name = URI.decodeQuery(v.shift(), escapeQuerySpace);
            value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;
            if (hasOwn.call(items, name)) {
                if (typeof items[name] === 'string' || items[name] === null) {
                    items[name] = [items[name]];
                }
                items[name].push(value);
            } else {
                items[name] = value;
            }
        }
        return items;
    };
    URI.build = function (parts) {
        var t = '';
        if (parts.protocol) {
            t += parts.protocol + ':';
        }
        if (!parts.urn && (t || parts.hostname)) {
            t += '//';
        }
        t += URI.buildAuthority(parts) || '';
        if (typeof parts.path === 'string') {
            if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
                t += '/';
            }
            t += parts.path;
        }
        if (typeof parts.query === 'string' && parts.query) {
            t += '?' + parts.query;
        }
        if (typeof parts.fragment === 'string' && parts.fragment) {
            t += '#' + parts.fragment;
        }
        return t;
    };
    URI.buildHost = function (parts) {
        var t = '';
        if (!parts.hostname) {
            return '';
        } else if (URI.ip6_expression.test(parts.hostname)) {
            t += '[' + parts.hostname + ']';
        } else {
            t += parts.hostname;
        }
        if (parts.port) {
            t += ':' + parts.port;
        }
        return t;
    };
    URI.buildAuthority = function (parts) {
        return URI.buildUserinfo(parts) + URI.buildHost(parts);
    };
    URI.buildUserinfo = function (parts) {
        var t = '';
        if (parts.username) {
            t += URI.encode(parts.username);
        }
        if (parts.password) {
            t += ':' + URI.encode(parts.password);
        }
        if (t) {
            t += '@';
        }
        return t;
    };
    URI.buildQuery = function (data, duplicateQueryParameters, escapeQuerySpace) {
        var t = '';
        var unique, key, i, length;
        for (key in data) {
            if (hasOwn.call(data, key) && key) {
                if (isArray(data[key])) {
                    unique = {};
                    for (i = 0, length = data[key].length; i < length; i++) {
                        if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
                            t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
                            if (duplicateQueryParameters !== true) {
                                unique[data[key][i] + ''] = true;
                            }
                        }
                    }
                } else if (data[key] !== undefined) {
                    t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
                }
            }
        }
        return t.substring(1);
    };
    URI.buildQueryParameter = function (name, value, escapeQuerySpace) {
        return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
    };
    URI.addQuery = function (data, name, value) {
        if (typeof name === 'object') {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    URI.addQuery(data, key, name[key]);
                }
            }
        } else if (typeof name === 'string') {
            if (data[name] === undefined) {
                data[name] = value;
                return;
            } else if (typeof data[name] === 'string') {
                data[name] = [data[name]];
            }
            if (!isArray(value)) {
                value = [value];
            }
            data[name] = (data[name] || []).concat(value);
        } else {
            throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
        }
    };
    URI.setQuery = function (data, name, value) {
        if (typeof name === 'object') {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    URI.setQuery(data, key, name[key]);
                }
            }
        } else if (typeof name === 'string') {
            data[name] = value === undefined ? null : value;
        } else {
            throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');
        }
    };
    URI.removeQuery = function (data, name, value) {
        var i, length, key;
        if (isArray(name)) {
            for (i = 0, length = name.length; i < length; i++) {
                data[name[i]] = undefined;
            }
        } else if (getType(name) === 'RegExp') {
            for (key in data) {
                if (name.test(key)) {
                    data[key] = undefined;
                }
            }
        } else if (typeof name === 'object') {
            for (key in name) {
                if (hasOwn.call(name, key)) {
                    URI.removeQuery(data, key, name[key]);
                }
            }
        } else if (typeof name === 'string') {
            if (value !== undefined) {
                if (getType(value) === 'RegExp') {
                    if (!isArray(data[name]) && value.test(data[name])) {
                        data[name] = undefined;
                    } else {
                        data[name] = filterArrayValues(data[name], value);
                    }
                } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
                    data[name] = undefined;
                } else if (isArray(data[name])) {
                    data[name] = filterArrayValues(data[name], value);
                }
            } else {
                data[name] = undefined;
            }
        } else {
            throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
        }
    };
    URI.hasQuery = function (data, name, value, withinArray) {
        switch (getType(name)) {
        case 'String':
            break;
        case 'RegExp':
            for (var key in data) {
                if (hasOwn.call(data, key)) {
                    if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
                        return true;
                    }
                }
            }
            return false;
        case 'Object':
            for (var _key in name) {
                if (hasOwn.call(name, _key)) {
                    if (!URI.hasQuery(data, _key, name[_key])) {
                        return false;
                    }
                }
            }
            return true;
        default:
            throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
        }
        switch (getType(value)) {
        case 'Undefined':
            return name in data;
        case 'Boolean':
            var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
            return value === _booly;
        case 'Function':
            return !!value(data[name], name, data);
        case 'Array':
            if (!isArray(data[name])) {
                return false;
            }
            var op = withinArray ? arrayContains : arraysEqual;
            return op(data[name], value);
        case 'RegExp':
            if (!isArray(data[name])) {
                return Boolean(data[name] && data[name].match(value));
            }
            if (!withinArray) {
                return false;
            }
            return arrayContains(data[name], value);
        case 'Number':
            value = String(value);
        case 'String':
            if (!isArray(data[name])) {
                return data[name] === value;
            }
            if (!withinArray) {
                return false;
            }
            return arrayContains(data[name], value);
        default:
            throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
        }
    };
    URI.joinPaths = function () {
        var input = [];
        var segments = [];
        var nonEmptySegments = 0;
        for (var i = 0; i < arguments.length; i++) {
            var url = new URI(arguments[i]);
            input.push(url);
            var _segments = url.segment();
            for (var s = 0; s < _segments.length; s++) {
                if (typeof _segments[s] === 'string') {
                    segments.push(_segments[s]);
                }
                if (_segments[s]) {
                    nonEmptySegments++;
                }
            }
        }
        if (!segments.length || !nonEmptySegments) {
            return new URI('');
        }
        var uri = new URI('').segment(segments);
        if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
            uri.path('/' + uri.path());
        }
        return uri.normalize();
    };
    URI.commonPath = function (one, two) {
        var length = Math.min(one.length, two.length);
        var pos;
        for (pos = 0; pos < length; pos++) {
            if (one.charAt(pos) !== two.charAt(pos)) {
                pos--;
                break;
            }
        }
        if (pos < 1) {
            return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
        }
        if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
            pos = one.substring(0, pos).lastIndexOf('/');
        }
        return one.substring(0, pos + 1);
    };
    URI.withinString = function (string, callback, options) {
        options || (options = {});
        var _start = options.start || URI.findUri.start;
        var _end = options.end || URI.findUri.end;
        var _trim = options.trim || URI.findUri.trim;
        var _parens = options.parens || URI.findUri.parens;
        var _attributeOpen = /[a-z0-9-]=["']?$/i;
        _start.lastIndex = 0;
        while (true) {
            var match = _start.exec(string);
            if (!match) {
                break;
            }
            var start = match.index;
            if (options.ignoreHtml) {
                var attributeOpen = string.slice(Math.max(start - 3, 0), start);
                if (attributeOpen && _attributeOpen.test(attributeOpen)) {
                    continue;
                }
            }
            var end = start + string.slice(start).search(_end);
            var slice = string.slice(start, end);
            var parensEnd = -1;
            while (true) {
                var parensMatch = _parens.exec(slice);
                if (!parensMatch) {
                    break;
                }
                var parensMatchEnd = parensMatch.index + parensMatch[0].length;
                parensEnd = Math.max(parensEnd, parensMatchEnd);
            }
            if (parensEnd > -1) {
                slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');
            } else {
                slice = slice.replace(_trim, '');
            }
            if (slice.length <= match[0].length) {
                continue;
            }
            if (options.ignore && options.ignore.test(slice)) {
                continue;
            }
            end = start + slice.length;
            var result = callback(slice, start, end, string);
            if (result === undefined) {
                _start.lastIndex = end;
                continue;
            }
            result = String(result);
            string = string.slice(0, start) + result + string.slice(end);
            _start.lastIndex = start + result.length;
        }
        _start.lastIndex = 0;
        return string;
    };
    URI.ensureValidHostname = function (v, protocol) {
        var hasHostname = !!v;
        var hasProtocol = !!protocol;
        var rejectEmptyHostname = false;
        if (hasProtocol) {
            rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
        }
        if (rejectEmptyHostname && !hasHostname) {
            throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);
        } else if (v && v.match(URI.invalid_hostname_characters)) {
            if (!punycode) {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
            }
            if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
            }
        }
    };
    URI.ensureValidPort = function (v) {
        if (!v) {
            return;
        }
        var port = Number(v);
        if (isInteger(port) && port > 0 && port < 65536) {
            return;
        }
        throw new TypeError('Port "' + v + '" is not a valid port');
    };
    URI.noConflict = function (removeAll) {
        if (removeAll) {
            var unconflicted = { URI: this.noConflict() };
            if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
                unconflicted.URITemplate = root.URITemplate.noConflict();
            }
            if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
                unconflicted.IPv6 = root.IPv6.noConflict();
            }
            if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
                unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
            }
            return unconflicted;
        } else if (root.URI === this) {
            root.URI = _URI;
        }
        return this;
    };
    p.build = function (deferBuild) {
        if (deferBuild === true) {
            this._deferred_build = true;
        } else if (deferBuild === undefined || this._deferred_build) {
            this._string = URI.build(this._parts);
            this._deferred_build = false;
        }
        return this;
    };
    p.clone = function () {
        return new URI(this);
    };
    p.valueOf = p.toString = function () {
        return this.build(false)._string;
    };
    function generateSimpleAccessor(_part) {
        return function (v, build) {
            if (v === undefined) {
                return this._parts[_part] || '';
            } else {
                this._parts[_part] = v || null;
                this.build(!build);
                return this;
            }
        };
    }
    function generatePrefixAccessor(_part, _key) {
        return function (v, build) {
            if (v === undefined) {
                return this._parts[_part] || '';
            } else {
                if (v !== null) {
                    v = v + '';
                    if (v.charAt(0) === _key) {
                        v = v.substring(1);
                    }
                }
                this._parts[_part] = v;
                this.build(!build);
                return this;
            }
        };
    }
    p.protocol = generateSimpleAccessor('protocol');
    p.username = generateSimpleAccessor('username');
    p.password = generateSimpleAccessor('password');
    p.hostname = generateSimpleAccessor('hostname');
    p.port = generateSimpleAccessor('port');
    p.query = generatePrefixAccessor('query', '?');
    p.fragment = generatePrefixAccessor('fragment', '#');
    p.search = function (v, build) {
        var t = this.query(v, build);
        return typeof t === 'string' && t.length ? '?' + t : t;
    };
    p.hash = function (v, build) {
        var t = this.fragment(v, build);
        return typeof t === 'string' && t.length ? '#' + t : t;
    };
    p.pathname = function (v, build) {
        if (v === undefined || v === true) {
            var res = this._parts.path || (this._parts.hostname ? '/' : '');
            return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
        } else {
            if (this._parts.urn) {
                this._parts.path = v ? URI.recodeUrnPath(v) : '';
            } else {
                this._parts.path = v ? URI.recodePath(v) : '/';
            }
            this.build(!build);
            return this;
        }
    };
    p.path = p.pathname;
    p.href = function (href, build) {
        var key;
        if (href === undefined) {
            return this.toString();
        }
        this._string = '';
        this._parts = URI._parts();
        var _URI = href instanceof URI;
        var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
        if (href.nodeName) {
            var attribute = URI.getDomAttribute(href);
            href = href[attribute] || '';
            _object = false;
        }
        if (!_URI && _object && href.pathname !== undefined) {
            href = href.toString();
        }
        if (typeof href === 'string' || href instanceof String) {
            this._parts = URI.parse(String(href), this._parts);
        } else if (_URI || _object) {
            var src = _URI ? href._parts : href;
            for (key in src) {
                if (hasOwn.call(this._parts, key)) {
                    this._parts[key] = src[key];
                }
            }
        } else {
            throw new TypeError('invalid input');
        }
        this.build(!build);
        return this;
    };
    p.is = function (what) {
        var ip = false;
        var ip4 = false;
        var ip6 = false;
        var name = false;
        var sld = false;
        var idn = false;
        var punycode = false;
        var relative = !this._parts.urn;
        if (this._parts.hostname) {
            relative = false;
            ip4 = URI.ip4_expression.test(this._parts.hostname);
            ip6 = URI.ip6_expression.test(this._parts.hostname);
            ip = ip4 || ip6;
            name = !ip;
            sld = name && SLD && SLD.has(this._parts.hostname);
            idn = name && URI.idn_expression.test(this._parts.hostname);
            punycode = name && URI.punycode_expression.test(this._parts.hostname);
        }
        switch (what.toLowerCase()) {
        case 'relative':
            return relative;
        case 'absolute':
            return !relative;
        case 'domain':
        case 'name':
            return name;
        case 'sld':
            return sld;
        case 'ip':
            return ip;
        case 'ip4':
        case 'ipv4':
        case 'inet4':
            return ip4;
        case 'ip6':
        case 'ipv6':
        case 'inet6':
            return ip6;
        case 'idn':
            return idn;
        case 'url':
            return !this._parts.urn;
        case 'urn':
            return !!this._parts.urn;
        case 'punycode':
            return punycode;
        }
        return null;
    };
    var _protocol = p.protocol;
    var _port = p.port;
    var _hostname = p.hostname;
    p.protocol = function (v, build) {
        if (v) {
            v = v.replace(/:(\/\/)?$/, '');
            if (!v.match(URI.protocol_expression)) {
                throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
            }
        }
        return _protocol.call(this, v, build);
    };
    p.scheme = p.protocol;
    p.port = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v !== undefined) {
            if (v === 0) {
                v = null;
            }
            if (v) {
                v += '';
                if (v.charAt(0) === ':') {
                    v = v.substring(1);
                }
                URI.ensureValidPort(v);
            }
        }
        return _port.call(this, v, build);
    };
    p.hostname = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v !== undefined) {
            var x = { preventInvalidHostname: this._parts.preventInvalidHostname };
            var res = URI.parseHost(v, x);
            if (res !== '/') {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            }
            v = x.hostname;
            if (this._parts.preventInvalidHostname) {
                URI.ensureValidHostname(v, this._parts.protocol);
            }
        }
        return _hostname.call(this, v, build);
    };
    p.origin = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            var protocol = this.protocol();
            var authority = this.authority();
            if (!authority) {
                return '';
            }
            return (protocol ? protocol + '://' : '') + this.authority();
        } else {
            var origin = URI(v);
            this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
            return this;
        }
    };
    p.host = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            return this._parts.hostname ? URI.buildHost(this._parts) : '';
        } else {
            var res = URI.parseHost(v, this._parts);
            if (res !== '/') {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            }
            this.build(!build);
            return this;
        }
    };
    p.authority = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
        } else {
            var res = URI.parseAuthority(v, this._parts);
            if (res !== '/') {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            }
            this.build(!build);
            return this;
        }
    };
    p.userinfo = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            var t = URI.buildUserinfo(this._parts);
            return t ? t.substring(0, t.length - 1) : t;
        } else {
            if (v[v.length - 1] !== '@') {
                v += '@';
            }
            URI.parseUserinfo(v, this._parts);
            this.build(!build);
            return this;
        }
    };
    p.resource = function (v, build) {
        var parts;
        if (v === undefined) {
            return this.path() + this.search() + this.hash();
        }
        parts = URI.parse(v);
        this._parts.path = parts.path;
        this._parts.query = parts.query;
        this._parts.fragment = parts.fragment;
        this.build(!build);
        return this;
    };
    p.subdomain = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return '';
            }
            var end = this._parts.hostname.length - this.domain().length - 1;
            return this._parts.hostname.substring(0, end) || '';
        } else {
            var e = this._parts.hostname.length - this.domain().length;
            var sub = this._parts.hostname.substring(0, e);
            var replace = new RegExp('^' + escapeRegEx(sub));
            if (v && v.charAt(v.length - 1) !== '.') {
                v += '.';
            }
            if (v.indexOf(':') !== -1) {
                throw new TypeError('Domains cannot contain colons');
            }
            if (v) {
                URI.ensureValidHostname(v, this._parts.protocol);
            }
            this._parts.hostname = this._parts.hostname.replace(replace, v);
            this.build(!build);
            return this;
        }
    };
    p.domain = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (typeof v === 'boolean') {
            build = v;
            v = undefined;
        }
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return '';
            }
            var t = this._parts.hostname.match(/\./g);
            if (t && t.length < 2) {
                return this._parts.hostname;
            }
            var end = this._parts.hostname.length - this.tld(build).length - 1;
            end = this._parts.hostname.lastIndexOf('.', end - 1) + 1;
            return this._parts.hostname.substring(end) || '';
        } else {
            if (!v) {
                throw new TypeError('cannot set domain empty');
            }
            if (v.indexOf(':') !== -1) {
                throw new TypeError('Domains cannot contain colons');
            }
            URI.ensureValidHostname(v, this._parts.protocol);
            if (!this._parts.hostname || this.is('IP')) {
                this._parts.hostname = v;
            } else {
                var replace = new RegExp(escapeRegEx(this.domain()) + '$');
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.tld = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (typeof v === 'boolean') {
            build = v;
            v = undefined;
        }
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return '';
            }
            var pos = this._parts.hostname.lastIndexOf('.');
            var tld = this._parts.hostname.substring(pos + 1);
            if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
                return SLD.get(this._parts.hostname) || tld;
            }
            return tld;
        } else {
            var replace;
            if (!v) {
                throw new TypeError('cannot set TLD empty');
            } else if (v.match(/[^a-zA-Z0-9-]/)) {
                if (SLD && SLD.is(v)) {
                    replace = new RegExp(escapeRegEx(this.tld()) + '$');
                    this._parts.hostname = this._parts.hostname.replace(replace, v);
                } else {
                    throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
                }
            } else if (!this._parts.hostname || this.is('IP')) {
                throw new ReferenceError('cannot set TLD on non-domain host');
            } else {
                replace = new RegExp(escapeRegEx(this.tld()) + '$');
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.directory = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined || v === true) {
            if (!this._parts.path && !this._parts.hostname) {
                return '';
            }
            if (this._parts.path === '/') {
                return '/';
            }
            var end = this._parts.path.length - this.filename().length - 1;
            var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');
            return v ? URI.decodePath(res) : res;
        } else {
            var e = this._parts.path.length - this.filename().length;
            var directory = this._parts.path.substring(0, e);
            var replace = new RegExp('^' + escapeRegEx(directory));
            if (!this.is('relative')) {
                if (!v) {
                    v = '/';
                }
                if (v.charAt(0) !== '/') {
                    v = '/' + v;
                }
            }
            if (v && v.charAt(v.length - 1) !== '/') {
                v += '/';
            }
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
            this.build(!build);
            return this;
        }
    };
    p.filename = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (typeof v !== 'string') {
            if (!this._parts.path || this._parts.path === '/') {
                return '';
            }
            var pos = this._parts.path.lastIndexOf('/');
            var res = this._parts.path.substring(pos + 1);
            return v ? URI.decodePathSegment(res) : res;
        } else {
            var mutatedDirectory = false;
            if (v.charAt(0) === '/') {
                v = v.substring(1);
            }
            if (v.match(/\.?\//)) {
                mutatedDirectory = true;
            }
            var replace = new RegExp(escapeRegEx(this.filename()) + '$');
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
            if (mutatedDirectory) {
                this.normalizePath(build);
            } else {
                this.build(!build);
            }
            return this;
        }
    };
    p.suffix = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined || v === true) {
            if (!this._parts.path || this._parts.path === '/') {
                return '';
            }
            var filename = this.filename();
            var pos = filename.lastIndexOf('.');
            var s, res;
            if (pos === -1) {
                return '';
            }
            s = filename.substring(pos + 1);
            res = /^[a-z0-9%]+$/i.test(s) ? s : '';
            return v ? URI.decodePathSegment(res) : res;
        } else {
            if (v.charAt(0) === '.') {
                v = v.substring(1);
            }
            var suffix = this.suffix();
            var replace;
            if (!suffix) {
                if (!v) {
                    return this;
                }
                this._parts.path += '.' + URI.recodePath(v);
            } else if (!v) {
                replace = new RegExp(escapeRegEx('.' + suffix) + '$');
            } else {
                replace = new RegExp(escapeRegEx(suffix) + '$');
            }
            if (replace) {
                v = URI.recodePath(v);
                this._parts.path = this._parts.path.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.segment = function (segment, v, build) {
        var separator = this._parts.urn ? ':' : '/';
        var path = this.path();
        var absolute = path.substring(0, 1) === '/';
        var segments = path.split(separator);
        if (segment !== undefined && typeof segment !== 'number') {
            build = v;
            v = segment;
            segment = undefined;
        }
        if (segment !== undefined && typeof segment !== 'number') {
            throw new Error('Bad segment "' + segment + '", must be 0-based integer');
        }
        if (absolute) {
            segments.shift();
        }
        if (segment < 0) {
            segment = Math.max(segments.length + segment, 0);
        }
        if (v === undefined) {
            return segment === undefined ? segments : segments[segment];
        } else if (segment === null || segments[segment] === undefined) {
            if (isArray(v)) {
                segments = [];
                for (var i = 0, l = v.length; i < l; i++) {
                    if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) {
                        continue;
                    }
                    if (segments.length && !segments[segments.length - 1].length) {
                        segments.pop();
                    }
                    segments.push(trimSlashes(v[i]));
                }
            } else if (v || typeof v === 'string') {
                v = trimSlashes(v);
                if (segments[segments.length - 1] === '') {
                    segments[segments.length - 1] = v;
                } else {
                    segments.push(v);
                }
            }
        } else {
            if (v) {
                segments[segment] = trimSlashes(v);
            } else {
                segments.splice(segment, 1);
            }
        }
        if (absolute) {
            segments.unshift('');
        }
        return this.path(segments.join(separator), build);
    };
    p.segmentCoded = function (segment, v, build) {
        var segments, i, l;
        if (typeof segment !== 'number') {
            build = v;
            v = segment;
            segment = undefined;
        }
        if (v === undefined) {
            segments = this.segment(segment, v, build);
            if (!isArray(segments)) {
                segments = segments !== undefined ? URI.decode(segments) : undefined;
            } else {
                for (i = 0, l = segments.length; i < l; i++) {
                    segments[i] = URI.decode(segments[i]);
                }
            }
            return segments;
        }
        if (!isArray(v)) {
            v = typeof v === 'string' || v instanceof String ? URI.encode(v) : v;
        } else {
            for (i = 0, l = v.length; i < l; i++) {
                v[i] = URI.encode(v[i]);
            }
        }
        return this.segment(segment, v, build);
    };
    var q = p.query;
    p.query = function (v, build) {
        if (v === true) {
            return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        } else if (typeof v === 'function') {
            var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
            var result = v.call(this, data);
            this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!build);
            return this;
        } else if (v !== undefined && typeof v !== 'string') {
            this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!build);
            return this;
        } else {
            return q.call(this, v, build);
        }
    };
    p.setQuery = function (name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        if (typeof name === 'string' || name instanceof String) {
            data[name] = value !== undefined ? value : null;
        } else if (typeof name === 'object') {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    data[key] = name[key];
                }
            }
        } else {
            throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
        }
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
            build = value;
        }
        this.build(!build);
        return this;
    };
    p.addQuery = function (name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI.addQuery(data, name, value === undefined ? null : value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
            build = value;
        }
        this.build(!build);
        return this;
    };
    p.removeQuery = function (name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI.removeQuery(data, name, value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
            build = value;
        }
        this.build(!build);
        return this;
    };
    p.hasQuery = function (name, value, withinArray) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        return URI.hasQuery(data, name, value, withinArray);
    };
    p.setSearch = p.setQuery;
    p.addSearch = p.addQuery;
    p.removeSearch = p.removeQuery;
    p.hasSearch = p.hasQuery;
    p.normalize = function () {
        if (this._parts.urn) {
            return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
        }
        return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
    };
    p.normalizeProtocol = function (build) {
        if (typeof this._parts.protocol === 'string') {
            this._parts.protocol = this._parts.protocol.toLowerCase();
            this.build(!build);
        }
        return this;
    };
    p.normalizeHostname = function (build) {
        if (this._parts.hostname) {
            if (this.is('IDN') && punycode) {
                this._parts.hostname = punycode.toASCII(this._parts.hostname);
            } else if (this.is('IPv6') && IPv6) {
                this._parts.hostname = IPv6.best(this._parts.hostname);
            }
            this._parts.hostname = this._parts.hostname.toLowerCase();
            this.build(!build);
        }
        return this;
    };
    p.normalizePort = function (build) {
        if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
            this._parts.port = null;
            this.build(!build);
        }
        return this;
    };
    p.normalizePath = function (build) {
        var _path = this._parts.path;
        if (!_path) {
            return this;
        }
        if (this._parts.urn) {
            this._parts.path = URI.recodeUrnPath(this._parts.path);
            this.build(!build);
            return this;
        }
        if (this._parts.path === '/') {
            return this;
        }
        _path = URI.recodePath(_path);
        var _was_relative;
        var _leadingParents = '';
        var _parent, _pos;
        if (_path.charAt(0) !== '/') {
            _was_relative = true;
            _path = '/' + _path;
        }
        if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
            _path += '/';
        }
        _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, '/').replace(/\/{2,}/g, '/');
        if (_was_relative) {
            _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
            if (_leadingParents) {
                _leadingParents = _leadingParents[0];
            }
        }
        while (true) {
            _parent = _path.search(/\/\.\.(\/|$)/);
            if (_parent === -1) {
                break;
            } else if (_parent === 0) {
                _path = _path.substring(3);
                continue;
            }
            _pos = _path.substring(0, _parent).lastIndexOf('/');
            if (_pos === -1) {
                _pos = _parent;
            }
            _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
        }
        if (_was_relative && this.is('relative')) {
            _path = _leadingParents + _path.substring(1);
        }
        this._parts.path = _path;
        this.build(!build);
        return this;
    };
    p.normalizePathname = p.normalizePath;
    p.normalizeQuery = function (build) {
        if (typeof this._parts.query === 'string') {
            if (!this._parts.query.length) {
                this._parts.query = null;
            } else {
                this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
            }
            this.build(!build);
        }
        return this;
    };
    p.normalizeFragment = function (build) {
        if (!this._parts.fragment) {
            this._parts.fragment = null;
            this.build(!build);
        }
        return this;
    };
    p.normalizeSearch = p.normalizeQuery;
    p.normalizeHash = p.normalizeFragment;
    p.iso8859 = function () {
        var e = URI.encode;
        var d = URI.decode;
        URI.encode = escape;
        URI.decode = decodeURIComponent;
        try {
            this.normalize();
        } finally {
            URI.encode = e;
            URI.decode = d;
        }
        return this;
    };
    p.unicode = function () {
        var e = URI.encode;
        var d = URI.decode;
        URI.encode = strictEncodeURIComponent;
        URI.decode = unescape;
        try {
            this.normalize();
        } finally {
            URI.encode = e;
            URI.decode = d;
        }
        return this;
    };
    p.readable = function () {
        var uri = this.clone();
        uri.username('').password('').normalize();
        var t = '';
        if (uri._parts.protocol) {
            t += uri._parts.protocol + '://';
        }
        if (uri._parts.hostname) {
            if (uri.is('punycode') && punycode) {
                t += punycode.toUnicode(uri._parts.hostname);
                if (uri._parts.port) {
                    t += ':' + uri._parts.port;
                }
            } else {
                t += uri.host();
            }
        }
        if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
            t += '/';
        }
        t += uri.path(true);
        if (uri._parts.query) {
            var q = '';
            for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
                var kv = (qp[i] || '').split('=');
                q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, '%26');
                if (kv[1] !== undefined) {
                    q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, '%26');
                }
            }
            t += '?' + q.substring(1);
        }
        t += URI.decodeQuery(uri.hash(), true);
        return t;
    };
    p.absoluteTo = function (base) {
        var resolved = this.clone();
        var properties = [
            'protocol',
            'username',
            'password',
            'hostname',
            'port'
        ];
        var basedir, i, p;
        if (this._parts.urn) {
            throw new Error('URNs do not have any generally defined hierarchical components');
        }
        if (!(base instanceof URI)) {
            base = new URI(base);
        }
        if (resolved._parts.protocol) {
            return resolved;
        } else {
            resolved._parts.protocol = base._parts.protocol;
        }
        if (this._parts.hostname) {
            return resolved;
        }
        for (i = 0; p = properties[i]; i++) {
            resolved._parts[p] = base._parts[p];
        }
        if (!resolved._parts.path) {
            resolved._parts.path = base._parts.path;
            if (!resolved._parts.query) {
                resolved._parts.query = base._parts.query;
            }
        } else {
            if (resolved._parts.path.substring(-2) === '..') {
                resolved._parts.path += '/';
            }
            if (resolved.path().charAt(0) !== '/') {
                basedir = base.directory();
                basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
                resolved._parts.path = (basedir ? basedir + '/' : '') + resolved._parts.path;
                resolved.normalizePath();
            }
        }
        resolved.build();
        return resolved;
    };
    p.relativeTo = function (base) {
        var relative = this.clone().normalize();
        var relativeParts, baseParts, common, relativePath, basePath;
        if (relative._parts.urn) {
            throw new Error('URNs do not have any generally defined hierarchical components');
        }
        base = new URI(base).normalize();
        relativeParts = relative._parts;
        baseParts = base._parts;
        relativePath = relative.path();
        basePath = base.path();
        if (relativePath.charAt(0) !== '/') {
            throw new Error('URI is already relative');
        }
        if (basePath.charAt(0) !== '/') {
            throw new Error('Cannot calculate a URI relative to another relative URI');
        }
        if (relativeParts.protocol === baseParts.protocol) {
            relativeParts.protocol = null;
        }
        if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
            return relative.build();
        }
        if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
            return relative.build();
        }
        if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
            relativeParts.hostname = null;
            relativeParts.port = null;
        } else {
            return relative.build();
        }
        if (relativePath === basePath) {
            relativeParts.path = '';
            return relative.build();
        }
        common = URI.commonPath(relativePath, basePath);
        if (!common) {
            return relative.build();
        }
        var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, '').replace(/.*?\//g, '../');
        relativeParts.path = parents + relativeParts.path.substring(common.length) || './';
        return relative.build();
    };
    p.equals = function (uri) {
        var one = this.clone();
        var two = new URI(uri);
        var one_map = {};
        var two_map = {};
        var checked = {};
        var one_query, two_query, key;
        one.normalize();
        two.normalize();
        if (one.toString() === two.toString()) {
            return true;
        }
        one_query = one.query();
        two_query = two.query();
        one.query('');
        two.query('');
        if (one.toString() !== two.toString()) {
            return false;
        }
        if (one_query.length !== two_query.length) {
            return false;
        }
        one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
        two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);
        for (key in one_map) {
            if (hasOwn.call(one_map, key)) {
                if (!isArray(one_map[key])) {
                    if (one_map[key] !== two_map[key]) {
                        return false;
                    }
                } else if (!arraysEqual(one_map[key], two_map[key])) {
                    return false;
                }
                checked[key] = true;
            }
        }
        for (key in two_map) {
            if (hasOwn.call(two_map, key)) {
                if (!checked[key]) {
                    return false;
                }
            }
        }
        return true;
    };
    p.preventInvalidHostname = function (v) {
        this._parts.preventInvalidHostname = !!v;
        return this;
    };
    p.duplicateQueryParameters = function (v) {
        this._parts.duplicateQueryParameters = !!v;
        return this;
    };
    p.escapeQuerySpace = function (v) {
        this._parts.escapeQuerySpace = !!v;
        return this;
    };
    return URI;
}));
/*app/model/secret*/
define('app/model/secret', [
    'exports',
    'passbolt-mad/model/model'
], function (exports, _model) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _model2 = _interopRequireDefault(_model);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Secret = _model2.default.extend('passbolt.model.Secret', {
        attributes: {
            id: 'string',
            data: 'string'
        }
    }, {});
    exports.default = Secret;
});
/*app/model/resource*/
define('app/model/resource', [
    'exports',
    'passbolt-mad/net/ajax',
    'app/model/model',
    'passbolt-mad/model/serializer/cake_serializer',
    'app/model/favorite',
    'urijs/URI',
    'app/model/permission',
    'app/model/secret',
    'app/model/user',
    'urijs/punycode',
    'urijs/SecondLevelDomains',
    'urijs/IPv6'
], function (exports, _ajax, _model, _cake_serializer, _favorite, _URI, _permission, _secret, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _model2 = _interopRequireDefault(_model);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    var _favorite2 = _interopRequireDefault(_favorite);
    var _URI2 = _interopRequireDefault(_URI);
    var _permission2 = _interopRequireDefault(_permission);
    var _secret2 = _interopRequireDefault(_secret);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Resource = _model2.default.extend('passbolt.model.Resource', {
        attributes: {
            id: 'string',
            name: 'string',
            username: 'string',
            uri: 'string',
            created: 'string',
            modified: 'string',
            description: 'string',
            Secret: 'passbolt.model.Secret.models',
            Favorite: 'passbolt.model.Favorite.model',
            Creator: 'passbolt.model.User.model',
            Modifier: 'passbolt.model.User.model',
            Permission: 'passbolt.model.Permission.model'
        },
        validationRules: {
            id: [{ rule: 'uuid' }],
            name: [
                {
                    rule: 'required',
                    message: __('A name is required.')
                },
                {
                    rule: [
                        'lengthBetween',
                        3,
                        64
                    ],
                    message: __('The name should be between %s and %s characters.', 3, 64)
                },
                {
                    rule: 'utf8Extended',
                    message: __('The name should be a valid utf8 string.')
                }
            ],
            username: [
                {
                    rule: [
                        'lengthBetween',
                        0,
                        64
                    ],
                    message: __('The username should be between %s and %s characters.', 3, 64)
                },
                {
                    rule: 'utf8Extended',
                    message: __('The username should be a valid utf8 string.')
                }
            ],
            uri: [
                {
                    rule: [
                        'lengthBetween',
                        3,
                        255
                    ],
                    message: __('The uri should be between %s and %s characters.', 3, 64)
                },
                {
                    rule: 'utf8',
                    message: __('The uri should be a valid utf8 string (emoticons excluded).')
                }
            ],
            description: [
                {
                    rule: [
                        'lengthBetween',
                        3,
                        10000
                    ],
                    message: __('The description should be between %s and %s characters.', 3, 10000)
                },
                {
                    rule: 'utf8Extended',
                    message: __('The description should be a valid utf8 string.')
                }
            ]
        },
        create: function create(attrs) {
            var self = this;
            var params = _cake_serializer2.default.to(attrs, this);
            return _ajax2.default.request({
                url: APP_URL + 'resources',
                type: 'POST',
                params: params
            }).pipe(function (data, textStatus, jqXHR) {
                var def = $.Deferred();
                def.resolveWith(this, [_cake_serializer2.default.from(data, self)]);
                return def;
            });
        },
        destroy: function destroy(id) {
            var params = { id: id };
            return _ajax2.default.request({
                url: APP_URL + 'resources/{id}.json',
                type: 'DELETE',
                params: params
            });
        },
        findAll: function findAll(params) {
            return _ajax2.default.request({
                url: APP_URL + 'resources.json',
                type: 'GET',
                params: params
            });
        },
        findOne: function findOne(params) {
            return _ajax2.default.request({
                url: APP_URL + 'resources/{id}.json',
                type: 'GET',
                params: params
            });
        },
        update: function update(id, attrs) {
            var self = this, params = {};
            var data = this.filterAttributes(attrs);
            params = _cake_serializer2.default.to(data, this);
            params.id = id;
            return _ajax2.default.request({
                url: APP_URL + 'resources/{id}.json',
                type: 'PUT',
                params: params
            }).pipe(function (data, textStatus, jqXHR) {
                var def = $.Deferred();
                def.resolveWith(this, [_cake_serializer2.default.from(data, self)]);
                return def;
            });
        },
        getFilteredFields: function getFilteredFields(filteredCase) {
            var filteredFields = false;
            switch (filteredCase) {
            case 'edit':
                filteredFields = [
                    'name',
                    'username',
                    'expiry_date',
                    'uri',
                    'description'
                ];
                break;
            case 'edit_with_secrets':
                filteredFields = [
                    'name',
                    'username',
                    'expiry_date',
                    'uri',
                    'description',
                    'Secret'
                ];
                break;
            case 'edit_description':
                filteredFields = ['description'];
                break;
            }
            return filteredFields;
        },
        findUsers: function findUsers(id) {
            var params = { filter: { 'has-access': id } };
            return _ajax2.default.request({
                url: APP_URL + 'users.json',
                type: 'GET',
                params: params
            }).pipe(function (data, textStatus, jqXHR) {
                var def = $.Deferred();
                def.resolveWith(this, [_user2.default.models(data)]);
                return def;
            });
        }
    }, {
        isFavorite: function isFavorite() {
            if (this.Favorite && this.Favorite.id) {
                return true;
            } else {
                return false;
            }
        },
        safeUri: function safeUri() {
            if (this.uri == '') {
                return this.uri;
            }
            var safeUri = (0, _URI2.default)(this.uri);
            if (!safeUri.is('absolute') && safeUri.is('url')) {
                safeUri.protocol('http');
            }
            if (safeUri.protocol().trim().toLowerCase() === 'javascript') {
                safeUri.protocol('http');
            }
            return safeUri.toString();
        }
    });
    exports.default = Resource;
    _patchCircularDependency(_ajax2);
    _patchCircularDependency(_model2);
    _patchCircularDependency(_cake_serializer2);
    _patchCircularDependency(_favorite2);
    _patchCircularDependency(_URI2);
    _patchCircularDependency(_permission2);
    _patchCircularDependency(_secret2);
    _patchCircularDependency(_user2);
    function _patchCircularDependency(obj) {
        var defaultExport;
        Object.defineProperty(obj.default, 'default', {
            configurable: true,
            set: function (value) {
                if (obj.default.__esModule) {
                    obj.default = value;
                }
                defaultExport = value;
            },
            get: function () {
                return defaultExport;
            }
        });
    }
});
/*app/model/permission*/
define('app/model/permission', [
    'exports',
    'passbolt-mad/net/ajax',
    'app/model/group',
    'passbolt-mad/model/model',
    'app/model/permission_type',
    'app/model/resource',
    'app/model/user',
    'passbolt-mad/model/serializer/cake_serializer'
], function (exports, _ajax, _group, _model, _permission_type, _resource, _user, _cake_serializer) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _group2 = _interopRequireDefault(_group);
    var _model2 = _interopRequireDefault(_model);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _resource2 = _interopRequireDefault(_resource);
    var _user2 = _interopRequireDefault(_user);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Permission = _model2.default.extend('passbolt.model.Permission', {
        attributes: {
            id: 'string',
            type: 'string',
            aco: 'string',
            aco_foreign_key: 'string',
            aro: 'string',
            aro_foreign_key: 'string',
            aro_foreign_label: 'string',
            PermissionType: 'passbolt.model.PermissionType.model',
            Resource: 'passbolt.model.Resource.model',
            User: 'passbolt.model.User.model',
            Group: 'passbolt.model.Group.model'
        },
        validateRules: {
            aro_foreign_key: [
                'required',
                'uid'
            ],
            aro_foreign_label: ['required'],
            type: [
                'required',
                {
                    rule: 'foreignRule',
                    options: {
                        model: _permission_type2.default,
                        attribute: 'serial'
                    }
                }
            ]
        },
        findAll: function findAll(params) {
            var uri = 'permissions';
            if (typeof params.aco != 'undefined' && typeof params.aco_foreign_key != 'undefined') {
                uri += '/' + params.aco.toLowerCase() + '/' + params.aco_foreign_key;
                delete params.aco;
                delete params.aco_foreign_key;
            }
            return _ajax2.default.request({
                url: APP_URL + uri + '.json',
                type: 'GET',
                params: params
            });
        },
        findOne: function findOne(params) {
            return _ajax2.default.request({
                url: APP_URL + 'permissions/{id}.json',
                type: 'GET',
                params: params
            });
        },
        share: function share(aco, acoForeignKey, attrs) {
            return _ajax2.default.request({
                url: APP_URL + 'share/resource/' + acoForeignKey + '.json',
                type: 'PUT',
                params: attrs
            }).pipe(function (data) {
                var findOptions = {
                    id: acoForeignKey,
                    silentLoading: false,
                    contain: {
                        creator: 1,
                        favorite: 1,
                        modifier: 1,
                        secret: 1,
                        permission: 1
                    }
                };
                _resource2.default.findOne(findOptions).then(function (resource) {
                    resource.updated();
                }, function () {
                    var storedResource = _resource2.default.store[acoForeignKey];
                    storedResource.destroyed();
                });
                return data;
            });
        }
    }, {
        isAllowedTo: function isAllowedTo(permissionType) {
            return this.type >= permissionType;
        },
        isDirect: function isDirect(acoInstance) {
            var permAcoModel = can.getObject('passbolt.model.' + this.aco);
            if (acoInstance instanceof permAcoModel && acoInstance.id === this.aco_foreign_key) {
                return true;
            }
            return false;
        }
    });
    exports.default = Permission;
    _patchCircularDependency(_ajax2);
    _patchCircularDependency(_group2);
    _patchCircularDependency(_model2);
    _patchCircularDependency(_permission_type2);
    _patchCircularDependency(_resource2);
    _patchCircularDependency(_user2);
    _patchCircularDependency(_cake_serializer2);
    function _patchCircularDependency(obj) {
        var defaultExport;
        Object.defineProperty(obj.default, 'default', {
            configurable: true,
            set: function (value) {
                if (obj.default.__esModule) {
                    obj.default = value;
                }
                defaultExport = value;
            },
            get: function () {
                return defaultExport;
            }
        });
    }
});
/*app/view/component/permission/permissions*/
define('app/view/component/permission/permissions', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PermissionsView = _view2.default.extend('passbolt.view.component.permission.Permissions', {}, {
        ' .js_perm_delete click': function js_perm_deleteClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var li = el.parents('li');
            var permission = li.data('passbolt.model.Permission');
            this.element.trigger('request_permission_delete', [permission]);
        },
        ' .js_share_rs_perm_type changed': function js_share_rs_perm_typeChanged(el, ev, data) {
            ev.stopPropagation();
            ev.preventDefault();
            var li = el.parents('li'), permission = li.data('passbolt.model.Permission');
            this.element.trigger('request_permission_edit', [
                permission,
                data.value
            ]);
        },
        ' #js_perm_create_form_add_btn click': function js_perm_create_form_add_btnClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            el.trigger('submit');
        }
    });
    exports.default = PermissionsView;
});
/*app/view/template/component/permission/permissions.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/permission/permissions.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_permission_permissions_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content permission-edit">\n    <ul id="js_permissions_list" class="permissions scroll">\n    </ul>\n</div>\n<div id="js_permissions_changes" class="warning message hidden">\n    <span>You need to save to apply the changes.</span>\n</div>\n');
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    if (canAdmin) {
                        ___v1ew.push('\n<div id="js_permissions_create_wrapper" class="permission-add js_plugin_share_wrapper">\n    <input id="js_perm_create_form_aro" type="hidden" value="" />\n    <div id="passbolt-password-share-autocomplete-wrapper">\n    </div>\n</div>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n<div class="submit-wrapper clearfix">\n    <input id="js_rs_share_save" type="submit" class="button primary" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('save');
                }));
                ___v1ew.push('" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    <a class="js-dialog-cancel cancel">cancel</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/permission/permission_list_item.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/permission/permission_list_item.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_permission_permission_list_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                if (mappedItem.isDirect) {
                    cssClasses.push('direct-permission');
                } else {
                    cssClasses.push('inherited-permission');
                }
                var availablePermissionTypes = {};
                for (var permType in passbolt.model.PermissionType.PERMISSION_TYPES) {
                    availablePermissionTypes[permType] = passbolt.model.PermissionType.formatToString(permType);
                }
                ;
                ;
                ___v1ew.push('\n<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="row ');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <div class="avatar">\n        <img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(mappedItem.aroAvatarPath);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    </div>\n    <div class="group">\n        <span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.acoLabel;
                }));
                ___v1ew.push('</span>\n        <span class="details"><a>');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return mappedItem.acoDetails;
                }));
                ___v1ew.push('</a></span>\n    </div>\n    <div class="select rights">\n        <form id="js_share_rs_perm_');
                ___v1ew.push(can.view.txt(true, 'form', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" class="js_perm_edit_form"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n            <select class="js_share_rs_perm_type permission">\n            </select>\n        </form>\n    </div>\n    <div class="actions">\n        ');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (mappedItem.isDirect) {
                        ___v1ew.push('\n        <a class="js_perm_delete close" title="');
                        ___v1ew.push(can.view.txt(true, 'a', 'title', this, function () {
                            return __('remove');
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('\n            <i class="fa fa-times-circle"></i>\n            <span class="visuallyhidden">');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('remove');
                        }));
                        ___v1ew.push('</span>\n        </a>\n        ');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n    </div>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/permission/permissions*/
define('app/component/permission/permissions', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/component/dialog',
    'passbolt-mad/form/element/dropdown',
    'app/model/group',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/model/permission',
    'app/model/permission_type',
    'app/view/component/permission/permissions',
    'passbolt-mad/form/element/textbox',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/component/tree',
    'app/model/user',
    'app/view/template/component/permission/permissions.ejs!',
    'app/view/template/component/permission/permission_list_item.ejs!'
], function (exports, _button, _component, _dialog, _dropdown, _group, _bus, _map, _permission, _permission_type, _permissions, _textbox, _tree, _tree3, _user, _permissions3, _permission_list_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _dropdown2 = _interopRequireDefault(_dropdown);
    var _group2 = _interopRequireDefault(_group);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _permission2 = _interopRequireDefault(_permission);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _permissions2 = _interopRequireDefault(_permissions);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _tree2 = _interopRequireDefault(_tree);
    var _tree4 = _interopRequireDefault(_tree3);
    var _user2 = _interopRequireDefault(_user);
    var _permissions4 = _interopRequireDefault(_permissions3);
    var _permission_list_item2 = _interopRequireDefault(_permission_list_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var PermissionsComponent = _component2.default.extend('passbolt.component.permission.Permissions', {
        defaults: {
            label: 'Permissions Controller',
            viewClass: _permissions2.default,
            acoInstance: null,
            changes: [],
            template: _permissions4.default,
            silentLoading: false,
            state: 'loading'
        }
    }, {
        init: function init(el, opts) {
            this._super(el, opts);
            this.setViewData('canAdmin', this._isAdmin());
        },
        _isAdmin: function _isAdmin() {
            return this.options.acoInstance.Permission.isAllowedTo(_permission_type2.default.ADMIN);
        },
        afterStart: function afterStart() {
            var self = this;
            this.permList = new _tree2.default($('#js_permissions_list'), {
                cssClasses: ['permissions'],
                viewClass: _tree4.default,
                itemClass: _permission2.default,
                itemTemplate: _permission_list_item2.default,
                map: new _map2.default({
                    id: 'id',
                    isDirect: {
                        key: 'aro_foreign_key',
                        func: function func(aro_foreign_key, map, obj) {
                            return obj.isDirect(self.options.acoInstance);
                        }
                    },
                    aroLabel: {
                        key: 'aro',
                        func: function func(aro, map, obj) {
                            return aro.toLowerCase();
                        }
                    },
                    aroAvatarPath: {
                        key: 'id',
                        func: function func(user, map, obj) {
                            if (obj.aro == 'User') {
                                return obj.User.Profile.avatarPath('small');
                            } else {
                                return 'img/avatar/group_default.png';
                            }
                        }
                    },
                    permType: 'PermissionType.serial',
                    permLabel: {
                        key: 'type',
                        func: function func(type, map, obj) {
                            return _permission_type2.default.formatToString(type);
                        }
                    },
                    acoLabel: {
                        key: 'aco_foreign_key',
                        func: function func(aco_foreign_key, map, obj) {
                            if (obj.aro == 'User') {
                                return obj.User.Profile.fullName();
                            } else if (obj.aro == 'Group') {
                                return obj.Group.name;
                            }
                        }
                    },
                    acoDetails: {
                        key: 'aco_foreign_key',
                        func: function func(aco_foreign_key, map, obj) {
                            if (obj.aro == 'User') {
                                return obj.User.username;
                            } else if (obj.aro == 'Group') {
                                return __('group');
                            }
                        }
                    }
                })
            });
            this.permList.start();
            if (this._isAdmin()) {
                this.permAroHiddenTxtbx = new _textbox2.default($('#js_perm_create_form_aro', this.element), {}).start();
                this.permAroHiddenTxtbx.setValue(this.options.acoInstance.id);
                _bus2.default.trigger('passbolt.plugin.resource_share', {
                    resourceId: this.options.acoInstance.id,
                    armored: this.options.acoInstance.Secret[0].data
                });
            }
            this.load(this.options.acoInstance);
            this.options.saveChangesButton = new _button2.default($('#js_rs_share_save'), { state: 'disabled' }).start();
            this.on();
        },
        loadPermission: function loadPermission(permission) {
            var permTypeSelector = '#js_share_rs_perm_' + permission.id, permSelector = '#' + permission.id, availablePermissionTypes = {}, permissionTypes = [
                    1,
                    7,
                    15
                ];
            for (var permType in permissionTypes) {
                availablePermissionTypes[permissionTypes[permType]] = _permission_type2.default.formatToString(permissionTypes[permType]);
            }
            this.permList.insertItem(permission);
            new _dropdown2.default($('.js_share_rs_perm_type', permTypeSelector), {
                id: 'js_share_perm_type_' + permission.id,
                emptyValue: false,
                modelReference: 'passbolt.model.Permission.type',
                availableValues: availablePermissionTypes,
                state: this._isAdmin() ? 'ready' : 'disabled'
            }).start().setValue(permission.type);
            new _button2.default($('.js_perm_delete', permSelector), {
                id: 'js_share_perm_delete_' + permission.id,
                state: this._isAdmin() ? 'ready' : 'disabled'
            }).start();
            if (permission.is_new) {
                $(permSelector).addClass('permission-updated');
                this.permList.element.scrollTop(this.permList.element[0].scrollHeight);
            }
        },
        load: function load(obj) {
            var self = this;
            this.options.acoInstance = obj;
            this.options.changes = {};
            this.setState('loading');
            return _permission2.default.findAll({
                aco: this.options.acoInstance.constructor.shortName,
                aco_foreign_key: this.options.acoInstance.id,
                contain: {
                    group: 1,
                    user: 1,
                    'user.profile': 1
                }
            }).then(function (permissions, response, request) {
                for (var i = 0; i < permissions.length; i++) {
                    self.loadPermission(permissions[i]);
                }
                if (self._isAdmin()) {
                    self.checkOwner();
                }
                self.setState('ready');
            });
        },
        refresh: function refresh() {
            var self = this;
            $('#js_permissions_changes').addClass('hidden');
            this.permList.reset();
            if (!this._isAdmin()) {
                $('#js_permissions_create_wrapper', this.element).hide();
            }
            this.load(this.options.acoInstance).done(function () {
                self.setState('ready');
            });
        },
        showApplyFeedback: function showApplyFeedback() {
            var $permissionChanges = $('#js_permissions_changes');
            $permissionChanges.removeClass('hidden');
            if (this.options.saveChangesButton.state.is('disabled')) {
                this.options.saveChangesButton.setState('ready');
            }
        },
        hideApplyFeedback: function hideApplyFeedback() {
            var $permissionChanges = $('#js_permissions_changes');
            $permissionChanges.addClass('hidden');
            if (this.options.saveChangesButton.state.is('ready')) {
                this.options.saveChangesButton.setState('disabled');
            }
        },
        checkOwner: function checkOwner() {
            var self = this, ownerPermissions = [];
            this.permList.options.items.each(function (item) {
                var isOwner = false;
                if (item.type == 15) {
                    isOwner = true;
                }
                if (typeof self.options.changes[item.id] != 'undefined') {
                    if (self.options.changes[item.id].Permission.type == 15) {
                        isOwner = true;
                    } else {
                        isOwner = false;
                    }
                }
                if (isOwner) {
                    ownerPermissions.push(item);
                }
            });
            if (ownerPermissions.length == 1) {
                var permTypeDropdownComponentId = 'js_share_perm_type_' + ownerPermissions[0].id, permDeleteButtonId = 'js_share_perm_delete_' + ownerPermissions[0].id, permTypeDropdown = mad.getControl(permTypeDropdownComponentId, 'mad.form.Dropdown'), permDeleteButton = mad.getControl(permDeleteButtonId, 'mad.component.Button');
                permTypeDropdown.setState('disabled');
                permDeleteButton.setState('disabled');
            } else if (ownerPermissions.length > 1) {
                for (var i in ownerPermissions) {
                    var permTypeDropdownComponentId = 'js_share_perm_type_' + ownerPermissions[i].id, permDeleteButtonId = 'js_share_perm_delete_' + ownerPermissions[i].id, permTypeDropdown = mad.getControl(permTypeDropdownComponentId, 'mad.form.Dropdown'), permDeleteButton = mad.getControl(permDeleteButtonId, 'mad.component.Button');
                    permTypeDropdown.setState('ready');
                    permDeleteButton.setState('ready');
                }
            }
        },
        addPermission: function addPermission(data) {
            data.id = uuid();
            var permission = new _permission2.default(data);
            this.loadPermission(permission);
            this.options.changes[data.id] = {
                Permission: {
                    isNew: true,
                    aco: data.aco,
                    aco_foreign_key: data.aco_foreign_key,
                    aro: data.aro,
                    aro_foreign_key: data.aro_foreign_key,
                    type: data.type
                }
            };
            this.element.trigger('changed', this.options.changes);
            this.showApplyFeedback();
        },
        updateTypePermission: function updateTypePermission(id, type) {
            if (this.options.changes[id]) {
                this.options.changes[id].Permission.type = type;
            } else {
                this.options.changes[id] = {
                    Permission: {
                        id: id,
                        type: type
                    }
                };
            }
            this.element.trigger('changed', this.options.changes);
            this.showApplyFeedback();
            this.checkOwner();
        },
        deletePermission: function deletePermission(permission) {
            this.permList.removeItem(permission);
            if (typeof this.options.changes[permission.id] != 'undefined') {
                if (typeof this.options.changes[permission.id].Permission.isNew != 'undefined' && _typeof(this.options.changes[permission.id].Permission.isNew)) {
                    delete this.options.changes[permission.id];
                    _bus2.default.trigger('passbolt.share.remove_permission', {
                        userId: permission.aro_foreign_key,
                        isTemporaryPermission: true
                    });
                } else {
                    this.options.changes[permission.id] = {
                        Permission: {
                            id: permission.id,
                            delete: 1
                        }
                    };
                    _bus2.default.trigger('passbolt.share.remove_permission', {
                        userId: permission.aro_foreign_key,
                        isTemporaryPermission: false
                    });
                }
            } else {
                this.options.changes[permission.id] = {
                    Permission: {
                        id: permission.id,
                        delete: 1
                    }
                };
                _bus2.default.trigger('passbolt.share.remove_permission', {
                    userId: permission.aro_foreign_key,
                    isTemporaryPermission: false
                });
            }
            if ($.isEmptyObject(this.options.changes)) {
                this.hideApplyFeedback();
            } else {
                this.element.trigger('changed', this.options.changes);
                this.showApplyFeedback();
            }
            this.checkOwner();
        },
        save: function save(armoreds) {
            var self = this, data = {}, aco = this.options.acoInstance.constructor.shortName, acoForeignKey = this.options.acoInstance.id;
            data.Permissions = [];
            for (var i in this.options.changes) {
                data.Permissions.push(this.options.changes[i]);
            }
            if (armoreds) {
                data.Secrets = [];
                for (var userId in armoreds) {
                    data.Secrets.push({
                        Secret: {
                            resource_id: acoForeignKey,
                            user_id: userId,
                            data: armoreds[userId]
                        }
                    });
                }
            }
            _permission2.default.share(aco, acoForeignKey, data).then(function (data) {
                self.element.trigger('saved');
                self.closest(_dialog2.default).remove();
            });
        },
        '{acoInstance} destroyed': function acoInstanceDestroyed() {
        },
        '{mad.bus.element} resource_share_encrypted': function madBusElementResource_share_encrypted(el, ev, armoreds) {
            this.save(armoreds);
        },
        '{mad.bus.element} passbolt.plugin.share.canceled': function madBusElementPassboltPluginShareCanceled(el, ev) {
            this.setState('ready');
        },
        '{mad.bus.element} resource_share_add_permission': function madBusElementResource_share_add_permission(el, ev, data) {
            this.addPermission(data);
        },
        ' request_permission_delete': function request_permission_delete(el, ev, permission) {
            this.deletePermission(permission);
        },
        ' request_permission_edit': function request_permission_edit(el, ev, permission, type) {
            this.updateTypePermission(permission.id, type);
        },
        '{saveChangesButton.element} click': function saveChangesButtonElementClick(el, ev) {
            var usersIds = [];
            this.setState('loading');
            for (var permissionId in this.options.changes) {
                if (this.options.changes[permissionId].Permission.isNew) {
                    usersIds.push(this.options.changes[permissionId].Permission.aro_foreign_key);
                }
            }
            _bus2.default.trigger('passbolt.share.encrypt');
        },
        stateLoading: function stateLoading(go) {
            var saveButton = this.options.saveChangesButton;
            if (go) {
                if (saveButton) {
                    saveButton.setState('disabled');
                }
            } else {
                if (this.options.changes.length) {
                    saveButton.setState('ready');
                }
            }
            this._super(go);
        }
    });
    exports.default = PermissionsComponent;
});
/*app/form/secret/create*/
define('app/form/secret/create', [
    'exports',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox'
], function (exports, _feedback, _form, _textbox) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.secret.Create', {
        defaults: {
            action: 'create',
            secret_i: null
        }
    }, {
        afterStart: function afterStart() {
            this.addElement(new _textbox2.default($('#js_field_secret_id_' + this.options.secret_i), {
                modelReference: 'passbolt.model.Secret.id',
                validate: false
            }).start());
            this.addElement(new _textbox2.default($('#js_field_secret_user_id_' + this.options.secret_i), {
                modelReference: 'passbolt.model.Secret.user_id',
                validate: false
            }).start());
            this.addElement(new _textbox2.default($('#js_field_secret_data_' + this.options.secret_i), {
                modelReference: 'passbolt.model.Secret.data',
                validate: false
            }).start());
            this.on();
        }
    });
    exports.default = CreateForm;
});
/*app/view/template/form/resource/create.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/form/resource/create.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_resource_create_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content">\n\t<input type="hidden" name="passbolt.model.Resource.id" id="js_field_resource_id" class="form_field" />\n\t<div class="input text required js_form_element_wrapper">\n\t\t<label for="js_field_name">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Name');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.Resource.name" class="required" maxlength="64" type="text" id="js_field_name" placeholder="name" autofocus/>\n\t\t<div id="js_field_name_feedback" class="message">\n\t\t</div>\n\t</div>\n\t\n\t<div class="input text js_form_element_wrapper">\n\t\t<label for="js_field_uri">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('URI');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.Resource.uri" type="text" maxlength="1024" id="js_field_uri" placeholder="https://example.com/login"/>\n\t\t<div id="js_field_uri_feedback" class="message">\n\t\t</div>\n\t</div>\n\t\n\t<div class="input text js_form_element_wrapper">\n\t\t<label for="js_field_username">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Username');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.Resource.username" maxlength="64" type="text" id="js_field_username" placeholder="name"/>\n\t\t<div id="js_field_username_feedback" class="message">\n\t\t</div>\n\t</div>\n\t<div class="input text required js_form_element_wrapper js_form_secret_wrapper">\n\t\t<label for="js_field_secret_data_0">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Password');
                }));
                ___v1ew.push('</label>\n        <div id="js_secret_edit_0" class="js_secret_edit_form">\n            <input type="hidden" name="passbolt.model.Secret.id" id="js_field_secret_id_0" class="js_field_secret_id form_field" />\n            <input type="hidden" name="passbolt.model.Secret.user_id" id="js_field_secret_user_id_0" class="js_field_secret_user_id form_field" />\n            <textarea name="passbolt.model.Secret.data" id="js_field_secret_data_0" class="form_field hidden js_field_secret_data"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</textarea>\n        </div>\n\t</div>\n\t<div class="input textarea js_form_element_wrapper">\n\t\t<label for="js_field_description">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Description');
                }));
                ___v1ew.push('</label>\n\t\t<textarea name="passbolt.model.Resource.description" class="required" id="js_field_description" maxlength="10000" placeholder="add a description"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t\t</textarea>\n\t\t<div id="js_field_description_feedback" class="message">\n\t\t</div>\n\t</div>\n</div>\n<div class="submit-wrapper clearfix">\n    <input type="submit" class="button primary" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('save');
                }));
                ___v1ew.push('" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    <a class="js-dialog-cancel cancel">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return __('cancel');
                }));
                ___v1ew.push('</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/resource/create*/
define('app/form/resource/create', [
    'exports',
    'passbolt-mad/config/config',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/control/bus',
    'app/model/resource',
    'app/form/secret/create',
    'passbolt-mad/form/element/textbox',
    'app/view/template/form/resource/create.ejs!'
], function (exports, _config, _feedback, _form, _bus, _resource, _create, _textbox, _create3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _config2 = _interopRequireDefault(_config);
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _bus2 = _interopRequireDefault(_bus);
    var _resource2 = _interopRequireDefault(_resource);
    var _create2 = _interopRequireDefault(_create);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _create4 = _interopRequireDefault(_create3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.resource.Create', {
        defaults: {
            secretField: null,
            action: 'create',
            secretsForms: [],
            resource: null,
            template: _create4.default,
            lastValidationResult: false
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('resource', this.options.data);
        },
        afterStart: function afterStart() {
            var self = this;
            this.options.data.Resource = this.options.data.Resource || {};
            this.addElement(new _textbox2.default($('#js_field_resource_id'), {
                modelReference: 'passbolt.model.Resource.id',
                validate: false
            }).start());
            this.addElement(new _textbox2.default($('#js_field_name'), { modelReference: 'passbolt.model.Resource.name' }).start(), new _feedback2.default($('#js_field_name_feedback'), {}).start());
            this.addElement(new _textbox2.default($('#js_field_uri'), { modelReference: 'passbolt.model.Resource.uri' }).start(), new _feedback2.default($('#js_field_uri_feedback'), {}).start());
            this.addElement(new _textbox2.default($('#js_field_username'), { modelReference: 'passbolt.model.Resource.username' }).start(), new _feedback2.default($('#js_field_username_feedback'), {}).start());
            can.each(this.options.data.Secret, function (secret, i) {
                var secretForm = new _create2.default('#js_secret_edit_' + i, {
                    data: secret,
                    secret_i: i
                });
                secretForm.start();
                secretForm.load(secret);
                self.options.secretsForms.push(secretForm);
            });
            this.addElement(new _textbox2.default($('#js_field_description'), { modelReference: 'passbolt.model.Resource.description' }).start(), new _feedback2.default($('#js_field_description_feedback'), {}).start());
            if (this.options.data != null) {
                this.load(this.options.data);
            }
            _bus2.default.trigger('passbolt.plugin.resource_edition');
            setTimeout(function () {
                self.setInitialFocus();
            }, 100);
        },
        setInitialFocus: function setInitialFocus() {
            var initialFocusEl = $('#js_field_name');
            initialFocusEl.focus();
            if (initialFocusEl.val() != '') {
                initialFocusEl.select();
            }
        },
        validate: function validate() {
            _bus2.default.trigger('passbolt.secret_edition.validate');
            this.lastValidationResult = this._super();
        },
        encrypt: function encrypt() {
            var usersIds = [];
            if (this.options.action == 'edit') {
                _resource2.default.findUsers(this.options.data.id).then(function (users, response, request) {
                    var usersIds = [];
                    users.forEach(function (user) {
                        usersIds.push(user.id);
                    });
                    _bus2.default.trigger('passbolt.secret_edition.encrypt', usersIds);
                });
            } else {
                usersIds.push(_config2.default.read('user.id'));
                _bus2.default.trigger('passbolt.secret_edition.encrypt', usersIds);
            }
        },
        ' submit': function submit(el, ev) {
            ev.preventDefault();
            this.validate();
        },
        '{mad.bus.element} secret_edition_secret_validated': function madBusElementSecret_edition_secret_validated(el, ev, secretValidated) {
            if (!secretValidated) {
                $('.js_form_secret_wrapper').addClass('error');
            } else {
                $('.js_form_secret_wrapper').removeClass('error');
            }
            if (!this.lastValidationResult || !secretValidated) {
                if (this.options.callbacks.error) {
                    this.options.callbacks.error();
                }
                return;
            }
            this.encrypt();
        },
        '{mad.bus.element} secret_edition_secret_encrypted': function madBusElementSecret_edition_secret_encrypted(el, ev, armoreds) {
            var data = this.getData();
            data['passbolt.model.Resource'].Secret = [];
            for (var userId in armoreds) {
                data['passbolt.model.Resource'].Secret.push({
                    user_id: userId,
                    data: armoreds[userId]
                });
            }
            if (this.options.callbacks.submit) {
                this.options.callbacks.submit(data);
            }
        },
        '{mad.bus.element} secret_edition_secret_changed': function madBusElementSecret_edition_secret_changed(el, ev, armoreds) {
            this.element.trigger('changed', 'secret');
        },
        '#js_field_username keydown': function js_field_usernameKeydown(el, ev) {
            var code = ev.keyCode || ev.which;
            if (code == '9') {
                _bus2.default.trigger('passbolt.secret.focus');
            }
        },
        '#js_field_description keydown': function js_field_descriptionKeydown(el, ev) {
            var code = ev.keyCode || ev.which;
            if (code == '9' && ev.shiftKey) {
                _bus2.default.trigger('passbolt.secret.focus');
            }
        },
        '{mad.bus.element} secret_tab_pressed': function madBusElementSecret_tab_pressed(el, ev) {
            $('#js_field_description').focus();
        },
        '{mad.bus.element} secret_backtab_pressed': function madBusElementSecret_backtab_pressed(el, ev) {
            $('#js_field_username').focus();
        }
    });
    exports.default = CreateForm;
});
/*app/component/password/actions_tab*/
define('app/component/password/actions_tab', [
    'exports',
    'passbolt-mad/component/confirm',
    'passbolt-mad/component/tab',
    'app/component/permission/permissions',
    'app/form/resource/create',
    'passbolt-mad/view/template/component/tab/tab.ejs!'
], function (exports, _confirm, _tab, _permissions, _create, _tab3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _confirm2 = _interopRequireDefault(_confirm);
    var _tab2 = _interopRequireDefault(_tab);
    var _permissions2 = _interopRequireDefault(_permissions);
    var _create2 = _interopRequireDefault(_create);
    var _tab4 = _interopRequireDefault(_tab3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ActionsTabComponent = _tab2.default.extend('passbolt.component.password.ActionsTab', {
        defaults: {
            cssClasses: ['tabs'],
            template: _tab4.default,
            resource: null,
            dialog: null
        }
    }, {
        _hasChanged: false,
        afterStart: function afterStart() {
            var _this = this;
            this._super();
            this.addComponent(_create2.default, {
                id: 'js_rs_edit',
                label: __('Edit'),
                action: 'edit',
                data: this.options.resource,
                callbacks: {
                    submit: function submit(data) {
                        return _this._save(data);
                    }
                }
            });
            this.addComponent(_permissions2.default, {
                id: 'js_rs_permission',
                label: 'Share',
                resource: this.options.resources,
                cssClasses: ['share-tab'],
                acoInstance: this.options.resource
            });
        },
        _save: function _save(data) {
            var self = this;
            var resourceData = data['passbolt.model.Resource'];
            if (resourceData.Secret.length > 0) {
                resourceData['__FILTER_CASE__'] = 'edit_with_secrets';
            } else {
                resourceData['__FILTER_CASE__'] = 'edit';
            }
            this.options.resource.attr(resourceData);
            this.options.resource.save().then(function () {
                self.options.dialog.remove();
            });
        },
        enableTab: function enableTab(tabId, force) {
            var force = force || false;
            if (this.enabledTabId == tabId) {
                return;
            }
            if (this._hasChanged && force === false) {
                return this._confirmChangeTab(tabId);
            }
            var targetTabCtl = this.getComponent(tabId);
            this.options.dialog.setTitle(targetTabCtl.options.label);
            this.options.dialog.setSubtitle(this.options.resource.name);
            this._hasChanged = false;
            this._super(tabId);
        },
        _confirmChangeTab: function _confirmChangeTab(tabId) {
            var self = this;
            var confirmDialog = new _confirm2.default(null, {
                label: __('Do you really want to leave ?'),
                content: __('If you continue you\'ll lose your changes'),
                action: function action() {
                    self.enableTab(tabId, true);
                }
            });
            confirmDialog.start();
        },
        ' changed': function changed(el, ev, data) {
            this._hasChanged = true;
        }
    });
    exports.default = ActionsTabComponent;
});
/*app/component/password/workspace_breadcrumb*/
define('app/component/password/workspace_breadcrumb', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu',
    'app/view/template/component/breadcrumb/breadcrumb.ejs!',
    'app/view/template/component/breadcrumb/breadcrumb_item.ejs!'
], function (exports, _action, _component, _bus, _menu, _breadcrumb, _breadcrumb_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    var _breadcrumb2 = _interopRequireDefault(_breadcrumb);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceBreadcrumb = _component2.default.extend('passbolt.component.WorkspaceBreadcrumb', {
        defaults: {
            template: _breadcrumb2.default,
            status: 'hidden',
            rootFilter: null
        }
    }, {
        afterStart: function afterStart() {
            var menuSelector = '#' + this.getId() + ' ul';
            var menu = new _menu2.default(menuSelector, { itemTemplate: _breadcrumb_item2.default });
            menu.start();
            this.options.menu = menu;
        },
        parseFilter: function parseFilter(filter) {
            var menuItems = [], keywords = filter.getRule('keywords');
            var menuItem = new _action2.default({
                id: uuid(),
                label: __('All items'),
                filter: this.options.rootFilter
            });
            menuItems.push(menuItem);
            if (keywords && keywords != '') {
                var menuItem = new _action2.default({
                    id: uuid(),
                    label: __('Search : %s', keywords)
                });
                menuItems.push(menuItem);
            } else if (filter.id != 'default') {
                var menuItem = new _action2.default({
                    id: uuid(),
                    label: filter.label
                });
                menuItems.push(menuItem);
            }
            return menuItems;
        },
        ' item_selected': function item_selected(el, ev, item) {
            if (item.filter) {
                _bus2.default.trigger('filter_workspace', item.filter);
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(element, evt, filter) {
            this.options.menu.reset();
            var menuItems = this.parseFilter(filter);
            this.options.menu.load(menuItems);
        }
    });
    exports.default = WorkspaceBreadcrumb;
});
/*app/component/group/password_categories_groups_list*/
define('app/component/group/password_categories_groups_list', [
    'exports',
    'app/model/filter',
    'app/model/group',
    'app/component/group/groups_list',
    'app/view/component/group/groups_list',
    'passbolt-mad/control/bus',
    'app/view/template/component/group/group_item.ejs!'
], function (exports, _filter, _group, _groups_list, _groups_list3, _bus, _group_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _filter2 = _interopRequireDefault(_filter);
    var _group2 = _interopRequireDefault(_group);
    var _groups_list2 = _interopRequireDefault(_groups_list);
    var _groups_list4 = _interopRequireDefault(_groups_list3);
    var _bus2 = _interopRequireDefault(_bus);
    var _group_item2 = _interopRequireDefault(_group_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordCategoriesGroupsList = _groups_list2.default.extend('passbolt.component.PasswordCategoriesGroupsList', {
        defaults: {
            itemClass: _group2.default,
            itemTemplate: _group_item2.default,
            prefixItemId: 'group_',
            selectedGroups: can.Model.List(),
            selectedFilter: null,
            viewClass: _groups_list4.default
        }
    }, {
        select: function select(group) {
            this.view.selectItem(group);
            this.options.selectedGroups.splice(0, this.options.selectedGroups.length);
            this.options.selectedGroups.push(group);
            this.selectedFilter = new _filter2.default({
                id: 'workspace_filter_group_' + group.id,
                label: __('%s (group)', group.name),
                rules: { 'is-shared-with-group': group.id }
            });
            _bus2.default.trigger('filter_workspace', this.selectedFilter);
        }
    });
    exports.default = PasswordCategoriesGroupsList;
});
/*app/view/template/component/password/workspace_filters_tab.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/workspace_filters_tab.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_workspace_filters_tab_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<ul id="js_wsp_pwd_password_categories_chooser">\n    <li class="open node root group-header">\n        <div class="row title no-hover">\n            <div class="main-cell-wrapper">\n                <div class="main-cell">\n                    <h3>Filter by groups</h3>\n                </div>\n            </div>\n        </div>\n    </li>\n</ul>\n<ul id="js_wsp_password_categories_groups_list"></ul>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/password/workspace_filters_tab*/
define('app/component/password/workspace_filters_tab', [
    'exports',
    'passbolt-mad/component/component',
    'app/component/group/password_categories_groups_list',
    'app/model/user',
    'app/view/template/component/password/workspace_filters_tab.ejs!'
], function (exports, _component, _password_categories_groups_list, _user, _workspace_filters_tab) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _password_categories_groups_list2 = _interopRequireDefault(_password_categories_groups_list);
    var _user2 = _interopRequireDefault(_user);
    var _workspace_filters_tab2 = _interopRequireDefault(_workspace_filters_tab);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceFiltersTabComponent = _component2.default.extend('passbolt.component.password.WorkspaceFiltersTab', {
        defaults: {
            template: _workspace_filters_tab2.default,
            selectedGroups: new can.Model.List(),
            state: 'hidden'
        }
    }, {
        afterStart: function afterStart() {
            var self = this;
            var passwordCategoriesGroupsList = new _password_categories_groups_list2.default($('#js_wsp_password_categories_groups_list', this.element), {
                selectedGroups: this.options.selectedGroups,
                defaultGroupFilter: { 'has-users': _user2.default.getCurrent().id },
                afterLoad: function afterLoad(groups) {
                    if (groups.length > 0) {
                        self.setState('ready');
                    }
                }
            });
            passwordCategoriesGroupsList.start();
        }
    });
    exports.default = WorkspaceFiltersTabComponent;
});
/*app/view/component/favorite/favorite*/
define('app/view/component/favorite/favorite', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FavoriteView = _view2.default.extend('passbolt.view.component.favorite.Favorite', {}, {
        favorite: function favorite(el, ev) {
            $('i', this.element).removeClass('fav').addClass('unfav');
        },
        unfavorite: function unfavorite(el, ev) {
            $('i', this.element).removeClass('unfav').addClass('fav');
        }
    });
    exports.default = FavoriteView;
});
/*app/view/template/component/favorite/favorite.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/favorite/favorite.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_favorite_favorite_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<a class="no-text">\n\t<i class="icon ');
                ___v1ew.push(can.view.txt(true, 'i', 'class', this, function () {
                    return instance.isFavorite() ? 'unfav' : 'fav';
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</i>\n\t<span class="visuallyhidden">fav</span>\n</a>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/favorite/favorite*/
define('app/component/favorite/favorite', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/component/button',
    'app/view/component/favorite/favorite',
    'passbolt-mad/control/bus',
    'app/view/template/component/favorite/favorite.ejs!'
], function (exports, _component, _button, _favorite, _bus, _favorite3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _button2 = _interopRequireDefault(_button);
    var _favorite2 = _interopRequireDefault(_favorite);
    var _bus2 = _interopRequireDefault(_bus);
    var _favorite4 = _interopRequireDefault(_favorite3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FavoriteComponent = _component2.default.extend('passbolt.component.Favorite', {
        defaults: {
            label: 'Favorite',
            viewClass: _favorite2.default,
            instance: null,
            template: _favorite4.default
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.setViewData('instance', this.options.instance);
        },
        favorite: function favorite() {
            this.setState('loading');
            this.view.favorite();
            _bus2.default.trigger('request_favorite', this.options.instance);
        },
        unfavorite: function unfavorite() {
            this.setState('loading');
            this.view.unfavorite();
            _bus2.default.trigger('request_unfavorite', this.options.instance);
        },
        click: function click(el, ev) {
            ev.preventDefault();
            ev.stopPropagation();
            if (this.state.is('loading')) {
                return;
            }
            if (!this.options.instance.isFavorite()) {
                this.favorite();
            } else {
                this.unfavorite();
            }
        },
        '{instance} updated': function instanceUpdated(instance) {
            if (this.state.is('loading')) {
                this.setState('ready');
            }
        }
    });
    exports.default = FavoriteComponent;
});
/*app/component/password/grid_contextual_menu*/
define('app/component/password/grid_contextual_menu', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/contextual_menu',
    'passbolt-mad/control/bus',
    'app/model/permission_type'
], function (exports, _action, _contextual_menu, _bus, _permission_type) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _bus2 = _interopRequireDefault(_bus);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GridContextualMenuComponent = _contextual_menu2.default.extend('passbolt.component.password.GridContextualMenu', { defaults: { resource: null } }, {
        afterStart: function afterStart() {
            var _this = this;
            var resource = this.options.resource;
            var canRead = resource.Permission.isAllowedTo(_permission_type2.default.READ), canUpdate = resource.Permission.isAllowedTo(_permission_type2.default.UPDATE), canAdmin = resource.Permission.isAllowedTo(_permission_type2.default.ADMIN);
            var action = new _action2.default({
                id: 'js_password_browser_menu_copy_username',
                label: __('Copy username'),
                initial_state: !canRead ? 'disabled' : 'ready',
                action: function action() {
                    return _this._copyLogin();
                }
            });
            this.insertItem(action);
            var action = new _action2.default({
                id: 'js_password_browser_menu_copy_password',
                label: __('Copy password'),
                initial_state: !canRead ? 'disabled' : 'ready',
                action: function action() {
                    return _this._copySecret();
                }
            });
            this.insertItem(action);
            var action = new _action2.default({
                id: 'js_password_browser_menu_copy_uri',
                label: __('Copy URI'),
                initial_state: !canRead ? 'disabled' : 'ready',
                action: function action() {
                    return _this._copyUri();
                }
            });
            this.insertItem(action);
            var action = new _action2.default({
                id: 'js_password_browser_menu_open_uri',
                label: __('Open URI in a new tab'),
                initial_state: !canRead ? 'disabled' : 'ready',
                cssClasses: ['separator-after'],
                action: function action() {
                    return _this._openUri();
                }
            });
            this.insertItem(action);
            var action = new _action2.default({
                id: 'js_password_browser_menu_edit',
                label: __('Edit'),
                initial_state: !canUpdate ? 'disabled' : 'ready',
                action: function action() {
                    return _this._edit();
                }
            });
            this.insertItem(action);
            var action = new _action2.default({
                id: 'js_password_browser_menu_share',
                label: __('Share'),
                initial_state: !canAdmin ? 'disabled' : 'ready',
                action: function action() {
                    return _this._share();
                }
            });
            this.insertItem(action);
            var action = new _action2.default({
                id: 'js_password_browser_menu_delete',
                label: __('Delete'),
                initial_state: !canUpdate ? 'disabled' : 'ready',
                action: function action() {
                    return _this._delete();
                }
            });
            this.insertItem(action);
            this._super();
        },
        _copyLogin: function _copyLogin() {
            var data = {
                name: 'username',
                data: this.options.resource.username
            };
            _bus2.default.trigger('passbolt.clipboard', data);
            this.remove();
        },
        _copySecret: function _copySecret() {
            var secret = this.options.resource.Secret[0].data;
            _bus2.default.trigger('passbolt.secret.decrypt', secret);
            this.remove();
        },
        _copyUri: function _copyUri() {
            var data = {
                name: 'URL',
                data: this.options.resource.uri
            };
            _bus2.default.trigger('passbolt.clipboard', data);
            this.remove();
        },
        _openUri: function _openUri() {
            var uri = this.options.resource.safeUri();
            window.open(uri, '_blank');
            this.remove();
        },
        _edit: function _edit() {
            _bus2.default.trigger('request_resource_edition', this.options.resource);
            this.remove();
        },
        _share: function _share() {
            _bus2.default.trigger('request_resource_sharing', this.options.resource);
            this.remove();
        },
        _delete: function _delete() {
            _bus2.default.trigger('request_resource_deletion', this.options.resource);
            this.remove();
        }
    });
    exports.default = GridContextualMenuComponent;
});
/*app/view/component/password/grid*/
define('app/view/component/password/grid', [
    'exports',
    'passbolt-mad/view/component/grid'
], function (exports, _grid) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _grid2 = _interopRequireDefault(_grid);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordGridView = _grid2.default.extend('passbolt.view.component.password.Grid', {}, {
        'tbody tr td.password a click': function tbodyTrTdPasswordAClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null, tr = $(el).parents('tr');
            if (this.getController().getItemClass()) {
                data = tr.data(this.getController().getItemClass().fullName);
            } else {
                data = tr[0].id;
            }
            this.element.trigger('password_clicked', [
                data,
                ev
            ]);
        },
        'tbody tr contextmenu': function tbodyTrContextmenu(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            return false;
        },
        'tbody tr mousedown': function tbodyTrMousedown(el, ev) {
            var self = this;
            ev.stopPropagation();
            ev.preventDefault();
            if (ev.which == 3) {
                var data = null, tr = el;
                if (this.getController().getItemClass()) {
                    data = tr.data(this.getController().getItemClass().fullName);
                } else {
                    data = tr[0].id;
                }
                setTimeout(function () {
                    self.element.trigger('item_right_selected', [
                        data,
                        ev
                    ]);
                }, 0);
            }
            return false;
        }
    });
    exports.default = PasswordGridView;
});
/*app/view/template/component/password/grid/column_header_select.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/grid/column_header_select.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_grid_column_header_select_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="input checkbox">\n    <input type="checkbox" name="select all" value="checkbox-select-all" id="checkbox-select-all" disabled="disabled">\n    <label for="checkbox-select-all">');
                ___v1ew.push(' __(\'select all\')</label>\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/password/grid/column_header_favorite.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/grid/column_header_favorite.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_grid_column_header_favorite_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<a>\n    <i class="icon fav"></i>\n    <span class="visuallyhidden">fav</span>\n</a>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/password/grid/cell_secret_template.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/grid/cell_secret_template.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_grid_cell_secret_template_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="secret-copy">\n    <a id="grid_secret_copy_');
                ___v1ew.push(can.view.txt(true, 'a', 'id', this, function () {
                    return item.id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n        <span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('copy password to clipboard');
                }));
                ___v1ew.push('</span>\n    </a>\n    <pre>');
                ___v1ew.push(can.view.txt(1, 'pre', 0, this, function () {
                    return cellValue[0] ? cellValue[0].data : '';
                }));
                ___v1ew.push('</pre>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/password/grid/cell_uri_template.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/grid/cell_uri_template.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_grid_cell_uri_template_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<a href="');
                ___v1ew.push(can.view.txt(true, 'a', 'href', this, function () {
                    return item.safeUri();
                }));
                ___v1ew.push('" target="_blank" rel="noopener"', can.view.pending({ scope: this }), '>');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return cellValue;
                }));
                ___v1ew.push('</a>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/password/grid_empty.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/grid_empty.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_grid_empty_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="empty-content">\n\t<h1>');
                ___v1ew.push(can.view.txt(1, 'h1', 0, this, function () {
                    return __('Welcome to passbolt!');
                }));
                ___v1ew.push('</h1>\n\t<p>');
                ___v1ew.push(can.view.txt(1, 'p', 0, this, function () {
                    return __('It does feel a bit empty here. Create your first password or');
                }));
                ___v1ew.push('<br>\n\t\t');
                ___v1ew.push(can.view.txt(1, 'br', 0, this, function () {
                    return __('wait for a team member to share one with you.');
                }));
                ___v1ew.push('</p>\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/password/grid*/
define('app/component/password/grid', [
    'exports',
    'moment',
    'passbolt-mad/form/element/checkbox',
    'app/util/common',
    'passbolt-mad/helper/component',
    'app/component/favorite/favorite',
    'passbolt-mad/model/grid_column',
    'passbolt-mad/component/grid',
    'app/component/password/grid_contextual_menu',
    'passbolt-mad/model/list',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/view/component/password/grid',
    'app/model/resource',
    'app/view/template/component/password/grid/column_header_select.ejs!',
    'app/view/template/component/password/grid/column_header_favorite.ejs!',
    'app/view/template/component/password/grid/cell_secret_template.ejs!',
    'app/view/template/component/password/grid/cell_uri_template.ejs!',
    'app/view/template/component/password/grid_empty.ejs!'
], function (exports, _moment, _checkbox, _common, _component, _favorite, _grid_column, _grid, _grid_contextual_menu, _list, _bus, _map, _grid3, _resource, _column_header_select, _column_header_favorite, _cell_secret_template, _cell_uri_template, _grid_empty) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _moment2 = _interopRequireDefault(_moment);
    var _checkbox2 = _interopRequireDefault(_checkbox);
    var _common2 = _interopRequireDefault(_common);
    var _component2 = _interopRequireDefault(_component);
    var _favorite2 = _interopRequireDefault(_favorite);
    var _grid_column2 = _interopRequireDefault(_grid_column);
    var _grid2 = _interopRequireDefault(_grid);
    var _grid_contextual_menu2 = _interopRequireDefault(_grid_contextual_menu);
    var _list2 = _interopRequireDefault(_list);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _grid4 = _interopRequireDefault(_grid3);
    var _resource2 = _interopRequireDefault(_resource);
    var _column_header_select2 = _interopRequireDefault(_column_header_select);
    var _column_header_favorite2 = _interopRequireDefault(_column_header_favorite);
    var _cell_secret_template2 = _interopRequireDefault(_cell_secret_template);
    var _cell_uri_template2 = _interopRequireDefault(_cell_uri_template);
    var _grid_empty2 = _interopRequireDefault(_grid_empty);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordGridComponent = _grid2.default.extend('passbolt.component.password.Grid', {
        defaults: {
            itemClass: _resource2.default,
            viewClass: _grid4.default,
            selectedRs: new can.Model.List(),
            prefixItemId: 'resource_',
            silentLoading: false,
            state: 'loading'
        }
    }, {
        filterSettings: null,
        oldFilterSettings: null,
        init: function init(el, options) {
            options.map = this._getGridMap();
            options.columnModel = this._getGridColumns();
            this._super(el, options);
        },
        _getGridMap: function _getGridMap() {
            var map = new _map2.default({
                id: 'id',
                name: 'name',
                username: 'username',
                secret: 'Secret',
                uri: 'uri',
                modified: {
                    key: 'modified',
                    func: function func(value) {
                        return _common2.default.datetimeGetTimeAgo(value);
                    }
                },
                owner: 'Creator.username'
            });
            return map;
        },
        _getGridColumns: function _getGridColumns() {
            var columns = [];
            var selectColumn = new _grid_column2.default({
                name: 'multipleSelect',
                index: 'multipleSelect',
                css: ['selections s-cell'],
                label: _column_header_select2.default,
                afterRender: this._initSelectColumnComponent
            });
            columns.push(selectColumn);
            var favoriteColumn = new _grid_column2.default({
                name: 'favorite',
                index: 'favorite',
                css: ['selections s-cell'],
                label: _column_header_favorite2.default,
                afterRender: this._initFavoriteCellComponent
            });
            columns.push(favoriteColumn);
            var nameColumn = new _grid_column2.default({
                name: 'name',
                index: 'name',
                css: ['m-cell'],
                label: __('Resource'),
                sortable: true
            });
            columns.push(nameColumn);
            var usernameColumn = new _grid_column2.default({
                name: 'username',
                index: 'username',
                css: ['m-cell'],
                label: __('Username'),
                sortable: true
            });
            columns.push(usernameColumn);
            var secretColumn = new _grid_column2.default({
                name: 'secret',
                index: 'secret',
                css: [
                    'm-cell',
                    'password'
                ],
                label: __('Password'),
                template: _cell_secret_template2.default
            });
            columns.push(secretColumn);
            var uriColumn = new _grid_column2.default({
                name: 'uri',
                index: 'uri',
                css: ['l-cell'],
                label: __('URI'),
                sortable: true,
                template: _cell_uri_template2.default
            });
            columns.push(uriColumn);
            var modifiedColumn = new _grid_column2.default({
                name: 'modified',
                index: 'modified',
                css: ['m-cell'],
                sortable: true,
                label: __('Modified')
            });
            columns.push(modifiedColumn);
            var ownerColumn = new _grid_column2.default({
                name: 'owner',
                index: 'owner',
                css: ['m-cell'],
                label: __('Owner'),
                sortable: true
            });
            columns.push(ownerColumn);
            return columns;
        },
        _initSelectColumnComponent: function _initSelectColumnComponent(cellElement, cellValue, mappedItem, item, columnModel) {
            var availableValues = {};
            availableValues[item.id] = '';
            var checkbox = _component2.default.create(cellElement, 'inside_replace', _checkbox2.default, {
                id: 'multiple_select_checkbox_' + item.id,
                cssClasses: ['js_checkbox_multiple_select'],
                availableValues: availableValues
            });
            checkbox.start();
        },
        _initFavoriteCellComponent: function _initFavoriteCellComponent(cellElement, cellValue, mappedItem, item, columnModel) {
            var availableValues = {};
            availableValues[item.id] = '';
            var favorite = _component2.default.create(cellElement, 'inside_replace', _favorite2.default, {
                id: 'favorite_' + item.id,
                instance: item
            });
            favorite.start();
        },
        showContextualMenu: function showContextualMenu(resource, x, y) {
            var contextualMenu = new _grid_contextual_menu2.default(null, {
                state: 'hidden',
                resource: resource,
                coordinates: {
                    x: x,
                    y: y
                }
            });
            contextualMenu.start();
            contextualMenu.setState('ready');
        },
        refreshItem: function refreshItem(resource) {
            if (!this.itemExists(resource)) {
                return;
            }
            this._super(resource);
            if (this.isSelected(resource)) {
                var id = 'multiple_select_checkbox_' + resource.id, checkbox = mad.getControl(id, 'mad.form.Checkbox');
                checkbox.setValue([resource.id]);
                this.view.selectItem(resource);
            }
        },
        beforeSelect: function beforeSelect(item) {
            var returnValue = true;
            if (this.state.is('selection')) {
                if (this.isSelected(item)) {
                    this.unselect(item);
                    this.setState('ready');
                    returnValue = false;
                } else {
                    for (var i = this.options.selectedRs.length - 1; i > -1; i--) {
                        this.unselect(this.options.selectedRs[i]);
                    }
                }
            }
            return returnValue;
        },
        isSelected: function isSelected(item) {
            return this.options.selectedRs.length > 0 && this.options.selectedRs[0].id == item.id;
        },
        select: function select(item) {
            if (!this.itemExists(item)) {
                return;
            }
            if (this.isSelected(item)) {
                return;
            }
            if (!this.state.is('multipleSelection') && this.options.selectedRs.length > 0) {
                this.unselect(this.options.selectedRs[0]);
            }
            this.options.selectedRs.push(item);
            var id = 'multiple_select_checkbox_' + item.id, checkbox = mad.getControl(id, 'mad.form.Checkbox');
            checkbox.setValue([item.id]);
            this.view.selectItem(item);
            _bus2.default.trigger('resource_selected', item);
        },
        unselect: function unselect(item, silent) {
            silent = silent || false;
            if (!this.itemExists(item)) {
                return;
            }
            var id = 'multiple_select_checkbox_' + item.id, checkbox = mad.getControl(id, 'mad.form.Checkbox');
            checkbox.reset();
            this.view.unselectItem(item);
            _list2.default.remove(this.options.selectedRs, item);
            if (!silent) {
                _bus2.default.trigger('resource_unselected', item);
            }
        },
        filterBySettings: function filterBySettings(filter) {
            var self = this, def = null;
            if (!this.filterSettings || this.filterSettings.id !== filter.id) {
                this.setState('loading');
                this.reset();
                var findOptions = {
                    silentLoading: false,
                    contain: {
                        creator: 1,
                        favorite: 1,
                        modifier: 1,
                        secret: 1,
                        permission: 1
                    },
                    filter: filter.getRules(['keywords']),
                    order: filter.getOrders()
                };
                def = _resource2.default.findAll(findOptions).then(function (resources, response, request) {
                    if (self.element == null)
                        return;
                    self.filtered = false;
                    self.load(resources);
                });
            }
            $.when(def).done(function () {
                self.filterSettings = filter;
                var orders = filter.getOrders();
                if (orders && orders[0]) {
                    var matches = /((\w*)\.)?(\w*)\s*(asc|desc|ASC|DESC)?/i.exec(orders[0]), modelName = matches[2], fieldName = matches[3], sortWay = matches[4] ? matches[4].toLowerCase() : 'asc';
                    if (fieldName) {
                        var sortedColumnModel = self.getColumnModel(fieldName);
                        if (sortedColumnModel) {
                            self.view.markColumnAsSorted(sortedColumnModel, sortWay === 'asc');
                        }
                    }
                }
                var keywords = filter.getRule('keywords');
                if (keywords && keywords != '') {
                    self.filterByKeywords(keywords, {
                        searchInFields: [
                            'username',
                            'name',
                            'uri',
                            'description'
                        ]
                    });
                } else if (self.isFiltered()) {
                    self.resetFilter();
                }
                var states = ['ready'];
                if (!self.options.items.length) {
                    states.push('empty');
                    if (self.filterSettings.id == 'default') {
                        states.push('all_items');
                    }
                }
                self.setState(states);
            });
            return def;
        },
        '{passbolt.model.Resource} created': function passboltModelResourceCreated(model, ev, resource) {
            if (this.state.is('empty')) {
                this.setState('ready');
            }
            this.insertItem(resource, null, 'first');
        },
        '{passbolt.model.Resource} updated': function passboltModelResourceUpdated(model, ev, resource) {
            if (this.options.items.indexOf(resource) != -1) {
                this.refreshItem(resource);
            }
        },
        ' item_selected': function item_selected(el, ev, item, srcEvent) {
            this.setState('selection');
            if (this.beforeSelect(item)) {
                this.select(item);
            }
        },
        ' item_right_selected': function item_right_selected(el, ev, item, srcEvent) {
            this.select(item);
            var $item = $('#' + this.options.prefixItemId + item.id);
            var itemOffset = $item.offset();
            this.showContextualMenu(item, srcEvent.pageX - 3, itemOffset.top, srcEvent.target);
        },
        ' password_clicked': function password_clicked(el, ev, item, srcEvent) {
            var secret = item.Secret[0].data;
            _bus2.default.trigger('passbolt.secret.decrypt', secret);
        },
        '.js_checkbox_multiple_select checked': function js_checkbox_multiple_selectChecked(el, ev, rsId) {
            if (this.state.is('ready')) {
                this.setState('selection');
            }
            var i = _list2.default.indexOf(this.options.items, rsId);
            var resource = this.options.items[i];
            if (this.beforeSelect(resource)) {
                this.select(resource);
            }
        },
        '.js_checkbox_multiple_select unchecked': function js_checkbox_multiple_selectUnchecked(el, ev, rsId) {
            var i = _list2.default.indexOf(this.options.items, rsId);
            var resource = this.options.items[i];
            this.unselect(resource);
            if (!this.options.selectedRs.length) {
                this.setState('ready');
            } else if (this.options.selectedRs.length == 1) {
                this.setState('selection');
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev, filter) {
            this.filterBySettings(filter);
        },
        '{selectedRs} remove': function selectedRsRemove(el, ev, items) {
            for (var i in items) {
                this.unselect(items[i]);
            }
        },
        stateEmpty: function stateEmpty(go) {
            if (go) {
                if (this.filterSettings.id == 'default') {
                    var empty_html = mad.View.render(_grid_empty2.default);
                    $('.tableview-content', this.element).prepend(empty_html);
                }
            } else {
                $('.empty-content', this.element).remove();
            }
        }
    });
    exports.default = PasswordGridComponent;
});
/*app/view/template/component/password/workspace_primary_menu.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/workspace_primary_menu.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_workspace_primary_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li>\n    <a id="js_wk_menu_secretcopy_button" class="button">\n        <i class="fa fa-fw fa-clipboard"></i>\n        <span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('copy');
                }));
                ___v1ew.push('</span>\n    </a>\n</li>\n<li>\n\t<a id="js_wk_menu_edition_button" class="button">\n\t\t<i class="fa fa-fw fa-edit"></i>\n\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('edit');
                }));
                ___v1ew.push('</span>\n\t</a>\n</li>\n<li>\n\t<a id="js_wk_menu_sharing_button" class="button">\n\t\t<i class="fa fa-fw fa-share"></i>\n\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('share');
                }));
                ___v1ew.push('</span>\n\t</a>\n</li>\n<li>\n\t<div class="dropdown">\n\t\t<a id="js_wk_menu_more_button" class="button">\n\t\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('more');
                }));
                ___v1ew.push('</span>\n\t\t\t<i class="fa fa-fw fa-caret-down"></i>\n\t\t</a>\n\t</div>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/password/workspace_primary_menu*/
define('app/component/password/workspace_primary_menu', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/component',
    'passbolt-mad/component/button',
    'passbolt-mad/component/button_dropdown',
    'passbolt-mad/control/bus',
    'app/model/permission_type',
    'app/view/template/component/password/workspace_primary_menu.ejs!'
], function (exports, _action, _component, _button, _button_dropdown, _bus, _permission_type, _workspace_primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _button2 = _interopRequireDefault(_button);
    var _button_dropdown2 = _interopRequireDefault(_button_dropdown);
    var _bus2 = _interopRequireDefault(_bus);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordWorkspaceMenuComponent = _component2.default.extend('passbolt.component.PasswordWorkspaceMenu', {
        defaults: {
            label: 'Workspace Menu Controller',
            tag: 'ul',
            selectedRs: new can.Model.List(),
            template: _workspace_primary_menu2.default
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            var copySecretButton = new _button2.default($('#js_wk_menu_secretcopy_button'), {
                state: 'disabled',
                events: {
                    click: function click() {
                        return _this._copySecret();
                    }
                }
            });
            copySecretButton.start();
            this.options.secretCopyButton = copySecretButton;
            var editButton = new _button2.default($('#js_wk_menu_edition_button'), {
                state: 'disabled',
                events: {
                    click: function click() {
                        return _this._edit();
                    }
                }
            });
            editButton.start();
            this.options.editButton = editButton;
            var shareButton = new _button2.default($('#js_wk_menu_sharing_button'), {
                state: 'disabled',
                events: {
                    click: function click() {
                        return _this._share();
                    }
                }
            });
            shareButton.start();
            this.options.shareButton = shareButton;
            var moreButtonMenuItems = [];
            var copyLoginItem = new _action2.default({
                id: uuid(),
                label: __('copy login to clipboard'),
                cssClasses: [],
                action: function action() {
                    return _this._copyLogin();
                }
            });
            moreButtonMenuItems.push(copyLoginItem);
            var copySecretItem = new _action2.default({
                id: uuid(),
                label: __('copy password to clipboard'),
                cssClasses: [],
                action: function action() {
                    return _this._copySecret();
                }
            });
            moreButtonMenuItems.push(copySecretItem);
            var deleteItem = new _action2.default({
                id: 'js_wk_menu_delete_action',
                label: __('delete'),
                cssClasses: [],
                action: function action() {
                    return _this._delete();
                }
            });
            moreButtonMenuItems.push(deleteItem);
            var moreButton = new _button_dropdown2.default($('#js_wk_menu_more_button'), {
                state: 'disabled',
                items: moreButtonMenuItems,
                template: null
            });
            moreButton.start();
            this.options.moreButton = moreButton;
            this.on();
        },
        _copyLogin: function _copyLogin() {
            var username = this.options.selectedRs[0].username;
            _bus2.default.trigger('passbolt.clipboard', {
                name: 'username',
                data: username
            });
        },
        _copySecret: function _copySecret() {
            var secret = this.options.selectedRs[0].Secret[0].data;
            _bus2.default.trigger('passbolt.secret.decrypt', secret);
        },
        _delete: function _delete() {
            var resource = this.options.selectedRs[0];
            _bus2.default.trigger('request_resource_deletion', resource);
        },
        _edit: function _edit() {
            var resource = this.options.selectedRs[0];
            _bus2.default.trigger('request_resource_edition', resource);
        },
        _share: function _share() {
            var resource = this.options.selectedRs[0];
            _bus2.default.trigger('request_resource_sharing', resource);
        },
        '{selectedRs} add': function selectedRsAdd(el, ev, resource) {
            if (this.options.selectedRs.length == 1) {
                this.setState('selection');
            } else if (this.options.selectedRs.length == 0) {
                this.setState('ready');
            }
        },
        '{selectedRs} remove': function selectedRsRemove(el, ev, resource) {
            if (this.options.selectedRs.length == 1) {
                this.setState('selection');
            } else if (this.options.selectedRs.length == 0) {
                this.setState('ready');
            }
        },
        stateSelection: function stateSelection(go) {
            if (go) {
                var permission = this.options.selectedRs[0].Permission;
                var updatable = permission.isAllowedTo(_permission_type2.default.UPDATE);
                var administrable = permission.isAllowedTo(_permission_type2.default.ADMIN);
                this.options.secretCopyButton.setValue(this.options.selectedRs[0]).setState('ready');
                this.options.editButton.setValue(this.options.selectedRs[0]).setState(updatable ? 'ready' : 'disabled');
                this.options.shareButton.setValue(this.options.selectedRs).setState(administrable ? 'ready' : 'disabled');
                this.options.moreButton.setValue(this.options.selectedRs[0]).setState('ready');
                this.options.moreButton.setItemState('js_wk_menu_delete_action', updatable ? 'ready' : 'disabled');
            } else {
                this.options.secretCopyButton.setValue(null).setState('disabled');
                this.options.editButton.setValue(null).setState('disabled');
                this.options.shareButton.setValue(null).setState('disabled');
                this.options.moreButton.setValue(null).setState('disabled');
                this.options.moreButton.setItemState('js_wk_menu_delete_action', 'disabled');
            }
        }
    });
    exports.default = PasswordWorkspaceMenuComponent;
});
/*app/model/comment*/
define('app/model/comment', [
    'exports',
    'passbolt-mad/net/ajax',
    'passbolt-mad/model/model',
    'passbolt-mad/model/serializer/cake_serializer',
    'app/model/user'
], function (exports, _ajax, _model, _cake_serializer, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _model2 = _interopRequireDefault(_model);
    var _cake_serializer2 = _interopRequireDefault(_cake_serializer);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Comment = _model2.default.extend('passbolt.model.Comment', {
        attributes: {
            id: 'string',
            parent_id: 'string',
            foreign_model: 'string',
            foreign_key: 'string',
            content: 'string',
            created: 'string',
            modified: 'string',
            Creator: 'passbolt.model.User.model',
            Modifier: 'passbolt.model.User.model'
        },
        validationRules: {
            id: [{ rule: 'uuid' }],
            content: [
                {
                    rule: 'required',
                    message: __('A comment is required.')
                },
                {
                    rule: [
                        'lengthBetween',
                        1,
                        255
                    ],
                    message: __('The comment should be between %s and %s characters.', 1, 255)
                },
                {
                    rule: 'utf8Extended',
                    message: __('The comment should be a valid utf8 string.')
                }
            ]
        },
        create: function create(attrs) {
            var self = this;
            var params = _cake_serializer2.default.to(attrs, this);
            return _ajax2.default.request({
                url: APP_URL + 'comments/resource/' + attrs.foreign_key + '.json',
                type: 'POST',
                params: params
            }).pipe(function (data, textStatus, jqXHR) {
                var def = $.Deferred();
                def.resolveWith(this, [_cake_serializer2.default.from(data, self)]);
                return def;
            });
        },
        destroy: function destroy(id) {
            var params = { id: id };
            return _ajax2.default.request({
                url: APP_URL + 'comments/{id}.json',
                type: 'DELETE',
                params: params
            });
        },
        findAll: function findAll(params) {
            return _ajax2.default.request({
                url: APP_URL + 'comments/resource/{foreignKey}.json',
                type: 'GET',
                params: params
            });
        },
        findOne: function findOne(params) {
            return _ajax2.default.request({
                url: APP_URL + 'comments/resource/{foreignKey}.json',
                type: 'GET',
                params: params
            });
        }
    }, {});
    exports.default = Comment;
});
/*app/view/template/form/comment/add.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/form/comment/add.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_comment_add_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<ul>\n\t<li class="comment-wrapper">\n        <form id="js_comment_add_form" class="form comment add">\n            <div class="wrap-right-column">\n                <div class="right-column">\n                    <div class="form-content">\n                        <input name="data[comment][parent_id]" class="js_comment_parent_id required" type="hidden" />\n                        <input name="data[comment][foreign_key]" class="js_comment_foreign_key required" type="hidden" />\n                        <input name="data[comment][foreign_model]" class="js_comment_foreign_model required" type="hidden" />\n                        <div class="input textarea required">\n                            <label for="js_field_comment_content">Add a comment</label>\n                            <textarea id="js_field_comment_content" name="data[comment][content]" class="js_comment_content required" maxlength="255"  placeholder="add a comment"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</textarea>\n                            <div class="js_comment_content_feedback message"></div>\n                        </div>\n                        <div class="metadata">\n                            <span class="author username"><a>You</a></span>\n                            <span class="modified">right now</span>\n                        </div>\n                        <div class="actions">\n                            <a class="button comment-submit"><span>send</span></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="left-column">\n                ');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (user.Profile.Avatar) {
                        ___v1ew.push('\n                <div class="author profile picture"><a><img ');
                        ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                            var ___v1ew = [];
                            ___v1ew.push('src="');
                            ___v1ew.push(user.Profile.Avatar.url.small);
                            ___v1ew.push('"');
                            return ___v1ew.join('');
                        }));
                        ___v1ew.push(' alt="');
                        ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                            return user.Profile.first_name;
                        }));
                        ___v1ew.push(' ');
                        ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                            return user.Profile.last_name;
                        }));
                        ___v1ew.push(' avatar"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('</a></div>\n                ');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n            </div>\n        </form>\n\t</li>\n</ul>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/comment/create*/
define('app/form/comment/create', [
    'exports',
    'app/model/comment',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox',
    'app/model/user',
    'app/view/template/form/comment/add.ejs!'
], function (exports, _comment, _feedback, _form, _textbox, _user, _add) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _comment2 = _interopRequireDefault(_comment);
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _user2 = _interopRequireDefault(_user);
    var _add2 = _interopRequireDefault(_add);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.comment.Create', {
        defaults: {
            foreignModel: null,
            foreignKey: null,
            callbacks: {
                submit: function submit(data) {
                    var instance = new _comment2.default(data['passbolt.model.Comment']).save();
                }
            },
            template: _add2.default,
            commentContentField: null
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.setViewData('user', _user2.default.getCurrent());
        },
        afterStart: function afterStart() {
            this.addElement(new _textbox2.default($('.js_comment_parent_id', this.element), { modelReference: 'passbolt.model.Comment.parent_id' }).start());
            this.addElement(new _textbox2.default($('.js_comment_foreign_model', this.element), { modelReference: 'passbolt.model.Comment.foreign_model' }).start().setValue('Resource'));
            this.addElement(new _textbox2.default($('.js_comment_foreign_key', this.element), { modelReference: 'passbolt.model.Comment.foreign_key' }).start().setValue(this.options.foreignKey));
            this.options.commentContentField = new _textbox2.default($('.js_comment_content', this.element), { modelReference: 'passbolt.model.Comment.content' }).start();
            this.addElement(this.options.commentContentField, new _feedback2.default($('.js_comment_content_feedback', this.element), {}).start());
        },
        emptyContent: function emptyContent() {
            this.options.commentContentField.setValue('');
        },
        stateReady: function stateReady() {
            this.options.commentContentField.setValue('');
        },
        stateHidden: function stateHidden(go) {
            this._super(go);
            this.validations = 0;
        }
    });
    exports.default = CreateForm;
});
/*app/view/component/comment/comments_list*/
define('app/view/component/comment/comments_list', [
    'exports',
    'passbolt-mad/view/component/tree'
], function (exports, _tree) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _tree2 = _interopRequireDefault(_tree);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CommentsListView = _tree2.default.extend('passbolt.view.component.comment.CommentsList', {}, {
        ' .actions a.js_delete_comment click': function actionsAJs_delete_commentClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null;
            var li = el.parents('li.comment-wrapper');
            if (this.getController().getItemClass()) {
                data = li.data(this.getController().getItemClass().fullName);
            } else {
                data = li[0].id;
            }
            el.trigger('request_delete_comment', data);
        }
    });
    exports.default = CommentsListView;
});
/*app/view/template/component/comment/delete_confirm.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/comment/delete_confirm.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_comment_delete_confirm_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(1, '', 0, this, function () {
                    return __('Please confirm you really want to delete the comment. After clicking ok, the comment will be');
                }));
                ___v1ew.push(' <strong>');
                ___v1ew.push(can.view.txt(1, 'strong', 0, this, function () {
                    return __('deleted permanently');
                }));
                ___v1ew.push('</strong>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/comment/comment_item.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/comment/comment_item.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_comment_comment_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li class="comment-wrapper" id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push('', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="comment">\n\t\t<div class="wrap-right-column">\n\t\t\t<div class="right-column">\n\t\t\t\t<div class="content-wrapper">\n\t\t\t\t\t<p>');
                ___v1ew.push(can.view.txt(1, 'p', 0, this, function () {
                    return mappedItem.content;
                }));
                ___v1ew.push('</p>\n\t\t\t\t\t<div class="metadata">\n\t\t\t\t\t\t<span class="author username">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.creatorName;
                }));
                ___v1ew.push('</span>\n\t\t\t\t\t\t<span class="modified">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return datetimeGetTimeAgo(mappedItem.modified);
                }));
                ___v1ew.push('</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="actions">\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a class="js_delete_comment hidden">\n\t\t\t\t\t\t\t\t\t<i class="fa fa-fw fa-trash"></i>\n\t\t\t\t\t\t\t\t\t<span class="visuallyhidden">delete</span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class="left-column">\n\t\t\t<div class="author profile picture"><a>\n\t\t\t\t<img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(mappedItem.creatorAvatarPath);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="comment author picture" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n\t\t\t</a></div>\n\t\t</div>\n\t</div>\n</li>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/comment/comments_list*/
define('app/component/comment/comments_list', [
    'exports',
    'app/model/comment',
    'app/view/component/comment/comments_list',
    'passbolt-mad/component/confirm',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'app/model/user',
    'app/view/template/component/comment/delete_confirm.ejs!',
    'app/view/template/component/comment/comment_item.ejs!'
], function (exports, _comment, _comments_list, _confirm, _bus, _map, _tree, _user, _delete_confirm, _comment_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _comment2 = _interopRequireDefault(_comment);
    var _comments_list2 = _interopRequireDefault(_comments_list);
    var _confirm2 = _interopRequireDefault(_confirm);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _user2 = _interopRequireDefault(_user);
    var _delete_confirm2 = _interopRequireDefault(_delete_confirm);
    var _comment_item2 = _interopRequireDefault(_comment_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CommentsListComponent = _tree2.default.extend('passbolt.component.comment.CommentsList', {
        defaults: {
            label: 'Comments List Controller',
            viewClass: _comments_list2.default,
            itemClass: _comment2.default,
            itemTemplate: _comment_item2.default,
            foreignModel: null,
            foreignKey: null
        }
    }, {
        init: function init(el, options) {
            options.map = this._getMap();
            this._super(el, options);
        },
        _getMap: function _getMap() {
            return new _map2.default({
                id: 'id',
                content: 'content',
                modified: 'modified',
                creatorAvatarPath: {
                    key: 'Creator',
                    func: function func(creator, map, obj) {
                        return creator.Profile.avatarPath('small');
                    }
                },
                creatorName: {
                    key: 'Creator',
                    func: function func(creator, map, obj) {
                        return creator.Profile.fullName();
                    }
                }
            });
        },
        insertItem: function insertItem(item, refItem, position) {
            this._super(item, refItem, position);
            var isOwner = item.created_by != undefined && item.created_by == _user2.default.getCurrent().id;
            if (isOwner) {
                var $deleteActionEl = $('li#' + item.id + ' .js_delete_comment', this.element);
                $deleteActionEl.removeClass('hidden');
            }
        },
        ' request_delete_comment': function request_delete_comment(elt, evt, data) {
            var confirm = new _confirm2.default(null, {
                label: __('Do you really want to delete?'),
                content: _delete_confirm2.default,
                submitButton: {
                    label: __('delete comment'),
                    cssClasses: ['warning']
                },
                action: function action() {
                    _bus2.default.trigger('request_delete_comment', data);
                }
            });
            confirm.start();
        }
    });
    exports.default = CommentsListComponent;
});
/*app/view/component/comment/comments_sidebar_section*/
define('app/view/component/comment/comments_sidebar_section', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CommentsSidebarSectionView = _view2.default.extend('passbolt.view.component.comment.CommentsSidebarSection', {}, {
        ' a.js_add_comment click': function aJs_add_commentClick(el, ev) {
            this.getController().addForm.setState('ready');
        },
        'a.button.comment-submit click': function aButtonCommentSubmitClick(el, ev) {
            el.trigger('submit');
        }
    });
    exports.default = CommentsSidebarSectionView;
});
/*app/view/template/component/comment/comments.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/comment/comments.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_comment_comments_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Comments');
                }));
                ___v1ew.push('</h4>\n<a class="js_add_comment section-action"><i class="fa fa-fw fa-plus-circle"></i><span class="visuallyhidden">create</span></a>\n<div id="js_rs_details_comments_add_form"></div>\n<ul id="js_rs_details_comments_list"></ul>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/comment/comments_sidebar_section*/
define('app/component/comment/comments_sidebar_section', [
    'exports',
    'app/model/comment',
    'app/form/comment/create',
    'app/component/comment/comments_list',
    'app/view/component/comment/comments_sidebar_section',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'app/view/template/component/comment/comments.ejs!'
], function (exports, _comment, _create, _comments_list, _comments_sidebar_section, _component, _bus, _comments) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _comment2 = _interopRequireDefault(_comment);
    var _create2 = _interopRequireDefault(_create);
    var _comments_list2 = _interopRequireDefault(_comments_list);
    var _comments_sidebar_section2 = _interopRequireDefault(_comments_sidebar_section);
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _comments2 = _interopRequireDefault(_comments);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CommentsSidebarSectionComponent = _component2.default.extend('passbolt.component.comment.CommentsSidebarSection', {
        defaults: {
            label: 'Comments Controller',
            viewClass: _comments_sidebar_section2.default,
            resource: null,
            foreignModel: null,
            foreignKey: null,
            template: _comments2.default,
            state: 'loading'
        }
    }, {
        afterStart: function afterStart() {
            this._initForm();
            this._initCommentsList();
            this._loadComments();
            this._super();
        },
        _initForm: function _initForm() {
            var form = new _create2.default($('#js_rs_details_comments_add_form', this.element), {
                foreignModel: this.options.foreignModel,
                foreignKey: this.options.foreignKey,
                state: 'hidden'
            });
            form.start();
            this.addForm = form;
        },
        _initCommentsList: function _initCommentsList() {
            var component = new _comments_list2.default($('#js_rs_details_comments_list', this.element), {
                resource: this.options.resource,
                foreignModel: this.options.foreignModel,
                foreignKey: this.options.foreignKey,
                state: 'loading'
            });
            component.start();
            this.commentsList = component;
        },
        _loadComments: function _loadComments() {
            var self = this;
            _comment2.default.findAll({
                foreignModel: this.options.foreignModel,
                foreignKey: this.options.foreignKey,
                contain: { creator: 1 }
            }).then(function (comments) {
                if (!comments.length) {
                    self.addForm.setState('visible');
                } else {
                    self.commentsList.load(comments);
                }
                self.commentsList.setState('ready');
                self.setState('ready');
            });
        },
        '{mad.bus.element} request_delete_comment': function madBusElementRequest_delete_comment(model, ev, comment) {
            this.setState('loading');
            comment.destroy().then(function () {
                _bus2.default.trigger('comment_deleted', comment);
            });
        },
        '{passbolt.model.Comment} created': function passboltModelCommentCreated(model, ev, comment) {
            if (comment.foreign_key == this.options.resource.id) {
                this.setState('loading');
                this.refresh();
            }
        },
        '{mad.bus.element} comment_deleted': function madBusElementComment_deleted(model, ev, comment) {
            this.commentsList.removeItem(comment);
            if (this.commentsList.options.items.attr('length') == 0) {
                this.addForm.emptyContent();
                this.addForm.setState('visible');
            }
            this.setState('ready');
        }
    });
    exports.default = CommentsSidebarSectionComponent;
});
/*app/view/component/workspace/sidebar_section*/
define('app/view/component/workspace/sidebar_section', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SidebarSection = _view2.default.extend('passbolt.view.component.SidebarSection', {}, {});
    exports.default = SidebarSection;
});
/*app/view/component/password/description_sidebar_section*/
define('app/view/component/password/description_sidebar_section', [
    'exports',
    'app/view/component/workspace/sidebar_section'
], function (exports, _sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _sidebar_section2 = _interopRequireDefault(_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Description = _sidebar_section2.default.extend('passbolt.view.component.sidebarSection.Description', {}, {
        'a#js_edit_description_button, p.description_content click': function aJs_edit_description_buttonPDescription_contentClick(el, ev) {
            if (this.getController().getViewData('editable') !== false) {
                this.element.trigger('request_resource_description_edit');
            }
        },
        '{window} click': function windowClick(el, ev) {
            var isEditState = this.getController().state.is('edit');
            var evtSrc = ev.originalEvent.target;
            var descriptionElt = $('p.description_content', this.getController().element).get(0);
            var editButtonElement = $('a#js_edit_description_button i', this.getController().element).get(0);
            var clickIsOnEditElement = descriptionElt == evtSrc || editButtonElement == evtSrc;
            if (isEditState && !clickIsOnEditElement) {
                var $form = $('.form-content', this.getController().element);
                var contained = $.contains($form.get(0), evtSrc);
                if (!contained) {
                    this.getController().setState('ready');
                }
            }
        },
        showDescription: function showDescription(visible) {
            if (visible) {
                $('.description_content', $(this.element)).show();
            } else {
                $('.description_content', $(this.element)).hide();
            }
        }
    });
    exports.default = Description;
});
/*app/view/template/form/resource/edit_description.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/form/resource/edit_description.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_resource_edit_description_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content resource-description-edit-wrapper">\n\t<input name="data[Resource][id]" class="js_resource_id required" type="hidden" />\n    <div class="input text required js_form_element_wrapper">\n        <textarea name="data[Resource][description]" class="js_resource_description" maxlength="10000" placeholder="enter a description"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</textarea>\n\t\t<div class="js_resource_description_feedback message">\n\t\t</div>\n    </div>\n\t<div class="actions">\n\t\t<input type="submit" class="button resource-submit" value="save" />\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/resource/edit_description*/
define('app/form/resource/edit_description', [
    'exports',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox',
    'app/view/template/form/resource/edit_description.ejs!'
], function (exports, _feedback, _form, _textbox, _edit_description) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _edit_description2 = _interopRequireDefault(_edit_description);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditDescriptionForm = _form2.default.extend('passbolt.form.resource.EditDescription', {
        defaults: {
            template: _edit_description2.default,
            resource: null,
            descriptionField: null
        }
    }, {
        afterStart: function afterStart() {
            this.addElement(new _textbox2.default($('.js_resource_id', this.element), { modelReference: 'passbolt.model.Resource.id' }).start().setValue(this.options.resource.id));
            this.options.descriptionField = this.addElement(new _textbox2.default($('.js_resource_description', this.element), { modelReference: 'passbolt.model.Resource.description' }).start(), new _feedback2.default($('.js_resource_description_feedback', this.element), {}).start());
            this.options.descriptionField.setValue(this.options.resource.description);
            $('.button.resource-submit').click(function () {
                $(this).trigger('submit');
            });
        },
        reset: function reset(description) {
            this._super();
            if (description == undefined) {
                description = this.options.resource.description;
            }
            this.options.descriptionField.setValue(description);
        }
    });
    exports.default = EditDescriptionForm;
});
/*app/view/template/component/password/description_sidebar_section.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/description_sidebar_section.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_description_sidebar_section_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Description');
                }));
                ___v1ew.push('</h4>\n');
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    if (editable) {
                        ___v1ew.push('\n<a class="edit_description_button section-action" id="js_edit_description_button">\n\t<i class="fa fa-fw fa-edit"></i>\n\t<span class="visuallyhidden">edit</span>\n</a>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n<p class="description_content">');
                ___v1ew.push(can.view.txt(1, 'p', 0, this, function () {
                    return resource.description;
                }));
                ___v1ew.push('</p>\n<!-- edit description form -->\n<div id="js_rs_details_edit_description"></div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/password/description_sidebar_section*/
define('app/component/password/description_sidebar_section', [
    'exports',
    'passbolt-mad/component/component',
    'app/view/component/password/description_sidebar_section',
    'app/model/permission_type',
    'app/form/resource/edit_description',
    'app/view/template/component/password/description_sidebar_section.ejs!'
], function (exports, _component, _description_sidebar_section, _permission_type, _edit_description, _description_sidebar_section3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _description_sidebar_section2 = _interopRequireDefault(_description_sidebar_section);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _edit_description2 = _interopRequireDefault(_edit_description);
    var _description_sidebar_section4 = _interopRequireDefault(_description_sidebar_section3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DescriptionSidebarSectionComponent = _component2.default.extend('passbolt.component.password.DescriptionSidebarSection', {
        defaults: {
            label: 'Sidebar Section Description Controller',
            viewClass: _description_sidebar_section2.default,
            template: _description_sidebar_section4.default,
            resource: null,
            editDescriptionFormCtrl: null
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            var resource = this.options.resource;
            this.setViewData('resource', resource);
            this.setViewData('editable', resource.Permission.isAllowedTo(_permission_type2.default.UPDATE));
        },
        afterStart: function afterStart() {
            var self = this;
            var resource = this.options.resource;
            var form = new _edit_description2.default($('#js_rs_details_edit_description', this.element), {
                resource: resource,
                state: 'hidden',
                data: { Resource: resource },
                callbacks: {
                    submit: function submit(formData) {
                        var data = {
                            __FILTER_CASE__: 'edit_description',
                            description: formData['passbolt.model.Resource']['description']
                        };
                        self.options.resource.attr(data).save();
                    }
                }
            }).start();
            this.options.editDescriptionFormCtrl = form;
        },
        ' request_resource_description_edit': function request_resource_description_edit(el, ev) {
            if (!this.state.is('edit')) {
                this.setState('edit');
            } else {
                this.setState('ready');
            }
        },
        'stateEdit': function stateEdit(go) {
            if (go) {
                this.options.editDescriptionFormCtrl.setState('ready');
                this.view.showDescription(false);
            } else {
                this.options.editDescriptionFormCtrl.setState('hidden');
                this.options.editDescriptionFormCtrl.reset();
                this.view.showDescription(true);
            }
        }
    });
    exports.default = DescriptionSidebarSectionComponent;
});
/*app/view/component/permission/permissions_sidebar_section*/
define('app/view/component/permission/permissions_sidebar_section', [
    'exports',
    'app/view/component/workspace/sidebar_section'
], function (exports, _sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _sidebar_section2 = _interopRequireDefault(_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PermissionsView = _sidebar_section2.default.extend('passbolt.view.component.permission.Permissions', {}, {
        'a#js_edit_permissions_button click': function aJs_edit_permissions_buttonClick(el, ev) {
            if (this.getController().getViewData('administrable') !== false) {
                this.element.trigger('request_resource_permissions_edit');
            }
        }
    });
    exports.default = PermissionsView;
});
/*app/view/template/component/permission/permissions_sidebar_section.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/permission/permissions_sidebar_section.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_permission_permissions_sidebar_section_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Shared with');
                }));
                ___v1ew.push('</h4>\n');
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    if (administrable) {
                        ___v1ew.push('\n<a class="edit_permissions_button section-action" id="js_edit_permissions_button">\n\t<i class="fa fa-fw fa-edit"></i>\n\t<span class="visuallyhidden">edit</span>\n</a>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n<ul id="js_rs_details_permissions_list" class="shared-with"></ul>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/permission/permission_list_item_2.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/permission/permission_list_item_2.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_permission_permission_list_item_2_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="permission usercard-col-2 ');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="content-wrapper">\n\t\t<div class="content">\n\t\t\t<div class="name">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return mappedItem.acoLabel;
                }));
                ___v1ew.push(' (');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return mappedItem.acoDetails;
                }));
                ___v1ew.push(')</div>\n\t\t\t<div class="subinfo">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return mappedItem.permLabel;
                }));
                ___v1ew.push('</div>\n\t\t</div>\n\t</div>\n\t<div class="avatar">\n\t\t<img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(mappedItem.aroAvatarPath);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t</div>\n</li>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/permission/permissions_sidebar_section*/
define('app/component/permission/permissions_sidebar_section', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/model/permission',
    'app/view/component/permission/permissions_sidebar_section',
    'app/model/permission_type',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/component/tree',
    'app/view/template/component/permission/permissions_sidebar_section.ejs!',
    'app/view/template/component/permission/permission_list_item_2.ejs!'
], function (exports, _component, _bus, _map, _permission, _permissions_sidebar_section, _permission_type, _tree, _tree3, _permissions_sidebar_section3, _permission_list_item_) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _permission2 = _interopRequireDefault(_permission);
    var _permissions_sidebar_section2 = _interopRequireDefault(_permissions_sidebar_section);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _tree2 = _interopRequireDefault(_tree);
    var _tree4 = _interopRequireDefault(_tree3);
    var _permissions_sidebar_section4 = _interopRequireDefault(_permissions_sidebar_section3);
    var _permission_list_item_2 = _interopRequireDefault(_permission_list_item_);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PermissionsSidebarSectionComponent = _component2.default.extend('passbolt.component.permission.PermissionsSidebarSection', {
        defaults: {
            label: 'Sidebar Section Permissions Component',
            viewClass: _permissions_sidebar_section2.default,
            template: _permissions_sidebar_section4.default,
            acoInstance: null,
            state: 'loading'
        }
    }, {
        permissionsList: null,
        afterStart: function afterStart() {
            this._initPermissionsList();
            this._loadPermissions();
            this._super();
        },
        _initPermissionsList: function _initPermissionsList() {
            var map = this._getPermissionsListMap();
            var component = new _tree2.default($('#js_rs_details_permissions_list'), {
                cssClasses: [
                    'permissions',
                    'shared-with'
                ],
                viewClass: _tree4.default,
                itemClass: _permission2.default,
                itemTemplate: _permission_list_item_2.default,
                map: map
            });
            component.start();
            this.permissionsList = component;
        },
        _getPermissionsListMap: function _getPermissionsListMap() {
            return new _map2.default({
                id: 'id',
                aroLabel: {
                    key: 'aro',
                    func: function func(aro, map, obj) {
                        return aro.toLowerCase();
                    }
                },
                aroAvatarPath: {
                    key: 'id',
                    func: function func(user, map, obj) {
                        if (obj.aro == 'User') {
                            return obj.User.Profile.avatarPath('small');
                        } else if (obj.aro == 'Group') {
                            return 'img/avatar/group_default.png';
                        }
                    }
                },
                permLabel: {
                    key: 'type',
                    func: function func(type, map, obj) {
                        return _permission_type2.default.formatToString(type);
                    }
                },
                acoLabel: {
                    key: 'aco_foreign_key',
                    func: function func(aco_foreign_key, map, obj) {
                        if (obj.aro == 'User') {
                            return obj.User.Profile.fullName();
                        } else if (obj.aro == 'Group') {
                            return obj.Group.name;
                        }
                    }
                },
                acoDetails: {
                    key: 'aco_foreign_key',
                    func: function func(aco_foreign_key, map, obj) {
                        if (obj.aro == 'User') {
                            return obj.User.username;
                        } else if (obj.aro == 'Group') {
                            return __('group');
                        }
                    }
                }
            });
        },
        beforeRender: function beforeRender() {
            this._super();
            var administrable = this.options.acoInstance.Permission.isAllowedTo(_permission_type2.default.ADMIN);
            this.setViewData('administrable', administrable);
        },
        _loadPermissions: function _loadPermissions() {
            var self = this, aco_name = this.options.acoInstance.constructor.shortName, aco_foreign_key = this.options.acoInstance.id;
            this.setState('loading');
            this.permissionsList.reset();
            return _permission2.default.findAll({
                aco: aco_name,
                aco_foreign_key: aco_foreign_key,
                contain: {
                    group: 1,
                    user: 1,
                    'user.profile': 1
                }
            }).then(function (permissions, response, request) {
                self.permissionsList.load(permissions);
                self.setState('ready');
            });
        },
        ' request_resource_permissions_edit': function request_resource_permissions_edit(el, ev) {
            _bus2.default.trigger('request_resource_sharing', this.options.acoInstance);
        }
    });
    exports.default = PermissionsSidebarSectionComponent;
});
/*app/view/component/password/workspace_secondary_sidebar*/
define('app/view/component/password/workspace_secondary_sidebar', [
    'exports',
    'app/view/component/workspace/sidebar'
], function (exports, _sidebar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _sidebar2 = _interopRequireDefault(_sidebar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceSecondarySidebarView = _sidebar2.default.extend('passbolt.view.component.password.WorkspaceSecondarySidebar', {}, {
        'h2 click': function h2Click(el, ev) {
            el.next('p').toggle();
        },
        'li.password .secret-copy > a click': function liPasswordSecretCopyAClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            this.element.trigger('password_clicked', [ev]);
        }
    });
    exports.default = WorkspaceSecondarySidebarView;
});
/*app/view/template/component/password/workspace_secondary_sidebar.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/workspace_secondary_sidebar.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_workspace_secondary_sidebar_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="sidebar resource">\n\t<h3>');
                ___v1ew.push(can.view.txt(1, 'h3', 0, this, function () {
                    return resource.name;
                }));
                ___v1ew.push('</h3>\n\t<a class="js_sidebar_close dialog-close">\n\t\t<i class="fa fa-close"></i>\n\t\t<span class="visuallyhidden">close</span>\n\t</a>\n\t<div class="detailed-information">\n\t<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Information');
                }));
                ___v1ew.push('</h4>\n\t<ul>\n\t\t<li class="username">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Username');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return resource.username;
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t\t<li class="password">\n\t\t\t<div class="label">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return __('Password');
                }));
                ___v1ew.push('</div>\n\t\t\t<div class="value">\n\t\t\t\t<div class="secret-copy">\n\t\t\t\t\t<a id="sidebar_secret_copy_');
                ___v1ew.push(can.view.txt(true, 'a', 'id', this, function () {
                    return resource.id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t\t\t\t\t\t<span>copy password to clipboard</span>\n\t\t\t\t\t</a>\n\t\t\t\t\t<pre>');
                ___v1ew.push(can.view.txt(1, 'pre', 0, this, function () {
                    return resource.Secret[0].data;
                }));
                ___v1ew.push('</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>\n\t\t<li class="uri">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('URL');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">\n\t\t\t\t<a href="');
                ___v1ew.push(can.view.txt(true, 'a', 'href', this, function () {
                    return resource.safeUri();
                }));
                ___v1ew.push('" target="_blank" rel="noopener"', can.view.pending({ scope: this }), '>');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return resource.uri;
                }));
                ___v1ew.push('</a>\n\t\t\t</span>\n\t\t</li>\n\t\t<li class="created">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Created');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return datetimeGetTimeAgo(resource._data.created);
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t\t<li class="created-by">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Created by');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return resource.Creator.username;
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t\t<li class="modified">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Last modified');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return datetimeGetTimeAgo(resource.modified);
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t\t<li class="modified-by">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Modified by');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return resource.Modifier.username;
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t</ul>\n\t</div>\n\t<!-- Description management -->\n\t<div class="description" id="js_rs_details_description"></div>\n\t<!-- Permissions management -->\n\t<div class="permissions" id="js_rs_details_permissions"></div>\n\t<!-- Comments management -->\n\t<div class="comments clearfix" id="js_rs_details_comments"></div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/password/workspace_password_sidebar*/
define('app/component/password/workspace_password_sidebar', [
    'exports',
    'app/component/comment/comments_sidebar_section',
    'app/component/password/description_sidebar_section',
    'passbolt-mad/control/bus',
    'app/component/permission/permissions_sidebar_section',
    'app/component/workspace/sidebar',
    'app/view/component/password/workspace_secondary_sidebar',
    'app/view/template/component/password/workspace_secondary_sidebar.ejs!'
], function (exports, _comments_sidebar_section, _description_sidebar_section, _bus, _permissions_sidebar_section, _sidebar, _workspace_secondary_sidebar, _workspace_secondary_sidebar3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _comments_sidebar_section2 = _interopRequireDefault(_comments_sidebar_section);
    var _description_sidebar_section2 = _interopRequireDefault(_description_sidebar_section);
    var _bus2 = _interopRequireDefault(_bus);
    var _permissions_sidebar_section2 = _interopRequireDefault(_permissions_sidebar_section);
    var _sidebar2 = _interopRequireDefault(_sidebar);
    var _workspace_secondary_sidebar2 = _interopRequireDefault(_workspace_secondary_sidebar);
    var _workspace_secondary_sidebar4 = _interopRequireDefault(_workspace_secondary_sidebar3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspacePasswordSidebarComponent = _sidebar2.default.extend('passbolt.component.password.WorkspacePasswordSidebar', {
        defaults: {
            label: 'Resource Details',
            viewClass: _workspace_secondary_sidebar2.default,
            template: _workspace_secondary_sidebar4.default
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            if (this.options.selectedItem != null) {
                this.setViewData('resource', this.options.selectedItem);
            }
        },
        afterStart: function afterStart() {
            this._initDescriptionSection();
            this._initPermissionsSection();
            this._initCommentsSection();
            this._super();
        },
        _initDescriptionSection: function _initDescriptionSection() {
            var descriptionComponent = new _description_sidebar_section2.default($('#js_rs_details_description', this.element), { resource: this.options.selectedItem });
            descriptionComponent.start();
        },
        _initPermissionsSection: function _initPermissionsSection() {
            var permissionsComponent = new _permissions_sidebar_section2.default($('#js_rs_details_permissions', this.element), { acoInstance: this.options.selectedItem });
            permissionsComponent.start();
        },
        _initCommentsSection: function _initCommentsSection() {
            var commentsComponent = new _comments_sidebar_section2.default($('#js_rs_details_comments', this.element), {
                resource: this.options.selectedItem,
                foreignModel: 'Resource',
                foreignKey: this.options.selectedItem.id
            });
            commentsComponent.start();
        },
        ' password_clicked': function password_clicked(el, ev) {
            var secret = this.options.selectedItem.Secret[0].data;
            _bus2.default.trigger('passbolt.secret.decrypt', secret);
        }
    });
    exports.default = WorkspacePasswordSidebarComponent;
});
/*app/component/password/workspace_shortcuts_filter*/
define('app/component/password/workspace_shortcuts_filter', [
    'exports',
    'passbolt-mad/model/action',
    'app/model/filter',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu'
], function (exports, _action, _filter, _bus, _menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _filter2 = _interopRequireDefault(_filter);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceShortcutsFilter = _menu2.default.extend('passbolt.component.password.WorkspaceShortcutsFilter', { defaults: { allFilter: null } }, {
        afterStart: function afterStart() {
            var allItem = new _action2.default({
                id: 'js_pwd_wsp_filter_all',
                label: __('All items'),
                filter: this.options.allFilter
            });
            this.insertItem(allItem);
            this.selectItem(allItem);
            var favoriteItem = new _action2.default({
                id: 'js_pwd_wsp_filter_favorite',
                label: __('Favorite'),
                filter: new _filter2.default({
                    id: 'workspace_filter_favorite',
                    label: __('Favorite'),
                    rules: { 'is-favorite': true },
                    order: ['Resource.modified DESC']
                })
            });
            this.insertItem(favoriteItem);
            var modifiedItem = new _action2.default({
                id: 'js_pwd_wsp_filter_modified',
                label: __('Recently modified'),
                filter: new _filter2.default({
                    id: 'workspace_filter_modified',
                    label: __('Recently modified'),
                    order: ['Resource.modified DESC']
                })
            });
            this.insertItem(modifiedItem);
            var sharedItem = new _action2.default({
                id: 'js_pwd_wsp_filter_share',
                label: __('Shared with me'),
                filter: new _filter2.default({
                    id: 'workspace_filter_shared',
                    label: __('Shared with me'),
                    rules: { 'is-shared-with-me': true },
                    order: ['Resource.modified DESC']
                })
            });
            this.insertItem(sharedItem);
            var ownItem = new _action2.default({
                id: 'js_pwd_wsp_filter_own',
                label: __('Items I own'),
                filter: new _filter2.default({
                    id: 'workspace_filter_own',
                    label: __('Items I own'),
                    rules: { 'is-owned-by-me': true },
                    order: ['Resource.modified DESC']
                })
            });
            this.insertItem(ownItem);
        },
        ' item_selected': function item_selected(el, ev, item) {
            this._super(el, ev, item);
            if (!item.state.is('disabled')) {
                _bus2.default.trigger('filter_workspace', item.filter);
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(element, evt, filter) {
            var self = this;
            this.unselectAll();
            this.options.items.each(function (item) {
                if (item.filter.id == filter.id) {
                    self.selectItem(item);
                }
            });
        }
    });
    exports.default = WorkspaceShortcutsFilter;
});
/*app/view/template/component/password/workspace.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/password/workspace.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_workspace_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="js_workspace">\n\t<div class="panel left">\n\t\t<div class="navigation first shortcuts">\n\t\t\t<ul id="js_wsp_pwd_filter_shortcuts" class="clearfix">\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class="navigation flat tree categories" id="js_wsp_pwd_password_categories"></div>\n\t</div>\n\t<div class="panel middle">\n        <div id="js_wsp_password_breadcrumb" class="breadcrumbs">\n        </div>\n        <div id="js_wsp_pwd_browser" class="tableview">\n        </div>\n\t</div>\n\t<div id="js_pwd_details" class="panel aside js_wsp_pwd_sidebar_second" ');
                ___v1ew.push(can.view.txt(2, 'div', 'style', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('style="');
                    ___v1ew.push('display: none;"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('>\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/password/workspace*/
define('app/component/password/workspace', [
    'exports',
    'app/component/password/actions_tab',
    'app/component/password/workspace_breadcrumb',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/confirm',
    'passbolt-mad/component/dialog',
    'app/component/password/workspace_filters_tab',
    'app/component/password/grid',
    'passbolt-mad/control/bus',
    'app/component/password/workspace_primary_menu',
    'app/form/resource/create',
    'app/component/workspace/secondary_menu',
    'app/component/password/workspace_password_sidebar',
    'app/component/password/workspace_shortcuts_filter',
    'app/model/favorite',
    'app/model/filter',
    'app/model/resource',
    'app/view/template/component/workspace/create_button.ejs!',
    'app/view/template/component/user/delete_confirm.ejs!',
    'app/view/template/component/password/workspace.ejs!'
], function (exports, _actions_tab, _workspace_breadcrumb, _button, _component, _component3, _confirm, _dialog, _workspace_filters_tab, _grid, _bus, _workspace_primary_menu, _create, _secondary_menu, _workspace_password_sidebar, _workspace_shortcuts_filter, _favorite, _filter, _resource, _create_button, _delete_confirm, _workspace) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _actions_tab2 = _interopRequireDefault(_actions_tab);
    var _workspace_breadcrumb2 = _interopRequireDefault(_workspace_breadcrumb);
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _confirm2 = _interopRequireDefault(_confirm);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _workspace_filters_tab2 = _interopRequireDefault(_workspace_filters_tab);
    var _grid2 = _interopRequireDefault(_grid);
    var _bus2 = _interopRequireDefault(_bus);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    var _create2 = _interopRequireDefault(_create);
    var _secondary_menu2 = _interopRequireDefault(_secondary_menu);
    var _workspace_password_sidebar2 = _interopRequireDefault(_workspace_password_sidebar);
    var _workspace_shortcuts_filter2 = _interopRequireDefault(_workspace_shortcuts_filter);
    var _favorite2 = _interopRequireDefault(_favorite);
    var _filter2 = _interopRequireDefault(_filter);
    var _resource2 = _interopRequireDefault(_resource);
    var _create_button2 = _interopRequireDefault(_create_button);
    var _delete_confirm2 = _interopRequireDefault(_delete_confirm);
    var _workspace2 = _interopRequireDefault(_workspace);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordWorkspaceComponent = _component2.default.extend('passbolt.component.password.Workspace', {
        defaults: {
            name: 'password_workspace',
            template: _workspace2.default,
            selectedRs: new can.Model.List(),
            selectedGroups: new can.Model.List(),
            filter: null,
            silentLoading: false
        },
        getDefaultFilterSettings: function getDefaultFilterSettings() {
            return new _filter2.default({
                id: 'default',
                label: __('All items'),
                order: ['Resource.modified DESC']
            });
        }
    }, {
        afterStart: function afterStart() {
            this._initPrimaryMenu();
            this._initSecondaryMenu();
            this.options.mainButton = this._initMainActionButton();
            this._initBreadcrumb();
            this._initShortcutsFilter();
            this._initFiltersTab();
            this._initGrid();
            this._initSecondarySidebar();
            var filter = this.constructor.getDefaultFilterSettings();
            _bus2.default.trigger('filter_workspace', filter);
            this.on();
        },
        destroy: function destroy() {
            $('#js_wsp_primary_menu_wrapper').empty();
            $('#js_wsp_secondary_menu_wrapper').empty();
            $('.main-action-wrapper').empty();
            this.options.selectedRs.splice(0, this.options.selectedRs.length);
            this._super();
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var menu = _component4.default.create($('#js_wsp_primary_menu_wrapper'), 'last', _workspace_primary_menu2.default, { selectedRs: this.options.selectedRs });
            menu.start();
        },
        _initSecondaryMenu: function _initSecondaryMenu() {
            var menu = _component4.default.create($('#js_wsp_secondary_menu_wrapper'), 'last', _secondary_menu2.default, { selectedItems: this.options.selectedRs });
            menu.start();
        },
        _initMainActionButton: function _initMainActionButton() {
            var button = _component4.default.create($('.main-action-wrapper'), 'last', _button2.default, {
                id: 'js_wsp_create_button',
                template: _create_button2.default,
                tag: 'button',
                cssClasses: [
                    'button',
                    'primary'
                ]
            });
            button.start();
            return button;
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var component = new _workspace_breadcrumb2.default($('#js_wsp_password_breadcrumb'), { rootFilter: PasswordWorkspaceComponent.getDefaultFilterSettings() });
            component.start();
        },
        _initShortcutsFilter: function _initShortcutsFilter() {
            var component = new _workspace_shortcuts_filter2.default('#js_wsp_pwd_filter_shortcuts', { allFilter: PasswordWorkspaceComponent.getDefaultFilterSettings() });
            component.start();
        },
        _initFiltersTab: function _initFiltersTab() {
            var component = new _workspace_filters_tab2.default('#js_wsp_pwd_password_categories', { selectedGroups: this.options.selectedGroups });
            component.start();
        },
        _initGrid: function _initGrid() {
            var component = new _grid2.default('#js_wsp_pwd_browser', { selectedRs: this.options.selectedRs });
            component.start();
        },
        _initSecondarySidebar: function _initSecondarySidebar() {
            new _workspace_password_sidebar2.default($('.js_wsp_pwd_sidebar_second', this.element), { selectedItems: this.options.selectedRs });
        },
        openCreateResourceDialog: function openCreateResourceDialog(resource) {
            var self = this;
            var dialog = new _dialog2.default(null, {
                label: __('Create Password'),
                cssClasses: [
                    'create-password-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var form = dialog.add(_create2.default, {
                data: resource,
                callbacks: {
                    submit: function submit(data) {
                        resource.attr(data['passbolt.model.Resource']);
                        self._saveResource(resource, form, dialog);
                    }
                }
            });
            form.load(resource);
        },
        _saveResource: function _saveResource(resource, form, dialog) {
            resource.save().then(function () {
                dialog.remove();
            }, function (v) {
                form.showErrors(JSON.parse(v.responseText)['body']);
            });
        },
        openEditResourceDialog: function openEditResourceDialog(resource) {
            var dialog = new _dialog2.default(null, {
                label: __('Edit Password'),
                cssClasses: [
                    'edit-password-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var tab = dialog.add(_actions_tab2.default, {
                resource: resource,
                dialog: dialog
            });
            tab.enableTab('js_rs_edit');
        },
        openShareResourceDialog: function openShareResourceDialog(resource) {
            var dialog = new _dialog2.default(null, {
                label: __('Share Password'),
                cssClasses: [
                    'share-password-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var tab = dialog.add(_actions_tab2.default, {
                resource: resource,
                dialog: dialog
            });
            tab.enableTab('js_rs_permission');
        },
        deleteResource: function deleteResource(resource) {
            var dialog = new _confirm2.default(null, {
                label: __('Do you really want to delete?'),
                content: _delete_confirm2.default,
                submitButton: {
                    label: __('delete password'),
                    cssClasses: ['warning']
                },
                action: function action() {
                    resource.destroy();
                }
            });
            dialog.start();
        },
        favoriteResource: function favoriteResource(resource) {
            var data = {
                foreign_model: 'resource',
                foreign_key: resource.id
            };
            var favorite = new _favorite2.default(data);
            favorite.save().then(function (favorite) {
                resource.Favorite = favorite;
                can.trigger(_resource2.default, 'updated', resource);
            });
        },
        unfavoriteResource: function unfavoriteResource(resource) {
            resource.Favorite.destroy().then(function () {
                resource.Favorite = null;
                can.trigger(_resource2.default, 'updated', resource);
            });
        },
        '{mainButton.element} click': function mainButtonElementClick(el, ev) {
            _bus2.default.trigger('request_resource_creation');
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(element, evt, filter) {
            this.options.selectedRs.splice(0, this.options.selectedRs.length);
            this.options.mainButton.setState('ready');
        },
        '{mad.bus.element} request_resource_creation': function madBusElementRequest_resource_creation(el, ev) {
            var resource = new _resource2.default();
            this.openCreateResourceDialog(resource);
        },
        '{mad.bus.element} request_resource_edition': function madBusElementRequest_resource_edition(el, ev, resource) {
            this.openEditResourceDialog(resource);
        },
        '{mad.bus.element} request_resource_deletion': function madBusElementRequest_resource_deletion(el, ev, resource) {
            this.deleteResource(resource);
        },
        '{mad.bus.element} request_resource_sharing': function madBusElementRequest_resource_sharing(el, ev, resource) {
            this.openShareResourceDialog(resource);
        },
        '{mad.bus.element} request_favorite': function madBusElementRequest_favorite(el, ev, resource) {
            this.favoriteResource(resource);
        },
        '{mad.bus.element} request_unfavorite': function madBusElementRequest_unfavorite(el, ev, resource) {
            this.unfavoriteResource(resource);
        }
    });
    exports.default = PasswordWorkspaceComponent;
});
/*app/view/template/component/profile/header_dropdown.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/component/profile/header_dropdown.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_profile_header_dropdown_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="center-cell-wrapper">\n    <div class="details center-cell">\n        <span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push('</span>\n        <span class="email">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.username;
                }));
                ___v1ew.push('</span>\n    </div>\n</div>\n<div class="picture left-cell">\n    <img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(user['Profile'].avatarPath('small'));
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="your picture"', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n</div>\n<div class="more right-cell">\n    <a><span>more</span></a>\n</div>\n<ul class="dropdown-content right">\n</ul>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/profile/header_dropdown*/
define('app/component/profile/header_dropdown', [
    'exports',
    'passbolt-mad/model/action',
    'passbolt-mad/component/button_dropdown',
    'passbolt-mad/control/bus',
    'app/model/user',
    'app/view/template/component/profile/header_dropdown.ejs!'
], function (exports, _action, _button_dropdown, _bus, _user, _header_dropdown) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _button_dropdown2 = _interopRequireDefault(_button_dropdown);
    var _bus2 = _interopRequireDefault(_bus);
    var _user2 = _interopRequireDefault(_user);
    var _header_dropdown2 = _interopRequireDefault(_header_dropdown);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var HeaderProfileDropdownComponent = _button_dropdown2.default.extend('passbolt.component.ProfileDropdown', {
        defaults: {
            label: null,
            cssClasses: [],
            template: _header_dropdown2.default,
            contentElement: '#js_app_profile_dropdown .dropdown-content',
            user: null
        }
    }, {
        beforeStart: function beforeStart() {
            this.options.user = _user2.default.getCurrent();
        },
        afterStart: function afterStart() {
            var _this = this;
            this._super();
            var menu = this.options.menu;
            var profileItem = new _action2.default({
                id: uuid(),
                label: __('my profile'),
                action: function action() {
                    return _this._goToUserProfile();
                }
            });
            menu.insertItem(profileItem);
            var keysItem = new _action2.default({
                id: uuid(),
                label: __('manage your keys'),
                action: function action() {
                    return _this._goToManageYourKeys();
                }
            });
            menu.insertItem(keysItem);
            var logoutItem = new _action2.default({
                id: uuid(),
                label: __('logout'),
                action: function action() {
                    return _this._logout();
                }
            });
            menu.insertItem(logoutItem);
        },
        _goToUserProfile: function _goToUserProfile() {
            _bus2.default.trigger('request_workspace', 'settings');
            _bus2.default.trigger('request_settings_section', 'profile');
            this.view.close();
        },
        _goToManageYourKeys: function _goToManageYourKeys() {
            _bus2.default.trigger('request_workspace', 'settings');
            _bus2.default.trigger('request_settings_section', 'keys');
            this.view.close();
        },
        _logout: function _logout() {
            document.location.href = APP_URL + '/auth/logout';
        },
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('user', this.options.user);
        },
        '{user} updated': function userUpdated(user) {
            if (!this.state.is('disabled') && !this.state.is(null)) {
                this.refresh();
            }
        }
    });
    exports.default = HeaderProfileDropdownComponent;
});
/*app/view/template/app.ejs!passbolt-mad/lib/can/viewEjsSystem*/
define('app/view/template/app.ejs!passbolt-mad/lib/can/viewEjsSystem', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_app_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<!-- app/view/template/app.ejs -->\n<div id="js_app_loading_bar" class="update-loading-bar">\n\t<div class="progress-bar">\n\t\t<span ');
                ___v1ew.push(can.view.txt(2, 'span', 'style', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('style="');
                    ___v1ew.push('width:0%"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('></span>\n\t</div>\n</div>\n<div class="notification-container">\n    <div id="js_app_notificator" class="notification col2_3 push_1">\n    </div>\n</div>\n<div class="header first">\n    <nav>\n        <div class="primary navigation top">\n            <ul id="js_app_navigation_left" class="left">\n            </ul>\n            <ul id="js_app_navigation_right" class="right">\n            </ul>\n        </div>\n    </nav>\n</div>\n<div class="header second">\n    <div class="col1">\n        <div class="logo no-img">\n\t\t\t\t\t<h1><span>Passbolt</span></h1>\n        </div>\n    </div>\n    <div class="col2 search-wrapper">\n        <div id="js_app_filter">\n        </div>\n    </div>\n    <div class="col3 profile-wrapper">\n        <div id="js_app_profile_dropdown" class="user profile dropdown">\n        </div>\n    </div>\n</div>\n<div class="header third">\n    <div class="col1 main-action-wrapper">\n    </div>\n\t<div class="col2_3 actions-wrapper">\n\t\t<div id="js_wsp_primary_menu_wrapper" class="actions">\n\t\t</div>\n\t\t<div id="js_wsp_secondary_menu_wrapper" class="actions secondary">\n\t\t</div>\n\t</div>\n</div>\n<div id="js_app_panel_main" class="panel main">\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/app*/
define('app/component/app', [
    'exports',
    'passbolt-mad/net/ajax',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/config/config',
    'passbolt-mad/component/contextual_menu',
    'passbolt-mad/component/dialog',
    'app/component/navigation/filter',
    'app/component/footer/loading_bar',
    'passbolt-mad/control/bus',
    'app/component/navigation/left',
    'app/component/navigation/right',
    'app/component/footer/notification',
    'app/component/password/workspace',
    'app/component/profile/header_dropdown',
    'app/component/settings/workspace',
    'app/model/user',
    'app/component/user/workspace',
    'app/view/template/app.ejs!'
], function (exports, _ajax, _component, _component3, _config, _contextual_menu, _dialog, _filter, _loading_bar, _bus, _left, _right, _notification, _workspace, _header_dropdown, _workspace3, _user, _workspace5, _app) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _config2 = _interopRequireDefault(_config);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _filter2 = _interopRequireDefault(_filter);
    var _loading_bar2 = _interopRequireDefault(_loading_bar);
    var _bus2 = _interopRequireDefault(_bus);
    var _left2 = _interopRequireDefault(_left);
    var _right2 = _interopRequireDefault(_right);
    var _notification2 = _interopRequireDefault(_notification);
    var _workspace2 = _interopRequireDefault(_workspace);
    var _header_dropdown2 = _interopRequireDefault(_header_dropdown);
    var _workspace4 = _interopRequireDefault(_workspace3);
    var _user2 = _interopRequireDefault(_user);
    var _workspace6 = _interopRequireDefault(_workspace5);
    var _app2 = _interopRequireDefault(_app);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var App = _component2.default.extend('passbolt.component.App', { defaults: { template: _app2.default } }, {
        workspace: null,
        beforeStart: function beforeStart() {
            this._loadCurrentUser();
        },
        _loadCurrentUser: function _loadCurrentUser() {
            return _user2.default.findOne({
                id: _config2.default.read('user.id'),
                async: false
            }).then(function (user) {
                _user2.default.setCurrent(user);
            });
        },
        afterStart: function afterStart() {
            this._initHeader();
            this._initFooter();
            this._initSessionLookup();
        },
        _initHeader: function _initHeader() {
            var navigationLeftComponent = new _left2.default($('#js_app_navigation_left'));
            navigationLeftComponent.start();
            var navigationRightComponent = new _right2.default($('#js_app_navigation_right'));
            navigationRightComponent.start();
            var filterComponent = new _filter2.default($('#js_app_filter'), {});
            filterComponent.start();
            var profileHederDropdownComponent = new _header_dropdown2.default($('#js_app_profile_dropdown'), { user: _user2.default.getCurrent() });
            profileHederDropdownComponent.start();
        },
        _initFooter: function _initFooter() {
            var notificationComponent = new _notification2.default($('#js_app_notificator'));
            var loadingBarComponent = new _loading_bar2.default($('#js_app_loading_bar'));
            loadingBarComponent.start();
        },
        _initSessionLookup: function _initSessionLookup() {
            setTimeout(function () {
                var interval = setInterval(function () {
                    _ajax2.default.request({
                        url: APP_URL + 'auth/checkSession.json',
                        type: 'GET'
                    }).fail(function () {
                        clearInterval(interval);
                    });
                }, _config2.default.read('session.checkTimeInterval'));
            }, _config2.default.read('session.checkTimeInterval'));
        },
        _initWorkspace: function _initWorkspace(name, options) {
            var workspaceOptions = {
                id: 'js_passbolt_' + name + '_workspace_controller',
                label: name
            };
            $.extend(workspaceOptions, options);
            this._destroyWorkspace();
            this.workspace = _component4.default.create($('#js_app_panel_main'), 'last', this._getWorkspaceClassByName(name), workspaceOptions);
            this.workspace.start();
            $('#container').addClass('page ' + name);
            _bus2.default.trigger('workspace_enabled', this.workspace);
        },
        _getWorkspaceClassByName: function _getWorkspaceClassByName(name) {
            var WorkspaceClass = null;
            switch (name) {
            case 'password':
                WorkspaceClass = _workspace2.default;
                break;
            case 'settings':
                WorkspaceClass = _workspace4.default;
                break;
            case 'user':
                WorkspaceClass = _workspace6.default;
                break;
            }
            return WorkspaceClass;
        },
        _destroyWorkspace: function _destroyWorkspace() {
            if (this.workspace != null) {
                $('#container').removeClass();
                this.workspace.destroy();
                $('#js_app_panel_main').empty();
                _contextual_menu2.default.remove();
            }
        },
        '{mad.bus.element} request_workspace': function madBusElementRequest_workspace(el, event, workspaceName, options) {
            options = options || {};
            this._initWorkspace(workspaceName, options);
        },
        '{mad.bus.element} request_dialog': function madBusElementRequest_dialog(el, ev, options) {
            var options = options || {};
            new _dialog2.default(null, options).start();
        },
        '{mad.bus.element} remove_all_focuses': function madBusElementRemove_all_focuses(el, ev, options) {
            var $focused = $(':focus');
            $focused.blur();
        },
        '{mad.bus.element} passbolt_application_loading_completed': function madBusElementPassbolt_application_loading_completed(el, ev, options) {
            if (!$('html').hasClass('loaded')) {
                $('html').removeClass('loading').addClass('loaded');
            }
        },
        '{mad.bus.element} passbolt_application_loading': function madBusElementPassbolt_application_loading(el, ev, options) {
            if (!$('html').hasClass('loading')) {
                $('html').removeClass('loaded').addClass('loading');
            }
        },
        '{mad.bus.element} request_dialog_close_latest': function madBusElementRequest_dialog_close_latest(el, ev, options) {
            _dialog2.default.closeLatest();
        },
        '{window} p3_narrow_checked': function windowP3_narrow_checked(el, ev) {
            _bus2.default.trigger('passbolt.html_helper.window_resized');
        },
        stateLoading: function stateLoading(go) {
            if (this.view) {
                this.view.loading(go);
            }
        },
        stateReady: function stateReady(go) {
            _bus2.default.trigger('request_workspace', 'password');
            $('html').removeClass('launching');
        }
    });
    exports.default = App;
});
/*app/bootstrap*/
define('app/bootstrap', [
    'exports',
    'moment',
    'passbolt-mad/bootstrap',
    'app/error/error_handler',
    'app/net/response_handler',
    'app/component/app',
    'app/util/common',
    'moment-timezone-with-data'
], function (exports, _moment, _bootstrap, _error_handler, _response_handler, _app, _common) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _moment2 = _interopRequireDefault(_moment);
    var _bootstrap2 = _interopRequireDefault(_bootstrap);
    var _error_handler2 = _interopRequireDefault(_error_handler);
    var _response_handler2 = _interopRequireDefault(_response_handler);
    var _app2 = _interopRequireDefault(_app);
    var _common2 = _interopRequireDefault(_common);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var AppBootstrap = _bootstrap2.default.extend('passbolt.Bootstrap', {}, {
        init: function init(options) {
            this._super(options);
            this.loadViewHelpers();
        },
        loadViewHelpers: function loadViewHelpers() {
            can.ejs.Helpers.prototype.moment = _moment2.default;
            can.ejs.Helpers.prototype.datetimeToJSDate = _common2.default.datetimeToJSDate;
            can.ejs.Helpers.prototype.datetimeGetTimeAgo = _common2.default.datetimeGetTimeAgo;
        }
    });
    exports.default = AppBootstrap;
});
/*lib/p3_narrow/p3.narrow*/
define('lib/p3_narrow/p3.narrow', [
    'module',
    '@loader',
    'require'
], function (module, loader, require) {
    loader.get('@@global-helpers').prepareGlobal({
        require: require,
        name: module.id,
        deps: []
    });
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**!\n * Adds classes to an element (body by default) based on document width\n *\n * @copyright       Copyright 2013, Greenpeace International\n * @license         MIT License (opensource.org/licenses/MIT)\n * @version         0.0.2\n * @author          <a href="mailto:hello@raywalker.it">Ray Walker</a>,\n *                  based on original work by\n *                  <a href="http://www.more-onion.com/">More Onion</a>\n * @requires        <a href="http://jquery.com/">jQuery 1.1.4+</a>\n * @example         $.p3.narrow([options]);\n */\n/* global jQuery */\n\n(function($, w, d) {\n\t\'use strict\';\n\n\tvar _p3 = $.p3 || {},\n\t\tdefaults = {\n\t\t\t/* Selector or object to which the classes are added */\n\t\t\tel: \'body\',\n\t\t\t/* Class names and their breakpoints */\n\t\t\tsizes: {\n\t\t\t\tthreetwo:   320,\n\t\t\t\tfour:       400,\n\t\t\t\tfive:       500,\n\t\t\t\tsix:        600,\n\t\t\t\tsixfive:    650,\n\t\t\t\tseven:      700,\n\t\t\t\tsevensome:  768,\n\t\t\t\teightfive:  850,\n\t\t\t\tnine:       900,\n\t\t\t\ttablet:     480,\n\t\t\t\tdesktop:    1024,\n\t\t\t\twide:       1350,\n\t\t\t\tlarge:      1600\n\t\t\t},\n\t\t\t// Apply changes on resize\n\t\t\tonResize: true,\n\t\t\t// Apply changes on initialisation\n\t\t\tonLoad: true,\n\t\t\t// Throttle resize event timer in milliseconds\n\t\t\tdelay: 100\n\t\t};\n\n\t_p3.narrow = function(options) {\n\t\tvar config = $.extend(true, defaults, options || {}),\n\t\t\t$window = $(w),\n\t\t\t$el = $(config.el),\n\t\t\twait = false;\n\n\t\t/**\n\t\t * Returns the size of the document plus scrollbars\n\t\t * @returns {int}\n\t\t */\n\t\tfunction getWidth() {\n\t\t\tif (typeof w.innerWidth === \'number\') {\n\t\t\t\t// Non-IE\n\t\t\t\treturn w.innerWidth;\n\t\t\t} else if (d.documentElement && d.documentElement.clientWidth) {\n\t\t\t\t// IE 6+ in \'standards compliant mode\'\n\t\t\t\treturn d.documentElement.clientWidth;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Assigns classes to the target element\n\t\t */\n\t\tfunction checkNarrow() {\n\t\t\tvar classString = \'\',\n\t\t\t\twidth = getWidth();\n\n\t\t\t// For each configured breakpoint\n\t\t\t$.each(config.sizes, function(cls, size) {\n\t\t\t\t// If the document is larger or equal to this size\n\t\t\t\tif (width >= size) {\n\t\t\t\t\t// Add this classname to the element\n\t\t\t\t\tclassString += \' \' + cls;\n\t\t\t\t} else {\n\t\t\t\t\t// Remove this class\n\t\t\t\t\t$el.removeClass(cls);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Apply new classes\n\t\t\t$el.addClass(classString);\n\n\t\t\t// Propagate an event while the class has been added.\n\t\t\t$(window).trigger(\'p3_narrow_checked\');\n\t\t}\n\n\t\t/**\n\t\t * Executes callback no more than once per interval\n\t\t *\n\t\t * @param {function}    callback\n\t\t * @param {int}         interval\n\t\t * @returns {undefined}\n\t\t */\n\t\tfunction throttle(callback, interval) {\n\t\t\tif (wait) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twait = true;\n\n\t\t\tsetTimeout(function() {\n\t\t\t\twait = false;\n\t\t\t}, interval);\n\n\t\t\tcallback();\n\t\t}\n\n\t\tif (config.onResize) {\n\t\t\t$window.resize(function() {\n\t\t\t\tthrottle(checkNarrow, config.delay);\n\t\t\t});\n\t\t}\n\n\t\tif (config.onLoad) {\n\t\t\t$window.ready(checkNarrow);\n\t\t}\n\t};\n\n\t$.p3 = _p3;\n\n}(jQuery, this, document));\n';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*app/config/notification.json*/
define('app/config/notification.json', [], function () {
    return {
        'notification': {
            'timeout': 10000,
            'displaySeverity': [
                'success',
                'error'
            ],
            'messages': {
                'app_resources_index_success': {
                    'msg': 'The passwords have been loaded',
                    'severity': 'notice'
                },
                'app_resources_add_success': { 'msg': 'The password %body.Resource.name% has been created' },
                'app_resources_delete_success': { 'msg': 'The password has been deleted' },
                'app_resources_update_success': { 'msg': 'The password %body.Resource.name% has been updated successfully' },
                'app_users_addPost_success': { 'msg': 'The user %body.User.username% has been added successfully' },
                'app_users_delete_success': { 'msg': 'The user has been deleted' },
                'app_users_editPost_success': { 'msg': 'The user %body.User.username% has been updated successfully' },
                'app_users_editavatar_success': { 'msg': 'The picture for user %body.User.username% has been updated successfully' },
                'app_users_editavatar_error': { 'msg': '%header.message%' },
                'plugin_secret_copy_success': { 'msg': 'The password has been copied to clipboard' },
                'plugin_clipboard_copy_success': { 'msg': 'The %name% has been copied to clipboard' },
                'app_favorites_add_success': { 'msg': 'The password has been added as a favorite' },
                'app_favorites_delete_success': { 'msg': 'The password has been removed from favorites' },
                'app_comments_addPost_success': { 'msg': 'The comment has been added' },
                'app_comments_delete_success': { 'msg': 'The comment has been deleted' },
                'app_share_share_success': { 'msg': 'The permissions have been updated successfully' },
                'app_groups_add_success': { 'msg': 'The group has been added successfully' },
                'app_groups_edit_success': { 'msg': 'The group has been edited successfully' },
                'app_groups_add_error': { 'msg': 'The group could not be saved' },
                'app_groups_delete_success': { 'msg': 'The group has been deleted' }
            }
        }
    };
});
/*app/config/config.json*/
define('app/config/config.json', [], function () {
    return {
        'app': {
            'controllerElt': '#js_app_controller',
            'namespace': 'passbolt',
            'ControllerClassName': 'passbolt.component.App'
        },
        'ui': { 'workspace': { 'showSidebar': true } },
        'notification': { 'timeout': 6000 },
        'error': { 'ErrorHandlerClassName': 'passbolt.error.ErrorHandler' },
        'event': { 'eventBusControllerElt': '#js_bus_controller' },
        'secret': {
            'generator': {
                'masks': [
                    'alpha',
                    'uppercase',
                    'digit',
                    'special'
                ],
                'length': 13
            }
        },
        'net': { 'ResponseHandlerClassName': 'passbolt.net.ResponseHandler' },
        'session': { 'checkTimeInterval': 60000 }
    };
});
/*passbolt*/
define('passbolt', [
    'app/bootstrap',
    'app/config/notification.json',
    'app/config/config.json',
    'lib/p3_narrow/p3.narrow'
], function (_bootstrap, _notification, _config) {
    'use strict';
    var _bootstrap2 = _interopRequireDefault(_bootstrap);
    var _notification2 = _interopRequireDefault(_notification);
    var _config2 = _interopRequireDefault(_config);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    $(document).ready(function () {
        $.p3.narrow({
            sizes: {
                fourfour: 440,
                fourheight: 480,
                fivefour: 540,
                six: 600,
                ninefive: 980,
                nineheight: 980
            }
        });
        mad.Config.load(cakephpConfig);
        mad.Config.load(_config2.default);
        mad.Config.load(_notification2.default);
        new _bootstrap2.default();
    });
});