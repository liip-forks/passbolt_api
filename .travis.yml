language: php

dist: trusty

sudo: required

#services:
#  - postgresql

env:
  global:
    - APP_FULL_BASE_URL=http://127.0.0.1
    - DEBUG=1
    - DATASOURCES_TEST_USERNAME=root
    - DATASOURCES_TEST_PASSWORD=""
    - DATASOURCES_TEST_DATABASE=passbolt_test
    - PASSBOLT_GPG_KEYRING=/home/travis/.gnupg
    - PASSBOLT_GPG_SERVER_KEY_FINGERPRINT=2FC8945833C51946E937F9FED47B0811573EE67E
    - PASSBOLT_GPG_SERVER_KEY_PUBLIC=config/gpg/unsecure.key
    - PASSBOLT_GPG_SERVER_KEY_PRIVATE=config/gpg/unsecure_private.key
    - PASSBOLT_REGISTRATION_PUBLIC=1
    - PASSBOLT_SELENIUM_ACTIVE=1

addons:
  apt:
    packages: &common_pkg
      - libgpgme11-dev
      - gnupg2

matrix:
  fast_finish: true

  include:
    # Default / DEBIAN 9 - Stretch
    # PHP 7.0 - MARIADB 10.1
    - php: 7.0
      env: PHPUNIT=1 COVERAGE=1 DB=mariadb DB_VERSION=10.1
      addons: &php7_addon
        mariadb: '10.1'
        apt:
          packages:
            - *common_pkg

    # Ubuntu - 18.x
    # PHP 7.2 - MYSQL 5.7
    - php: 7.0
      env: PHPUNIT=1 DB=mysql DB_VERSION=5.7
      addons: &php7_addon
        apt:
          sources:
            - mysql-5.7-trusty
          packages:
            - *common_pkg
            - mysql-server
            - mysql-client
      before_install:
        - sudo mysql -e "use mysql; update user set authentication_string=PASSWORD('') where User='root'; update user set plugin='mysql_native_password';FLUSH PRIVILEGES;"
        - sudo mysql_upgrade -u root
        - sudo service mysql restart

    # Minimal
    # PHP 7.0 - MARIADB 5.5
    - php: 7.0
      env: PHPUNIT=1 DB=mariadb DB_VERSION=5.5
      addons: &php7_addon
        mariadb: '5.5'
        apt:
          packages:
            - *common_pkg

    # PHP 7.2 - MARIADB 10.1
    - php: 7.2
      env: PHPUNIT=1 DB=mariadb DB_VERSION=10.1
      addons: &php7_addon
        mariadb: '10.1'
        apt:
          packages:
            - *common_pkg

    # PHP 7.0 - MARIADB 10.2
    - php: 7.0
      env: PHPUNIT=1 DB=mariadb DB_VERSION=10.2
      addons: &php7_addon
        mariadb: '10.2'
        apt:
          packages:
            - *common_pkg

    # Debian - Buster (Testing)
    # PHP 7.3 - MARIADB 10.3
    - php: 7.3
      env: PHPUNIT=1 DB=mariadb DB_VERSION=10.3
      addons: &php7_addon
        mariadb: '10.3'
        apt:
          packages:
            - *common_pkg

    # PHP 7.0 - POSTGRESQL 9.2
#    - php: 7.0
#      env: PHPUNIT=1 DB=postgresql DB_VERSION=9.2 DATASOURCES_TEST_DRIVER=Postgres DATASOURCES_TEST_USERNAME=postgres DATASOURCES_TEST_PORT=5432
#      addons: *php7_addon

    # PHP 7.0 - POSTGRESQL 9.4
#    - php: 7.0
#      env: PHPUNIT=1 DB=postgresql DB_VERSION=9.4 DATASOURCES_TEST_DRIVER=Postgres DATASOURCES_TEST_USERNAME=postgres DATASOURCES_TEST_PORT=5432
#      addons:
#        postgresql: "9.4"
#        apt:
#          packages:
#            - *common_pkg

    # PHPCS
    - php: 7.0
      env: PHPCS=1 DB=mysql DB_VERSION=5.6
      addons: *php7_addon

#  allow_failures:
#    # PHP 7.0 - POSTGRESQL 9.2
#    - php: 7.0
#      env: PHPUNIT=1 DB=postgresql DB_VERSION=9.2 DATASOURCES_TEST_DRIVER=Postgres DATASOURCES_TEST_USERNAME=postgres DATASOURCES_TEST_PORT=5432
#
#    # PHP 7.0 - POSTGRESQL 9.4
#    - php: 7.0
#      env: PHPUNIT=1 DB=postgresql DB_VERSION=9.4 DATASOURCES_TEST_DRIVER=Postgres DATASOURCES_TEST_USERNAME=postgres DATASOURCES_TEST_PORT=5432

before_script:
  - sh -c "if [ '$DB' = 'mysql' ]; then mysql -e 'CREATE DATABASE IF NOT EXISTS passbolt_test;'; fi"
  - sh -c "if [ '$DB' = 'mariadb' ]; then mysql -e 'CREATE DATABASE IF NOT EXISTS passbolt_test;'; fi"
#  - sh -c "if [ '$DB' = 'postgresql' ]; then psql -c 'DROP DATABASE IF EXISTS passbolt_test;' -U postgres; fi"
#  - sh -c "if [ '$DB' = 'postgresql' ]; then psql -c 'CREATE DATABASE passbolt_test;' -U postgres; fi"
  - composer global require hirak/prestissimo
  - composer install --no-interaction
  - echo yes | pecl install gnupg
  - gpg --import config/gpg/unsecure_private.key

script:
  - if [[ $PHPCS = 1 ]]; then composer cs-check; fi
  - if [[ $PHPUNIT = 1 && $COVERAGE != 1 ]]; then vendor/bin/phpunit; fi
  - if [[ $PHPUNIT = 1 && $COVERAGE = 1 ]] ; then vendor/bin/phpunit --coverage-clover build/logs/clover.xml; fi

after_success:
  - if [[ $COVERAGE = 1 ]] ; then bash <(curl -s https://codecov.io/bash); fi

notifications:
  email: false
