# Auto DevOps
# This CI/CD configuration provides a standard pipeline for
# * building a Docker image (using a buildpack if necessary),
# * storing the image in the container registry,
# * running tests from a buildpack,
# * running code quality analysis,
# * creating a review app for each topic branch,
# * and continuous deployment to production
#
# Test jobs may be disabled by setting environment variables:
# * test: TEST_DISABLED
# * code_quality: CODE_QUALITY_DISABLED
# * license_management: LICENSE_MANAGEMENT_DISABLED
# * performance: PERFORMANCE_DISABLED
# * sast: SAST_DISABLED
# * dependency_scanning: DEPENDENCY_SCANNING_DISABLED
# * container_scanning: CONTAINER_SCANNING_DISABLED
# * dast: DAST_DISABLED
# * review: REVIEW_DISABLED
# * stop_review: REVIEW_DISABLED
#
# In order to deploy, you must have a Kubernetes cluster configured either
# via a project integration, or via group/project variables.
# AUTO_DEVOPS_DOMAIN must also be set as a variable at the group or project
# level, or manually added below.
#
# Continuous deployment to production is enabled by default.
# If you want to deploy to staging first, set STAGING_ENABLED environment variable.
# If you want to enable incremental rollout, either manual or time based,
# set INCREMENTAL_ROLLOUT_MODE environment variable to "manual" or "timed".
# If you want to use canary deployments, set CANARY_ENABLED environment variable.
#
# If Auto DevOps fails to detect the proper buildpack, or if you want to
# specify a custom buildpack, set a project variable `BUILDPACK_URL` to the
# repository URL of the buildpack.
# e.g. BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-ruby.git#v142
# If you need multiple buildpacks, add a file to your project called
# `.buildpacks` that contains the URLs, one on each line, in order.
# Note: Auto CI does not work with multiple buildpacks yet


image: alpine:latest

variables:
  # MySQL services variables
  MYSQL_USER: user
  MYSQL_PASSWORD: testing-password
  MYSQL_ROOT_PASSWORD: testing-password2
  MYSQL_DATABASE: test

  # Passbolt unit test job common variables
  DEBUG: "true"
  DATASOURCES_DEFAULT_DATABASE: $MYSQL_DATABASE
  DATASOURCES_DEFAULT_USERNAME: $MYSQL_USER
  DATASOURCES_DEFAULT_PASSWORD: $MYSQL_PASSWORD
  DATASOURCES_DEFAULT_HOST: 127.0.0.1
  DATASOURCES_TEST_DATABASE: $MYSQL_DATABASE
  DATASOURCES_TEST_USERNAME: $MYSQL_USER
  DATASOURCES_TEST_PASSWORD: $MYSQL_PASSWORD
  DATASOURCES_TEST_HOST: 127.0.0.1
  PASSBOLT_GPG_SERVER_KEY_PUBLIC: config/gpg/unsecure.key
  PASSBOLT_GPG_SERVER_KEY_PRIVATE: config/gpg/unsecure_private.key
  APP_FULL_BASE_URL: http://127.0.0.1
  PASSBOLT_REGISTRATION_PUBLIC: 1
  PASSBOLT_SELENIUM_ACTIVE: 1
  # This is the development dummy fingerprint
  PASSBOLT_GPG_SERVER_KEY_FINGERPRINT: 2FC8945833C51946E937F9FED47B0811573EE67E
  PHPUNIT_COMMAND: vendor/bin/phpunit --log-junit unitreport.xml

  DOCKER_HOST: tcp://localhost:2375
  DOCKER_DRIVER: overlay2
  # Injected as environment variables
  # CI_REGISTRY_IMAGE:
  # Downstream variables

stages:
  - test
  - release

include:
  - template: Code-Quality.gitlab-ci.yml
  - '/.gitlab-ci/Jobs/php_unit_tests.yml'
  - '/.gitlab-ci/Jobs/artifact_build.yml'
